import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as i,o as t}from"./app-CzKZ5RuK.js";const c={};function r(a,o){return t(),n("div",null,o[0]||(o[0]=[i(`<p>经过前面几篇文章对 Spring Bean 生命周期、常用注解、设计模式以及 Spring Boot 架构的探讨，我们已经对 Spring 和 Spring Boot 的核心概念有了一定的了解。今天，我们将把这些知识串联起来，深入剖析一个更为复杂但至关重要的主题：<strong>Spring Boot 的启动流程</strong>。</p><p>理解 Spring Boot 应用从一行简单的 <code>main</code> 方法到完全可用、处理请求的全过程，是掌握其“魔法”的关键。它不仅能帮助我们更好地利用框架特性、进行高级定制，更是高效排查启动问题和应对高阶面试的必备技能。</p><p>让我们一起按图索骥，分解 Spring Boot 的启动“大戏”！</p><hr><h2 id="深度解析-spring-boot-启动流程-从-main-到-ready-的完整旅程" tabindex="-1"><a class="header-anchor" href="#深度解析-spring-boot-启动流程-从-main-到-ready-的完整旅程"><span>深度解析 Spring Boot 启动流程：从 Main 到 Ready 的完整旅程</span></a></h2><h3 id="引言-启动流程-理解-spring-boot-的-起点" tabindex="-1"><a class="header-anchor" href="#引言-启动流程-理解-spring-boot-的-起点"><span>引言：启动流程，理解 Spring Boot 的“起点”</span></a></h3><p>对于一个 Spring Boot 应用来说，一切的起点都始于那个经典的 <code>main</code> 方法。然而，从这简单的几行代码，到整个应用上下文初始化完成、Web 服务器启动、随时可以处理外部请求，其间经历了许多复杂而精密的步骤。</p><p>这个过程就是 Spring Boot 的启动流程。它像一条流水线，有序地完成了环境准备、配置加载、组件发现、Bean 定义加载、Bean 实例化和初始化、以及各种后置处理等工作。</p><p>掌握启动流程的价值在于：</p><ul><li><strong>揭秘底层原理：</strong> 理解自动配置、条件化 Bean 加载、Bean 生命周期等核心机制是如何在启动过程中被触发和执行的。</li><li><strong>高效问题排查：</strong> 当应用启动失败（例如 <code>BeanCreationException</code>, <code>ClassNotFoundException</code> 等）时，了解哪个阶段出了问题，能极大地缩小排查范围。</li><li><strong>掌握扩展点：</strong> 知道在启动过程的哪些关键节点可以插入自定义逻辑（如修改环境、注册 Bean 定义、执行启动后任务）。</li><li><strong>自信应对面试：</strong> 启动流程是 Spring Boot 面试中必考的高频、高难度问题，能够清晰、深入地阐述这个过程，是技术实力的体现。</li></ul><p>本文将以 <code>SpringApplication.run()</code> 方法为主线，逐步剖析 Spring Boot 启动过程中的各个关键阶段、涉及的核心组件及其作用。</p><h3 id="启动入口-main-方法与-springapplication-run" tabindex="-1"><a class="header-anchor" href="#启动入口-main-方法与-springapplication-run"><span>启动入口：<code>main</code> 方法与 <code>SpringApplication.run()</code></span></a></h3><p>一个典型的 Spring Boot 应用的入口类通常长这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySpringBootApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MySpringBootApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>@SpringBootApplication</code> 是一个复合注解，包含了 <code>@SpringBootConfiguration</code> (等同于 <code>@Configuration</code>)、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code>，它是 Spring Boot 应用的推荐主配置注解。</p><p>而 <code>SpringApplication.run()</code> 方法则是整个启动过程的<strong>核心引导</strong>。<code>SpringApplication</code> 类本身并不包含业务逻辑，它是一个工具类，封装了 Spring Boot 应用从启动到运行的整个流程。</p><h3 id="springapplication-run-流程深度解析-重点" tabindex="-1"><a class="header-anchor" href="#springapplication-run-流程深度解析-重点"><span><code>SpringApplication.run()</code> 流程深度解析 (重点)</span></a></h3><p><code>SpringApplication.run()</code> 方法内部是一个精心编排的序列流程。我们将这个流程分解为几个主要阶段来深入理解：</p><p><strong>流程概览 (文字描述):</strong></p><p>创建 SpringApplication 实例 -&gt; 加载运行监听器 (RunListeners) -&gt; 启动监听器并发送 <code>starting</code> 事件 -&gt; 配置并准备 Environment -&gt; 通知监听器 <code>environmentPrepared</code> -&gt; 创建 ApplicationContext -&gt; 准备 ApplicationContext (应用 Initializers, 加载 BeanDefinitions) -&gt; <strong>刷新 ApplicationContext (<code>refresh()</code>) -&gt; 通知监听器 <code>started</code></strong> -&gt; 调用 Runners -&gt; 通知监听器 <code>running</code> -&gt; 应用运行。</p><p>现在，我们来详细分解这些阶段：</p><h4 id="_3-1-springapplication-实例的创建与初始化" tabindex="-1"><a class="header-anchor" href="#_3-1-springapplication-实例的创建与初始化"><span>3.1 <code>SpringApplication</code> 实例的创建与初始化</span></a></h4><p>当调用 <code>SpringApplication.run(Source, args)</code> 时，如果这是第一次调用或者没有传入现有的 <code>SpringApplication</code> 实例，<code>run</code> 方法内部会创建一个新的 <code>SpringApplication</code> 实例。</p><ul><li><strong>推断主应用类：</strong> <code>SpringApplication</code> 会尝试从调用栈中推断出哪个类是主应用类（即带有 <code>main</code> 方法的类），将其作为主要的配置源。</li><li><strong>推断 Web 应用类型：</strong> Spring Boot 会根据 Classpath 中是否存在特定的类（如 <code>jakarta.servlet.Servlet</code> 对应传统的 Servlet Web 应用，<code>org.springframework.web.reactive.DispatcherHandler</code> 对应响应式 Web 应用），推断出当前的 Web 应用类型。这将决定后续创建哪种类型的 <code>ApplicationContext</code>。</li><li><strong>加载 <code>SpringApplicationRunListener</code> 列表：</strong> <code>SpringApplication</code> 在初始化时，会通过 <strong><code>SpringFactoriesLoader</code></strong> 机制，从 Classpath 下所有 JAR 包的 <code>META-INF/spring.factories</code> 文件中加载 <code>org.springframework.boot.SpringApplicationRunListener</code> 接口的实现类列表。<code>SpringFactoriesLoader</code> 是 Spring Boot 提供的一个工具类，它能够读取 <code>META-INF/spring.factories</code> 文件中指定的接口/类的实现类列表，这是 Spring Boot 实现大量自动化和扩展的基础（不仅用于 RunListener，也用于自动配置类等）。</li></ul><h4 id="_3-2-springapplicationrunlisteners-启动并发送-starting-事件" tabindex="-1"><a class="header-anchor" href="#_3-2-springapplicationrunlisteners-启动并发送-starting-事件"><span>3.2 <code>SpringApplicationRunListeners</code> 启动并发送 <code>starting</code> 事件</span></a></h4><p>在 <code>SpringApplication</code> 实例创建并初始化完成后，它会遍历所有通过 <code>SpringFactoriesLoader</code> 加载到的 <code>SpringApplicationRunListener</code> 实例，并调用它们的 <code>starting(ConfigurableBootstrapContext bootstrapContext)</code> 方法。</p><ul><li><strong>作用：</strong> <code>SpringApplicationRunListener</code> 是 Spring Boot 启动过程中<strong>最早期的扩展点</strong>。你可以在这里获取到一个 <code>ConfigurableBootstrapContext</code>，在环境对象（Environment）创建之前做一些非常早期的工作或准备。</li></ul><h4 id="_3-3-构建并配置-environment-环境" tabindex="-1"><a class="header-anchor" href="#_3-3-构建并配置-environment-环境"><span>3.3 构建并配置 <code>Environment</code> 环境</span></a></h4><p>这个阶段负责创建和配置 Spring 应用所使用的 <code>Environment</code> 环境对象。</p><ul><li><strong>创建 <code>Environment</code>：</strong> 根据应用的 Web 类型，创建相应的 <code>ConfigurableEnvironment</code> 实现类（如 <code>StandardServletEnvironment</code>）。</li><li><strong>配置属性源：</strong> 从各种外部配置源（命令行参数 <code>args</code>、系统属性 <code>System.getProperties()</code>、操作系统环境变量 <code>System.getenv()</code>、<code>application.properties</code>/<code>application.yml</code> 文件等）加载配置属性，并将它们添加到 <code>Environment</code> 的 <code>PropertySources</code> 中，并按照既定的优先级顺序排列。</li><li><strong>激活 Profiles：</strong> 根据配置（如命令行参数 <code>-Dspring.profiles.active=dev</code> 或 <code>application.properties</code> 中的 <code>spring.profiles.active</code>）设置激活的 Profiles。</li><li><strong>通知监听器 <code>environmentPrepared</code>：</strong> <code>SpringApplication</code> 会再次通知 <code>SpringApplicationRunListener</code>s，调用它们的 <code>environmentPrepared(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</code> 方法。 <ul><li><strong>作用：</strong> 这是在 <code>Environment</code> 对象构建完成但 <code>ApplicationContext</code> 尚未创建时的扩展点。你可以在这里访问和修改 <code>Environment</code> 对象，例如添加、修改或移除属性源，或者根据环境信息动态决定后续的配置。</li></ul></li></ul><h4 id="_3-4-准备-applicationcontext" tabindex="-1"><a class="header-anchor" href="#_3-4-准备-applicationcontext"><span>3.4 准备 <code>ApplicationContext</code></span></a></h4><p>环境准备好后，Spring Boot 开始创建和准备 <code>ApplicationContext</code> 容器。</p><ul><li><strong>创建 <code>ApplicationContext</code> 实例：</strong> 根据第 3.1 步推断或用户指定的 Web 应用类型，创建相应的 <code>ApplicationContext</code> 实现类实例（如 <code>AnnotationConfigServletWebServerApplicationContext</code> 用于传统的 Servlet Web 应用）。</li><li><strong>设置 <code>Environment</code> 和其他属性：</strong> 将之前创建和配置好的 <code>Environment</code> 设置到 <code>ApplicationContext</code> 中。设置 BeanFactoryPostProcessor、BeanPostProcessor 的顺序等属性。</li><li><strong>执行 <code>ApplicationContextInitializer</code>s：</strong> <code>SpringApplication</code> 会通过 <code>SpringFactoriesLoader</code> 加载所有 <code>ApplicationContextInitializer</code> 接口的实现类，并调用它们的 <code>initialize(ConfigurableApplicationContext applicationContext)</code> 方法。 <ul><li><strong>作用：</strong> 这是在 <code>ApplicationContext</code> 刷新（refresh）<strong>之前</strong>的扩展点。你可以在这里对 <code>ApplicationContext</code> 进行进一步的编程式设置，例如添加 PropertySource、注册 BeanDefinition 等。</li></ul></li><li><strong>加载 Bean Definitions：</strong> 这是将应用中的配置元数据（来自 <code>@SpringBootApplication</code> 中的 <code>@ComponentScan</code> 和 <code>@Configuration</code>、<code>@Import</code> 等）转化为 Spring 内部的 <code>BeanDefinition</code> 对象的过程。 <ul><li>扫描通过 <code>@ComponentScan</code> 指定的基础包，查找带有 <code>@Component</code> 及其派生注解的类，为它们创建 <code>BeanDefinition</code>。</li><li>处理 <code>@Configuration</code> 类，解析其内部的 <code>@Bean</code> 方法，为这些方法返回值创建 <code>BeanDefinition</code>。</li><li>处理 <code>@Import</code> 导入的类或 <code>ImportSelector</code>/<code>ImportBeanDefinitionRegistrar</code>。</li><li><strong>重要：处理 <code>@EnableAutoConfiguration</code>。</strong> 根据 <code>SpringFactoriesLoader</code> 从 <code>spring.factories</code> 加载到的<strong>自动配置类候选列表</strong>，以及每个自动配置类上的 <code>@Conditional</code> 注解判断结果，过滤出最终需要生效的自动配置类。然后解析这些生效的自动配置类中的 <code>@Bean</code> 方法，创建相应的 <code>BeanDefinition</code>。这是自动配置真正转化为 Bean 定义的阶段。</li></ul></li><li><strong>注册 <code>BeanDefinition</code> 到 <code>BeanFactory</code>：</strong> 将所有加载和解析到的 <code>BeanDefinition</code> 注册到 <code>ApplicationContext</code> 内嵌的 <code>BeanFactory</code> 中。</li></ul><h4 id="_3-5-刷新-applicationcontext-refresh-方法-标准-spring-framework-核心流程" tabindex="-1"><a class="header-anchor" href="#_3-5-刷新-applicationcontext-refresh-方法-标准-spring-framework-核心流程"><span>3.5 刷新 <code>ApplicationContext</code> (<code>refresh()</code> 方法) - 标准 Spring Framework 核心流程</span></a></h4><p>这是整个 Spring Boot 启动流程中<strong>最核心、最关键、最复杂</strong>的阶段，也是大部分 Spring Framework 功能初始化和 Bean 生命周期执行的地方。<code>SpringApplication.run()</code> 方法的大部分时间都花在调用 <code>context.refresh()</code> 上。</p><p><code>ApplicationContext</code> 的 <code>refresh()</code> 方法本身是一个模板方法，定义了容器初始化的算法骨架，具体步骤由子类实现。其内部包含一系列子阶段：</p><ul><li><code>prepareRefresh()</code>：准备刷新上下文，如设置激活状态、记录启动时间、初始化属性源、校验环境等。</li><li><code>obtainBeanFactory()</code>：获取用于 Bean 管理的 <code>BeanFactory</code>（对于 AnnotationConfigApplicationContext 来说，通常是 <code>DefaultListableBeanFactory</code>）。</li><li><code>prepareBeanFactory(ConfigurableListableBeanFactory beanFactory)</code>：准备 BeanFactory。设置类加载器，注册一些特殊的 BeanPostProcessor (如 <code>AutowiredAnnotationBeanPostProcessor</code> 的工厂，用于处理 <code>@Autowired</code> 注解)。注册一些重要的内置 Bean (如 <code>environment</code>, <code>systemProperties</code>, <code>systemEnvironment</code>)。</li><li><code>postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)</code>：<strong>调用在启动过程中注册的所有 <code>BeanFactoryPostProcessor</code> 的 <code>postProcessBeanFactory()</code> 方法。</strong> <strong>这是在 Bean 实例化之前修改 BeanDefinition 的最后机会。</strong> <code>@ConfigurationClassPostProcessor</code> (它是一个 <code>BeanDefinitionRegistryPostProcessor</code> 和 <code>BeanFactoryPostProcessor</code>) 会在这里进一步处理 <code>@Configuration</code>, <code>@ComponentScan</code>, <code>@PropertySource</code>, <code>@Import</code> 等注解，包括<strong>执行自动配置类中根据 <code>@Conditional</code> 判断后生效的 <code>@Bean</code> 方法</strong>，注册更多的 BeanDefinition。</li><li><code>invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory)</code>: 触发执行上述注册的 <code>BeanFactoryPostProcessor</code>s 和 <code>BeanDefinitionRegistryPostProcessor</code>s。</li><li><code>registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory)</code>：查找容器中所有实现了 <code>BeanPostProcessor</code> 接口的 Bean（它们本身也是普通的 Bean，可能通过自动配置或手动配置注册），将它们注册为特殊的 BeanPostProcessor 列表，供后续 Bean 创建时使用。<code>AutowiredAnnotationBeanPostProcessor</code>, <code>CommonAnnotationBeanPostProcessor</code>, <code>AnnotationAwareAspectJAutoProxyCreator</code> (如果启用 AOP) 等重要的后置处理器都是在这里注册的。</li><li><code>initMessageSource()</code>：初始化国际化消息源。</li><li><code>initApplicationEventMulticaster()</code>：初始化应用事件多播器，用于发布和监听应用事件。</li><li><code>onRefresh()</code>：调用 ApplicationContext 子类重写的刷新方法。例如，对于 WebServerApplicationContext，<strong>内嵌 Web 服务器的创建和启动就发生在此阶段</strong>。</li><li><strong><code>finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory)</code>：</strong> <strong>这是 Bean 生命周期的主要执行阶段！</strong> 在此阶段，BeanFactory 会遍历所有<strong>非延迟加载</strong>的单例 Bean 的 <code>BeanDefinition</code>，<strong>按依赖关系顺序依次创建和初始化它们</strong>。 <ul><li><strong>Bean 的完整生命周期流程</strong> (实例化 -&gt; 属性填充 -&gt; Aware 回调 -&gt; BeanPostProcessor#before -&gt; 自定义初始化 -&gt; BeanPostProcessor#after -&gt; Bean Ready) 就在这里被驱动执行。</li><li><strong>自动配置创建的 Bean</strong> 也在此阶段被实例化和初始化。</li><li><strong>AOP 代理的创建</strong> 也主要在此阶段发生（通过 <code>AnnotationAwareAspectJAutoProxyCreator</code> 等 BeanPostProcessor 在 Bean 初始化后进行）。</li></ul></li><li><code>finishRefresh()</code>：<code>refresh()</code> 流程的最后阶段。发布 <code>ContextRefreshedEvent</code> 事件（表示容器已完全刷新）。初始化生命周期处理器，启动实现了 <code>Lifecycle</code> 接口的 Bean（如内嵌 Web 服务器）。</li></ul><p><strong><code>refresh()</code> 流程与外部概念的关联：</strong></p><ul><li><strong>Bean 生命周期：</strong> <code>finishBeanFactoryInitialization()</code> 是核心。</li><li><strong>BeanPostProcessor/BeanFactoryPostProcessor：</strong> 在 <code>prepareBeanFactory()</code>, <code>postProcessBeanFactory()</code>, <code>invokeBeanFactoryPostProcessors()</code>, <code>registerBeanPostProcessors()</code> 等阶段被注册和执行，是修改 Bean 定义和 Bean 实例的关键。</li><li><strong>自动配置：</strong> 自动配置类被解析（Bean Definition 加载阶段），根据条件判断（<code>invokeBeanFactoryPostProcessors</code> 阶段，<code>@ConfigurationClassPostProcessor</code>），最终自动配置的 Bean 在 <code>finishBeanFactoryInitialization</code> 阶段被创建。</li></ul><h4 id="_3-6-springapplicationrunlisteners-发送-started-事件" tabindex="-1"><a class="header-anchor" href="#_3-6-springapplicationrunlisteners-发送-started-事件"><span>3.6 <code>SpringApplicationRunListeners</code> 发送 <code>started</code> 事件</span></a></h4><p><code>ApplicationContext</code> 成功刷新并完全可用后，<code>SpringApplication</code> 会通知 <code>SpringApplicationRunListener</code>s，调用它们的 <code>started(ConfigurableApplicationContext context)</code> 方法。</p><ul><li><strong>作用：</strong> 这是在 <code>ApplicationContext</code> 完全加载并刷新后，但在调用 <code>CommandLineRunner</code> 和 <code>ApplicationRunner</code> 之前执行的扩展点。可以在这里执行一些需要访问完整 ApplicationContext 的逻辑。</li></ul><h4 id="_3-7-调用-commandlinerunner-和-applicationrunner" tabindex="-1"><a class="header-anchor" href="#_3-7-调用-commandlinerunner-和-applicationrunner"><span>3.7 调用 <code>CommandLineRunner</code> 和 <code>ApplicationRunner</code></span></a></h4><p>查找 ApplicationContext 中所有实现了 <code>CommandLineRunner</code> 或 <code>ApplicationRunner</code> 接口的 Bean，并调用它们的 <code>run()</code> 方法。</p><ul><li><strong>作用：</strong> 这些是应用启动后执行特定任务的常用方式，例如初始化数据库数据、执行一次性任务等。<code>ApplicationRunner</code> 提供了对应用参数 <code>ApplicationArguments</code> 更方便的访问。</li></ul><h4 id="_3-8-springapplicationrunlisteners-发送-running-事件" tabindex="-1"><a class="header-anchor" href="#_3-8-springapplicationrunlisteners-发送-running-事件"><span>3.8 <code>SpringApplicationRunListeners</code> 发送 <code>running</code> 事件</span></a></h4><p>当所有 <code>CommandLineRunner</code> 和 <code>ApplicationRunner</code> 执行完毕后，<code>SpringApplication</code> 通知 <code>SpringApplicationRunListener</code>s，调用它们的 <code>running(ConfigurableApplicationContext context)</code> 方法。</p><ul><li><strong>作用：</strong> 表示应用已经完全启动并进入运行状态。</li></ul><h4 id="_3-9-应用退出" tabindex="-1"><a class="header-anchor" href="#_3-9-应用退出"><span>3.9 应用退出</span></a></h4><p>在应用生命周期结束后（正常关闭或异常退出），Spring 容器会执行关闭流程，触发 Bean 的销毁方法（<code>@PreDestroy</code>, <code>DisposableBean</code>, <code>destroy-method</code>），释放资源。</p><h3 id="核心组件在启动流程中的作用总结" tabindex="-1"><a class="header-anchor" href="#核心组件在启动流程中的作用总结"><span>核心组件在启动流程中的作用总结</span></a></h3><p>理解启动流程，离不开对其中关键组件职责的认知：</p><ul><li><strong><code>SpringApplication</code>:</strong> 引导和协调整个 Spring Boot 应用的启动，封装了启动的核心流程。</li><li><strong><code>SpringFactoriesLoader</code>:</strong> Spring Boot 内部非常重要的加载器，负责从 <code>META-INF/spring.factories</code> 文件中发现并加载各种接口的实现类，如 <code>SpringApplicationRunListener</code>, <code>ApplicationContextInitializer</code>, <code>EnableAutoConfiguration</code> (通过 <code>@EnableAutoConfiguration</code> 间接使用) 等。它是 Spring Boot 实现“开箱即用”和高度可扩展性的基石。</li><li><strong><code>SpringApplicationRunListener</code>:</strong> 在启动过程的关键里程碑（启动中、环境准备、上下文刷新完成、运行中）提供事件通知，是最早期的扩展点。</li><li><strong><code>Environment</code>:</strong> 存储应用的配置属性和 Profile 信息。</li><li><strong><code>ApplicationContextInitializer</code>:</strong> 在 ApplicationContext 刷新前对其进行编程式初始化设置。</li><li><strong><code>BeanFactoryPostProcessor</code> (<code>BeanDefinitionRegistryPostProcessor</code>):</strong> 在 Bean 实例化之前，Bean 定义加载完成后，修改 Bean 定义 (<code>BeanDefinition</code>) 或动态注册新的 Bean 定义。处理 <code>@Configuration</code>, <code>@ComponentScan</code>, <code>@PropertySource</code>，<strong>以及自动配置的主要处理者 (<code>ConfigurationClassPostProcessor</code>)</strong>。</li><li><strong><code>BeanPostProcessor</code>:</strong> 在 Bean 实例化后，初始化前后，对 Bean 实例进行后置处理、增强或替换。处理 <code>@Autowired</code>, <code>@Value</code>, <code>@PostConstruct</code>, <code>@PreDestroy</code>，<strong>以及创建 AOP 代理</strong>。它们是实现依赖注入、生命周期回调、AOP 等功能的关键。</li><li><strong><code>ApplicationContext</code>:</strong> Spring IoC 容器本身，负责管理 Bean 的生命周期和依赖关系。其 <code>refresh()</code> 方法是容器功能初始化和 Bean 创建的核心过程。</li><li><strong><code>CommandLineRunner</code> / <code>ApplicationRunner</code>:</strong> 在应用完全启动后执行特定任务。</li></ul><h3 id="自动配置是如何在启动过程中生效的-再次强调" tabindex="-1"><a class="header-anchor" href="#自动配置是如何在启动过程中生效的-再次强调"><span>自动配置是如何在启动过程中生效的？ (再次强调)</span></a></h3><p>我们再将自动配置与启动流程串联起来，以强化理解：</p><ol><li><strong>发现 (启动早期):</strong> 在 <code>SpringApplication</code> 初始化阶段，<code>SpringFactoriesLoader</code> 读取 <code>spring.factories</code> 文件，发现所有标记为 <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code> 的自动配置类候选列表。</li><li><strong>加载 Bean Definition (ApplicationContext 准备阶段):</strong> 在加载 Bean 定义时，Spring Boot 会处理这些自动配置类候选。虽然它们是 <code>@Configuration</code> 类，但其是否生效取决于其上的 <code>@Conditional</code> 注解。只有满足条件的自动配置类才会被视为有效的 <code>@Configuration</code> 类，并将其 <code>@Bean</code> 方法解析为 Bean Definition。</li><li><strong>应用/创建 Bean (ApplicationContext 刷新阶段 - <code>refresh()</code>):</strong><ul><li>在 <code>invokeBeanFactoryPostProcessors</code> 阶段，<code>ConfigurationClassPostProcessor</code> 会处理所有 <code>@Configuration</code> 类（包括那些通过 <code>@Conditional</code> 生效的自动配置类），进一步解析 <code>@Bean</code> 方法。</li><li><strong>在 <code>finishBeanFactoryInitialization</code> 阶段，Spring 容器会根据已经注册的 Bean Definition (包括手动配置的和自动配置的)，实例化和初始化 Bean。</strong> 此时，自动配置创建的 Bean 才真正被创建出来，并经历完整的 Bean 生命周期（包括 <code>@Autowired</code> 属性注入，依赖于 <code>AutowiredAnnotationBeanPostProcessor</code>；<code>@PostConstruct</code> 调用，依赖于 <code>CommonAnnotationBeanPostProcessor</code> 等）。</li></ul></li></ol><p>所以，自动配置的<strong>发现</strong>发生在启动早期（<code>SpringFactoriesLoader</code>），但它的<strong>加载和应用</strong>（根据条件判断是否生效、创建 Bean）则贯穿于 <code>ApplicationContext</code> 的准备阶段和<strong>核心的 <code>refresh()</code> 阶段</strong>。</p><h3 id="启动过程中重要的扩展点" tabindex="-1"><a class="header-anchor" href="#启动过程中重要的扩展点"><span>启动过程中重要的扩展点</span></a></h3><p>了解启动流程，就是了解可以在哪些地方插入自己的代码来影响或扩展 Spring Boot 的行为：</p><ul><li><strong><code>SpringApplicationRunListener</code>:</strong> 如果需要在环境准备前或上下文刷新前后做全局性的、非常早期的工作。</li><li><strong><code>ApplicationContextInitializer</code>:</strong> 如果需要在 <code>ApplicationContext</code> 刷新前对其进行编程式的设置。</li><li>实现 <code>BeanFactoryPostProcessor</code> / <code>BeanDefinitionRegistryPostProcessor</code>: 如果需要在 Bean 实例化前修改 Bean 定义或动态注册 Bean。</li><li>实现 <code>BeanPostProcessor</code>: 如果需要在 Bean 实例化后、初始化前后修改 Bean 实例（如进行 AOP 增强）。</li><li>自定义 <code>@Configuration</code> 和 <code>@Bean</code>: 这是最常用的扩展点，用于定义自己的业务 Bean 或第三方库 Bean。</li><li>实现 <code>CommandLineRunner</code> / <code>ApplicationRunner</code>: 如果需要在应用完全启动、所有 Bean 都可用后执行一些特定的启动逻辑。</li></ul><h3 id="理解-spring-boot-启动流程的价值总结" tabindex="-1"><a class="header-anchor" href="#理解-spring-boot-启动流程的价值总结"><span>理解 Spring Boot 启动流程的价值总结</span></a></h3><p>掌握 Spring Boot 的启动流程，就像拥有了一张详细的地图。你清楚地知道从 <code>main</code> 方法到应用就绪的每一个路标、每一个检查点、每一个服务区。</p><ul><li>当应用启动失败，异常栈指向某个 Bean 创建问题时，你可以根据异常出现的阶段（例如是在 <code>BeanFactoryPostProcessor</code> 阶段解析 Bean Definition 失败，还是在 <code>finishBeanFactoryInitialization</code> 阶段实例化 Bean 失败）快速定位问题。</li><li>当你想知道某个自动配置为什么没有生效时，你可以根据启动流程，检查 <code>spring.factories</code> 文件中是否有对应的自动配置类，检查相关的 <code>@Conditional</code> 条件是否满足，甚至 debug <code>refresh()</code> 过程中的 <code>invokeBeanFactoryPostProcessors</code> 和 <code>finishBeanFactoryInitialization</code> 阶段。</li><li>当你需要集成某个第三方库并希望它能像 Spring Boot 内置功能一样“开箱即用”时，你可以借鉴自动配置的设计思想，编写自己的 <code>META-INF/spring.factories</code> 和 <code>@Conditional</code> 的 <code>@Configuration</code> 类。</li></ul><h3 id="springboot-启动流程为何是面试热点" tabindex="-1"><a class="header-anchor" href="#springboot-启动流程为何是面试热点"><span>SpringBoot 启动流程为何是面试热点</span></a></h3><p>Spring Boot 启动流程是考察候选人 Spring 功底深度的黄金问题。面试官希望通过这个问题，判断你是否：</p><ol><li>理解 <code>SpringApplication</code> 这个引导类的工作。</li><li>了解 <code>spring.factories</code> 这种扩展机制。</li><li>清楚启动过程中的关键事件和监听器。</li><li><strong>最重要的是，是否理解 Spring Boot 的启动流程是如何构建在标准的 Spring Framework <code>ApplicationContext.refresh()</code> 流程之上的，以及 Bean 的生命周期和自动配置等核心功能是在 <code>refresh()</code> 过程的哪个子阶段被触发和完成的。</strong></li></ol><p>能够清晰、有条理地讲解 <code>run()</code> 的各个阶段，并能将这些阶段与 Bean 生命周期、自动配置、BeanPostProcessor 等概念准确关联起来，是证明你对 Spring Boot 和 Spring Framework 有着深刻理解的关键。</p><h3 id="面试问题示例与深度解析" tabindex="-1"><a class="header-anchor" href="#面试问题示例与深度解析"><span>面试问题示例与深度解析</span></a></h3><p>以下是一些常见的 Spring Boot 启动流程面试问题，供大家复习时参考：</p><ol><li><strong>请描述一下 Spring Boot 的启动流程。</strong><ul><li><strong>要点：</strong> 从 <code>main</code> 方法 -&gt; <code>SpringApplication.run()</code> -&gt; <code>SpringApplication</code> 实例创建 -&gt; <code>SpringFactoriesLoader</code> 加载 Listeners -&gt; <code>starting</code> 事件 -&gt; <code>Environment</code> 构建 -&gt; <code>environmentPrepared</code> 事件 -&gt; <code>ApplicationContext</code> 创建 -&gt; Initializers 执行 -&gt; Bean Definitions 加载 (扫描, <code>@Configuration</code>, <strong>auto-config via <code>spring.factories</code> 和 <code>@Conditional</code></strong>) -&gt; <strong><code>ApplicationContext.refresh()</code> (核心！) -&gt; <code>started</code> 事件</strong> -&gt; Runners 执行 -&gt; <code>running</code> 事件。</li></ul></li><li><strong><code>SpringApplication.run()</code> 方法里面主要做了哪些事情？</strong><ul><li><strong>要点：</strong> 概括上面流程中的 3.1 到 3.8 阶段的主要工作（创建 SpringApplication、事件通知、环境准备、上下文准备、上下文刷新、Runners 执行）。</li></ul></li><li><strong><code>SpringFactoriesLoader</code> 在启动流程中有什么作用？请举例说明加载了哪些组件。</strong><ul><li><strong>要点：</strong> 回答是 Spring Boot 的核心加载器，负责读取 <code>META-INF/spring.factories</code> 文件。举例加载的组件：<code>SpringApplicationRunListener</code>, <code>ApplicationContextInitializer</code>, <code>EnableAutoConfiguration</code> 对应的自动配置类列表。</li></ul></li><li><strong>自动配置是在启动流程的哪个阶段生效的？如何生效？</strong><ul><li><strong>要点：</strong> <strong>发现</strong>发生在启动早期 (通过 <code>SpringFactoriesLoader</code>)。<strong>加载和应用</strong>发生在 <code>ApplicationContext</code> 的准备阶段（解析 Bean 定义）和<strong>核心的 <code>refresh()</code> 阶段</strong>（特别是在 <code>invokeBeanFactoryPostProcessors</code> 子阶段，根据 <code>@Conditional</code> 判断自动配置类是否生效并处理 <code>@Bean</code> 方法，然后在 <code>finishBeanFactoryInitialization</code> 子阶段实例化自动配置的 Bean）。</li></ul></li><li><strong><code>ApplicationContext.refresh()</code> 在 Spring Boot 启动流程中扮演什么角色？</strong><ul><li><strong>要点：</strong> 回答是标准 Spring Framework 容器初始化的核心流程。Spring Boot 的 <code>run()</code> 方法很大一部分工作就是调用它。<strong>强调 Bean 的生命周期（实例化、初始化、后置处理等）和容器大部分功能的初始化都发生在这个方法执行期间，包括自动配置创建的 Bean 的实例化。</strong></li></ul></li><li><strong><code>CommandLineRunner</code> 和 <code>ApplicationRunner</code> 有什么用？它们在启动流程的哪个阶段执行？</strong><ul><li><strong>要点：</strong> 用途：在应用完全启动并创建好 ApplicationContext 后执行特定逻辑。执行阶段：在 <code>ApplicationContext.refresh()</code> 完成后， <code>running</code> 事件发出之前。</li></ul></li><li><strong>启动流程中有哪些扩展点可以介入？分别在哪个阶段？</strong><ul><li><strong>要点：</strong> <code>SpringApplicationRunListener</code> (最早，environmentPrepared 事件前后)，<code>ApplicationContextInitializer</code> (refresh() 前)，实现 BeanFactoryPostProcessor/BeanDefinitionRegistryPostProcessor (refresh() 中，修改 BeanDefinition)，实现 BeanPostProcessor (refresh() 中，修改 Bean 实例)，自定义 <code>@Configuration</code>/<code>@Bean</code> (加载 Bean Definition)，<code>CommandLineRunner</code>/<code>ApplicationRunner</code> (refresh() 后)。</li></ul></li><li><strong>解释一下 <code>ApplicationContext</code> 刷新过程 (refresh()) 中与 Bean 创建相关的几个重要阶段（如 <code>invokeBeanFactoryPostProcessors</code>, <code>finishBeanFactoryInitialization</code>）。</strong><ul><li><strong>要点：</strong> <code>invokeBeanFactoryPostProcessors</code>：执行 BeanFactoryPostProcessor，处理 <code>@Configuration</code>, <code>@ComponentScan</code>, <strong>自动配置</strong>等，修改或注册 BeanDefinition。 <code>finishBeanFactoryInitialization</code>：<strong>实例化所有非延迟加载的单例 Bean，执行 Bean 的完整生命周期，包括 <code>@Autowired</code>, <code>@PostConstruct</code>, AOP 代理等</strong>。</li></ul></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Spring Boot 的启动流程是一个复杂但清晰的、多阶段协调合作的过程。从 <code>main</code> 方法中调用 <code>SpringApplication.run()</code> 开始，它经历了 <code>SpringApplication</code> 初始化、事件发布、环境准备、上下文创建和准备、<strong>核心的 <code>ApplicationContext.refresh()</code> 刷新</strong>，最终执行 Runners 并进入运行状态。</p><p>理解这个流程，特别是 <code>SpringFactoriesLoader</code> 的发现机制、<code>ApplicationContext.refresh()</code> 作为 Bean 生命周期和容器初始化的核心作用、以及自动配置在其中的加载时机，是深入掌握 Spring Boot 的关键。它将帮助你更自信地开发、排查问题，并在面试中展现出对框架底层的深刻认知。</p>`,73)]))}const p=e(c,[["render",r],["__file","springboot-start.html.vue"]]),l=JSON.parse('{"path":"/springboot/springboot-start.html","title":"","lang":"zh-CN","frontmatter":{"description":"经过前面几篇文章对 Spring Bean 生命周期、常用注解、设计模式以及 Spring Boot 架构的探讨，我们已经对 Spring 和 Spring Boot 的核心概念有了一定的了解。今天，我们将把这些知识串联起来，深入剖析一个更为复杂但至关重要的主题：Spring Boot 的启动流程。 理解 Spring Boot 应用从一行简单的 ma...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/springboot/springboot-start.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"经过前面几篇文章对 Spring Bean 生命周期、常用注解、设计模式以及 Spring Boot 架构的探讨，我们已经对 Spring 和 Spring Boot 的核心概念有了一定的了解。今天，我们将把这些知识串联起来，深入剖析一个更为复杂但至关重要的主题：Spring Boot 的启动流程。 理解 Spring Boot 应用从一行简单的 ma..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"深度解析 Spring Boot 启动流程：从 Main 到 Ready 的完整旅程","slug":"深度解析-spring-boot-启动流程-从-main-到-ready-的完整旅程","link":"#深度解析-spring-boot-启动流程-从-main-到-ready-的完整旅程","children":[{"level":3,"title":"引言：启动流程，理解 Spring Boot 的“起点”","slug":"引言-启动流程-理解-spring-boot-的-起点","link":"#引言-启动流程-理解-spring-boot-的-起点","children":[]},{"level":3,"title":"启动入口：main 方法与 SpringApplication.run()","slug":"启动入口-main-方法与-springapplication-run","link":"#启动入口-main-方法与-springapplication-run","children":[]},{"level":3,"title":"SpringApplication.run() 流程深度解析 (重点)","slug":"springapplication-run-流程深度解析-重点","link":"#springapplication-run-流程深度解析-重点","children":[]},{"level":3,"title":"核心组件在启动流程中的作用总结","slug":"核心组件在启动流程中的作用总结","link":"#核心组件在启动流程中的作用总结","children":[]},{"level":3,"title":"自动配置是如何在启动过程中生效的？ (再次强调)","slug":"自动配置是如何在启动过程中生效的-再次强调","link":"#自动配置是如何在启动过程中生效的-再次强调","children":[]},{"level":3,"title":"启动过程中重要的扩展点","slug":"启动过程中重要的扩展点","link":"#启动过程中重要的扩展点","children":[]},{"level":3,"title":"理解 Spring Boot 启动流程的价值总结","slug":"理解-spring-boot-启动流程的价值总结","link":"#理解-spring-boot-启动流程的价值总结","children":[]},{"level":3,"title":"SpringBoot 启动流程为何是面试热点","slug":"springboot-启动流程为何是面试热点","link":"#springboot-启动流程为何是面试热点","children":[]},{"level":3,"title":"面试问题示例与深度解析","slug":"面试问题示例与深度解析","link":"#面试问题示例与深度解析","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1745924024000,"updatedTime":1746115551000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":2}]},"readingTime":{"minutes":17.25,"words":5176},"filePathRelative":"springboot/springboot-start.md","localizedDate":"2025年4月29日","autoDesc":true}');export{p as comp,l as data};
