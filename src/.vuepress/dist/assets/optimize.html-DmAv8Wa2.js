import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e,o as l}from"./app-CzKZ5RuK.js";const t={};function i(o,a){return l(),s("div",null,a[0]||(a[0]=[e(`<p>MySQL调优是面试中最常问的问题，但是面试者在回答这个问题的时候，答的很混乱，逻辑不清晰，也不全面。今天就跟大家一起总结一下MySQL调优流程。</p><p>面试官：我看你的简历上写着精通MySQL调优，你说一下MySQL调优流程？</p><h1 id="排查慢sql" tabindex="-1"><a class="header-anchor" href="#排查慢sql"><span>排查慢SQL</span></a></h1><p>第一步不是使用explain命令分析慢SQL，而是先要找到慢SQL。 排查慢SQL，最容易想到的就是查看慢SQL日志。</p><h2 id="慢sql日志" tabindex="-1"><a class="header-anchor" href="#慢sql日志"><span>慢SQL日志</span></a></h2><ol><li>查找慢SQL日志文件位置：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%slow_query_log_file%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/优化MySQL1.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ol start="2"><li>使用<strong>mysqldumpslow</strong>命令分析慢SQL日志</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>常用参数有
<span class="token operator">-</span>s: 表示按何种方式排序：
　　c: 访问次数
　　l: 锁定时间
　　r: 返回记录
　　t: 查询时间
　　al: 平均锁定时间
　　ar: 平均返回记录数
　　at: 平均查询时间
<span class="token operator">-</span>t: 返回前面多少条的数据；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询返回结果最多的10条SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysqldumpslow <span class="token operator">-</span>s r <span class="token operator">-</span>t <span class="token number">10</span> <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>localhost_slow<span class="token punctuation">.</span>log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/优化MySQL2.png" alt="image.png" loading="lazy"> 查询耗时最长的10条SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysqldumpslow <span class="token operator">-</span>s t <span class="token operator">-</span>t <span class="token number">10</span> <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>localhost_slow<span class="token punctuation">.</span>log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/优化MySQL3.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="performance-schema-库" tabindex="-1"><a class="header-anchor" href="#performance-schema-库"><span>performance_schema 库</span></a></h2><p>performance_schema库帮助我们记录了MySQL的运行情况，很多性能问题都可以在performance_schema库中查到。 有哪些锁等待、加锁的SQL、正在执行的事务等。</p><ul><li>information_schema.innodb_lock_waits 锁等待</li><li>information_schema.innodb_locks 定位锁</li><li>information_schema.innodb_trx 定位事务</li><li>performance_schema.threads 定位线程</li><li>performance_schema.events_statements_current 定位SQL</li><li>information_schema.processlist 正在执行的SQL进程</li><li>information_schema.profiling 分析SQL每一步的耗时，查询性能瓶颈</li></ul><ol><li>查看锁等待情况：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>innodb_lock_waits<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/优化MySQL4.png" alt="image.png" loading="lazy"> 可以看到有一个锁等待的事务。</p><ol start="2"><li>查看正在竞争的锁</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>innodb_locks<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/优化MySQL5.png" alt="image.png" loading="lazy"> 可以看到，MySQL统计的非常详细：</p><blockquote><p>lock_trx_id 表示事务ID lock_mode 表示排它锁还是共享锁 lock_type 表示锁定的记录，还是范围 lock_table 锁的表名 lock_index 锁定的是主键索引</p></blockquote><ol start="3"><li>查看正在执行的事务</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>innodb_trx<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/优化MySQL6.png" alt="image.png" loading="lazy"> 可以清楚的看到正在执行的事务有两个，一个状态是锁等待（LOCK WAIT），正在执行的SQL也打印出来了。</p><ol start="4"><li>查看事务线程</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> performance_schema<span class="token punctuation">.</span>threads <span class="token keyword">where</span> processlist_id<span class="token operator">=</span><span class="token number">193</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/优化MySQL7.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ol start="5"><li>查看线程正在执行的SQL语句</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> THREAD_ID<span class="token punctuation">,</span>CURRENT_SCHEMA<span class="token punctuation">,</span>SQL_TEXT 
<span class="token keyword">from</span> performance_schema<span class="token punctuation">.</span>events_statements_current 
<span class="token keyword">where</span> thread_id<span class="token operator">=</span><span class="token number">218</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/优化MySQL8.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h1 id="优化慢sql" tabindex="-1"><a class="header-anchor" href="#优化慢sql"><span>优化慢SQL</span></a></h1><h2 id="explain执行计划" tabindex="-1"><a class="header-anchor" href="#explain执行计划"><span>explain执行计划</span></a></h2><p>最常用的方案就是使用explain命令，查看SQL的索引使用情况。 <img src="https://javabaguwen.com/img/优化MySQL9.png" alt="image.png" loading="lazy"> 优先查看type字段，可以看到是否用到索引？用到了哪种索引？性能由好到差依次是：</p><blockquote><p>system &gt; const &gt; eq_ref &gt; ref &gt; ref_or_null &gt; index_merge &gt; range &gt; index &gt; ALL</p></blockquote><p>再看一下key_len（索引长度），可以看出用到了联合索引中的前几列。 再看一下rows（预估扫描行数），如果扫描行数过多，表示匹配到结果数过多，会出现慢SQL，可以修改查询条件，缩减查询范围，减少扫描行数。 最后看一下Extra字段，如果显示Using index表示用到了覆盖索引，减少了回表查询，可以提高查询效率。如果显示Using filesort（排序字段没有使用索引）、Using temporary（用到临时表存储中间查询结果）、Using join buffer（表连接没有用到索引），这些都是需要优化的。</p><h2 id="创建索引规范" tabindex="-1"><a class="header-anchor" href="#创建索引规范"><span>创建索引规范</span></a></h2><p>有时候已经创建索引未必合适，可以选取适合创建索引的字段。 哪些字段适合创建索引？有如下几条规范：</p><ol><li>频繁查询的字段适合创建索引</li><li>区分度高的字段适合创建索引</li><li>有序的字段适合创建索引</li><li>在where和on条件出现的字段优先创建索引</li><li>优先创建联合索引，区分度高的字段放在联合索引第一列</li><li>过长字符串可以使用前缀索引</li><li>频繁更新的字段不适合创建索引</li><li>避免创建过多索引</li></ol><h2 id="优化查询规范" tabindex="-1"><a class="header-anchor" href="#优化查询规范"><span>优化查询规范</span></a></h2><p>总结了一些使用MySQL查询的规范，遵守可以提高查询效率。 <img src="https://javabaguwen.com/img/优化MySQL10.png" alt="image.png" loading="lazy"></p><h2 id="索引失效" tabindex="-1"><a class="header-anchor" href="#索引失效"><span>索引失效</span></a></h2><p>如果遇到索引失效，也有可能出现慢SQL。常见的索引失效场景有如下这些：</p><ol><li>数据类型隐式转换</li><li>模糊查询 like 以%开头</li><li>or前后没有同时使用索引</li><li>联合索引，没有使用第一列索引</li><li>在索引字段进行计算操作</li><li>在索引字段字段上使用函数</li><li>优化器选错索引</li></ol><p>如果优化器选错索引，可以使用force index强制使用指定的索引。 例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">FORCE</span> <span class="token keyword">INDEX</span><span class="token punctuation">(</span>user_id<span class="token punctuation">)</span> <span class="token keyword">where</span> user_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="optimizer-trace-优化器追踪" tabindex="-1"><a class="header-anchor" href="#optimizer-trace-优化器追踪"><span>optimizer trace（优化器追踪）</span></a></h2><p>当MySQL表中存在多个索引时，MySQL优化器会选择其中一个或者多个，有时候也会选错索引。optimizer trace（优化器追踪）可以查看explain执行计划的生成过程，以及每个索引的预估成本，可以了解到MySQL优化器为什么会选择这个索引。 optimizer trace同样也是在information_schema库中。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>OPTIMIZER_TRACE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/优化MySQL11.png" alt="image.png" loading="lazy"> 输出结果共有4列：</p><blockquote><p>QUERY 表示我们执行的查询语句 TRACE 优化器生成执行计划的过程（重点关注） MISSING_BYTES_BEYOND_MAX_MEM_SIZE 优化过程其余的信息会被显示在这一列 INSUFFICIENT_PRIVILEGES 表示是否有权限查看优化过程，0是，1否</p></blockquote><p>接下来我们看一下TRACE列的内容，里面的数据很多，我们重点分析一下range_scan_alternatives结果列，这个结果列展示了索引选择的过程。 <img src="https://javabaguwen.com/img/优化MySQL12.png" alt="image.png" loading="lazy"> 输出结果字段含义：</p><blockquote><p>index 索引名称 ranges 查询范围 index_dives_for_eq_ranges 是否用到索引潜水的优化逻辑 rowid_ordered 是否按主键排序 using_mrr 是否使用mrr index_only 是否使用了覆盖索引 in_memory 使用内存大小 rows 预估扫描行数 cost 预估成本大小，值越小越好 chosen 是否被选择 cause 没有被选择的原因，cost表示成本过高</p></blockquote><p>从输出结果中，可以看到优化器最终选择了使用(<code>name</code>)索引，而(<code>gender</code>,<code>name</code>)索引因为成本过高没有被使用。</p><h2 id="死锁日志" tabindex="-1"><a class="header-anchor" href="#死锁日志"><span>死锁日志</span></a></h2><p>当使用MySQL事务的时候，可能会出现死锁，也会出现超时的情况。 可以使用命令查看死锁日志，以及产生死锁的SQL。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">engine</span> <span class="token keyword">innodb</span> <span class="token keyword">status</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/优化MySQL13.png" alt="image.png" loading="lazy"> 在死锁日志中，可以清楚地看到这两条insert语句产生了死锁，最终事务2被会回滚，事务1执行成功。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 事务1</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment"># 事务2</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>先看一下MySQL表数据量有多大，如果超过5千万条，常规的SQL优化手段不起作用，可以进行<code>分库分表</code>。</li><li>分库分表的同时，如果发现写请求很多，可以进行<code>读写分离</code>，拆分成读库和写库。</li><li>使用explain命令查看SQL执行计划，看是否用到索引、用到了哪些索引、索引的性能、扫描的行数等。</li><li>如果想知道explain命令中为什么会使用这个索引，可以使用 优化器追踪（optimizer trace）查看优化器的选择过程，以及每个索引的扫描行数、预估成本等。</li><li>如果要分析有哪些慢SQL，可以查看<code>慢SQL日志</code>slow_query_log，慢SQL中记录了耗时长的、锁定时间长的、返回记录多的SQL。</li><li>查看<code>死锁日志</code>，有没有出现死锁的情况。show engine innodb status;</li><li>看一下有没有深分页的问题，改成子查询，先查询出主键再查询出所有字段，用到覆盖索引。使用分页游标。</li><li>查看<code>information_schema</code>库，有哪些锁等待、加锁的SQL、正在执行的事务等。 <ul><li>information_schema.innodb_lock_waits 锁等待</li><li>information_schema.innodb_locks 定位锁</li><li>information_schema.innodb_trx 定位事务</li><li>performance_schema.threads 定位线程</li><li>performance_schema.events_statements_current 定位SQL</li><li>information_schema.processlist 正在执行的SQL进程</li><li>information_schema.profiling 分析SQL每一步的耗时，查询性能瓶颈</li></ul></li></ol><h2 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表"><span>分库分表</span></a></h2><p>如果常规的SQL优化手段不起作用，就可以进行分库分表。 <img src="https://javabaguwen.com/img/优化MySQL14.png" alt="image.png" loading="lazy"></p>`,65)]))}const r=n(t,[["render",i],["__file","optimize.html.vue"]]),d=JSON.parse('{"path":"/mysql/optimize.html","title":"排查慢SQL","lang":"zh-CN","frontmatter":{"description":"MySQL调优是面试中最常问的问题，但是面试者在回答这个问题的时候，答的很混乱，逻辑不清晰，也不全面。今天就跟大家一起总结一下MySQL调优流程。 面试官：我看你的简历上写着精通MySQL调优，你说一下MySQL调优流程？ 排查慢SQL 第一步不是使用explain命令分析慢SQL，而是先要找到慢SQL。 排查慢SQL，最容易想到的就是查看慢SQL日志...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/mysql/optimize.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:title","content":"排查慢SQL"}],["meta",{"property":"og:description","content":"MySQL调优是面试中最常问的问题，但是面试者在回答这个问题的时候，答的很混乱，逻辑不清晰，也不全面。今天就跟大家一起总结一下MySQL调优流程。 面试官：我看你的简历上写着精通MySQL调优，你说一下MySQL调优流程？ 排查慢SQL 第一步不是使用explain命令分析慢SQL，而是先要找到慢SQL。 排查慢SQL，最容易想到的就是查看慢SQL日志..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T06:25:28.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-04-29T06:25:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"排查慢SQL\\",\\"image\\":[\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL1.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL2.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL3.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL4.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL5.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL6.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL7.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL8.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL9.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL10.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL11.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL12.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL13.png\\",\\"https://javabaguwen.com/img/%E4%BC%98%E5%8C%96MySQL14.png\\"],\\"dateModified\\":\\"2025-04-29T06:25:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"慢SQL日志","slug":"慢sql日志","link":"#慢sql日志","children":[]},{"level":2,"title":"performance_schema 库","slug":"performance-schema-库","link":"#performance-schema-库","children":[]},{"level":2,"title":"explain执行计划","slug":"explain执行计划","link":"#explain执行计划","children":[]},{"level":2,"title":"创建索引规范","slug":"创建索引规范","link":"#创建索引规范","children":[]},{"level":2,"title":"优化查询规范","slug":"优化查询规范","link":"#优化查询规范","children":[]},{"level":2,"title":"索引失效","slug":"索引失效","link":"#索引失效","children":[]},{"level":2,"title":"optimizer trace（优化器追踪）","slug":"optimizer-trace-优化器追踪","link":"#optimizer-trace-优化器追踪","children":[]},{"level":2,"title":"死锁日志","slug":"死锁日志","link":"#死锁日志","children":[]},{"level":2,"title":"分库分表","slug":"分库分表","link":"#分库分表","children":[]}],"git":{"createdTime":1745907928000,"updatedTime":1745907928000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":7.09,"words":2128},"filePathRelative":"mysql/optimize.md","localizedDate":"2025年4月29日","autoDesc":true}');export{r as comp,d as data};
