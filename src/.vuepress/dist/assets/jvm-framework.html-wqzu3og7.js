import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,e as a,o}from"./app-CzKZ5RuK.js";const l={};function n(s,t){return o(),r("div",null,t[0]||(t[0]=[a('<p>作为 Java 开发者，我们几乎每天都在编写和运行 Java 代码，但代码在 JVM 中是如何执行的？数据存储在哪里？JVM 如何管理程序运行时所需的内存？理解 JVM 的内存区域划分（即运行时数据区）是深入 Java 虚拟机工作原理、进行性能调优、分析内存问题（如内存溢出 <code>OutOfMemoryError</code>）以及理解垃圾回收机制的基础。</p><p>JVM 运行时数据区是 Java 开发者绕不开的一个核心知识点，也是面试官考察候选人 JVM 基础和问题排查能力的高频话题。</p><p>今天，就让我们一起深入 JVM 的内存结构，全面解析运行时数据区的各个组成部分。</p><hr><h2 id="深度解析-jvm-运行时数据区-java-内存的奥秘" tabindex="-1"><a class="header-anchor" href="#深度解析-jvm-运行时数据区-java-内存的奥秘"><span>深度解析 JVM 运行时数据区：Java 内存的奥秘</span></a></h2><h3 id="引言-jvm-内存管理的重要性" tabindex="-1"><a class="header-anchor" href="#引言-jvm-内存管理的重要性"><span>引言：JVM 内存管理的重要性</span></a></h3><p>Java 语言的一大特性是“自动内存管理”（垃圾回收），这让开发者从繁琐的手动内存管理中解脱出来。然而，这并不意味着我们可以忽视内存。不当的代码实践仍然可能导致内存泄漏、内存溢出等问题，影响应用的性能和稳定性。</p><p>理解 JVM 运行时数据区的划分，就像理解一个程序的“工作空间”是如何组织的。这有助于我们：</p><ul><li>更好地理解代码的执行过程和对象的生命周期。</li><li>诊断和解决内存溢出 (<code>OutOfMemoryError</code>) 和栈溢出 (<code>StackOverflowError</code>) 等问题。</li><li>深入理解垃圾回收 (GC) 的工作原理及其在哪些区域发生。</li><li>进行针对性的性能优化。</li><li>从容应对面试中关于 JVM 内存模型的提问。</li></ul><p>JVM 在执行 Java 程序时，会将内存划分为几个不同的区域，这些区域有各自的用途、创建和销毁时机，以及是否线程私有。我们将这些区域统称为 <strong>JVM 运行时数据区</strong>。</p><h3 id="jvm-运行时数据区总览" tabindex="-1"><a class="header-anchor" href="#jvm-运行时数据区总览"><span>JVM 运行时数据区总览</span></a></h3><p>根据 Java 虚拟机规范，JVM 运行时数据区主要包括以下几个部分：</p><ol><li><strong>程序计数器 (Program Counter Register)</strong></li><li><strong>Java 虚拟机栈 (Java Virtual Machine Stacks)</strong></li><li><strong>本地方法栈 (Native Method Stacks)</strong></li><li><strong>Java 堆 (Heap)</strong></li><li><strong>方法区 (Method Area)</strong></li><li><strong>运行时常量池 (Runtime Constant Pool)</strong> (通常是方法区的一部分)</li></ol><p>这其中，<strong>程序计数器、Java 虚拟机栈、本地方法栈</strong> 是<strong>线程私有</strong>的，每个线程都有自己独立的这些区域。而 <strong>Java 堆、方法区、运行时常量池</strong> 则是<strong>线程共享</strong>的，整个 JVM 进程只有一个这些区域的实例，所有线程访问共享数据都需要考虑同步问题。</p><h3 id="各运行时数据区深度解析-重点" tabindex="-1"><a class="header-anchor" href="#各运行时数据区深度解析-重点"><span>各运行时数据区深度解析 (重点)</span></a></h3><h4 id="_2-1-程序计数器-program-counter-register" tabindex="-1"><a class="header-anchor" href="#_2-1-程序计数器-program-counter-register"><span>2.1 程序计数器 (Program Counter Register)</span></a></h4><ul><li><strong>作用：</strong> 程序计数器是一块较小的内存空间，用于存储当前线程正在执行的 JVM 指令的地址。</li><li><strong>存储内容：</strong> 如果线程正在执行的是一个 Java 方法，它记录的是当前正在执行的虚拟机字节码指令的地址。如果正在执行的是本地方法 (Native Method)，则这个计数器值为空 (Undefined)。</li><li><strong>特点：</strong><ul><li><strong>线程私有：</strong> 每个线程都有独立的程序计数器，互不影响。</li><li>它是 JVM 运行时数据区中<strong>唯一不会发生 <code>OutOfMemoryError</code> 的区域</strong>。</li></ul></li><li><strong>为什么线程私有？</strong> Java 虚拟机的多线程是通过线程轮流切换并分配处理器时间来实现的（任何一个时刻，一个处理器都只会处理一个线程的任务）。为了在线程切换后能恢复到正确的执行位置，每个线程都需要一个独立的程序计数器，记录下一条要执行的指令地址。</li><li><strong>面试关联：</strong> 线程私有性、作用、不会发生 OOM。</li></ul><h4 id="_2-2-java-虚拟机栈-java-virtual-machine-stacks" tabindex="-1"><a class="header-anchor" href="#_2-2-java-虚拟机栈-java-virtual-machine-stacks"><span>2.2 Java 虚拟机栈 (Java Virtual Machine Stacks)</span></a></h4><ul><li><strong>作用：</strong> 用于存储线程执行 Java 方法时的状态。每次方法被调用时，JVM 会创建一个<strong>栈帧 (Stack Frame)</strong>，并将其压入虚拟机栈的栈顶。方法执行完毕后，对应的栈帧会从栈顶弹出。</li><li><strong>存储内容 (栈帧构成)：</strong> 每个栈帧包含： <ul><li><strong>局部变量表 (Local Variable Table)：</strong> 存放方法参数和方法内部定义的局部变量。以变量槽 (Slot) 为单位，基本数据类型和对象引用占用 1 个 Slot，<code>long</code> 和 <code>double</code> 占用 2 个 Slot。</li><li><strong>操作数栈 (Operand Stack)：</strong> 用于存放方法执行过程中的中间计算结果。JVM 是基于栈的指令集架构，计算时需要将操作数压入栈顶，执行指令后再将结果压回栈顶。</li><li><strong>动态链接 (Dynamic Linking)：</strong> 指向运行时常量池中当前方法的引用。用于将符号引用转换为直接引用。</li><li><strong>方法返回地址 (Return Address)：</strong> 记录该方法的调用者的程序计数器值，用于方法正常退出后恢复调用者的执行。</li></ul></li><li><strong>特点：</strong><ul><li><strong>线程私有：</strong> 每个线程都有自己独立的虚拟机栈，栈的深度是有限的。</li></ul></li><li><strong>异常：</strong><ul><li><code>StackOverflowError</code>：当线程请求的栈深度大于虚拟机所允许的最大深度时抛出。例如，方法递归调用没有停止条件。</li><li><code>OutOfMemoryError</code>：如果虚拟机栈可以动态扩展，而无法申请到足够的内存时抛出（在 HotSpot VM 中，栈是固定大小的，所以通常只会发生 <code>StackOverflowError</code>）。</li></ul></li><li><strong>面试关联：</strong> 线程私有性、存储内容 (栈帧构成)、StackOverflowError 的原因。</li></ul><h4 id="_2-3-本地方法栈-native-method-stacks" tabindex="-1"><a class="header-anchor" href="#_2-3-本地方法栈-native-method-stacks"><span>2.3 本地方法栈 (Native Method Stacks)</span></a></h4><ul><li><strong>作用：</strong> 与 Java 虚拟机栈类似，但它是为虚拟机使用到的<strong>本地方法 (Native Method)</strong> 服务。许多 JVM 的底层功能或与操作系统交互的功能都是通过本地方法实现的 (例如 <code>Thread.start()</code>, <code>Object.wait()</code>)。</li><li><strong>特点：</strong><ul><li><strong>线程私有：</strong> 每个线程都有独立的本地方法栈。</li><li>异常：与 Java 虚拟机栈类似，也可能抛出 <code>StackOverflowError</code> 或 <code>OutOfMemoryError</code> (取决于实现)。</li></ul></li><li><strong>与 Java 虚拟机栈区别：</strong> Java 虚拟机栈服务于 Java 方法 (<code>.java</code> 文件编译成的字节码方法)，本地方法栈服务于 <code>native</code> 方法（通常用 C/C++ 实现）。</li><li><strong>面试关联：</strong> 作用、线程私有性、与 JVM 栈的区别。</li></ul><h4 id="_2-4-java-堆-heap" tabindex="-1"><a class="header-anchor" href="#_2-4-java-堆-heap"><span>2.4 Java 堆 (Heap)</span></a></h4><ul><li><strong>作用：</strong> JVM 管理的最大一块内存区域，用于存放<strong>对象实例</strong>和<strong>数组</strong>。几乎所有的对象实例都在堆上分配。</li><li><strong>特点：</strong><ul><li><strong>线程共享：</strong> 整个 JVM 进程只有一个堆实例，所有线程共享堆上的数据。因此，对象的访问需要考虑同步问题。</li><li><strong>垃圾回收的主要区域：</strong> 堆是垃圾回收器 (Garbage Collector - GC) 进行垃圾回收的主要区域。为了提高 GC 效率，现代 JVM 的堆通常会进行分代划分 (如新生代/Young Generation, 老年代/Old Generation)，垃圾回收器会根据对象的生命周期特点采用不同的回收算法。</li></ul></li><li><strong>异常：</strong> <code>OutOfMemoryError: Java heap space</code>：当堆中没有内存完成实例分配，且垃圾回收器也无法提供更多内存时抛出。这是最常见的内存溢出错误类型。</li><li><strong>面试关联：</strong> 线程共享、存放对象/数组、GC 主要区域、OOM: Java heap space。</li></ul><h4 id="_2-5-方法区-method-area" tabindex="-1"><a class="header-anchor" href="#_2-5-方法区-method-area"><span>2.5 方法区 (Method Area)</span></a></h4><ul><li><strong>作用：</strong> 用于存储已被虚拟机加载的类的<strong>元数据信息 (Metadata)</strong>。</li><li><strong>存储内容：</strong><ul><li>已被加载的类的结构信息 (类、接口、枚举、注解)。</li><li>运行时常量池 (Runtime Constant Pool)。</li><li>字段信息 (Field data)。</li><li>方法信息 (Method data)。</li><li>静态变量 (<code>static</code> variables)。</li><li>JIT (Just-In-Time) 编译器编译后的代码。</li></ul></li><li><strong>特点：</strong><ul><li><strong>线程共享：</strong> 整个 JVM 进程共享同一个方法区。</li></ul></li><li><strong>异常：</strong> <code>OutOfMemoryError: PermGen space</code> (Java 8 之前) 或 <code>OutOfMemoryError: Metaspace</code> (Java 8 及以后)。当方法区无法满足内存分配需求时抛出。</li><li><strong>演进：PermGen (永久代) vs Metaspace (元空间) - 重点！</strong><ul><li><strong>Java 8 之前：</strong> HotSpot VM 将方法区实现为<strong>永久代 (Permanent Generation - PermGen)</strong>。 PermGen 是位于<strong>堆内存</strong>中的一块区域，与新生代、老年代物理上相邻（逻辑上独立），且有固定的上限 (<code>-XX:MaxPermSize</code>)。这常常导致 PermGen 溢出，尤其是加载大量类、使用大量字符串常量、或者使用动态类生成技术的框架时。</li><li><strong>Java 8 及以后：</strong> HotSpot VM 移除了永久代，将方法区的实现改为了 <strong>元空间 (Metaspace)</strong>。元空间的元数据不再存储在 JVM 的堆内存中，而是存储在<strong>本地内存 (Native Memory)</strong> 中。Metaspace 的大小默认只受本地内存大小的限制，可以通过 <code>-XX:MaxMetaspaceSize</code> 参数设置上限，但默认是不设上限的。</li><li><strong>变化原因：</strong> 解决 PermGen 溢出问题；PermGen 的固定大小难以预测和调整；PermGen 的 GC 相对复杂；更好的内存利用率；与 JRockit VM (Oracle 另一款 JVM) 合并的需要。</li></ul></li><li><strong>面试关联：</strong> 线程共享、存储内容 (类元信息、静态变量等)、OOM 类型 (<code>PermGen space</code> vs <code>Metaspace</code>)、<strong>PermGen 到 Metaspace 的变化、原因、存储位置、默认大小</strong>。</li></ul><h4 id="_2-6-运行时常量池-runtime-constant-pool" tabindex="-1"><a class="header-anchor" href="#_2-6-运行时常量池-runtime-constant-pool"><span>2.6 运行时常量池 (Runtime Constant Pool)</span></a></h4><ul><li><strong>定义：</strong> 是方法区 (在 Java 8+ 为 Metaspace) 的一部分。每个类或接口的 <code>.class</code> 文件中都有一个常量池 (Constant Pool)。在类加载后，这个常量池的内容会被加载到运行时常量池中。</li><li><strong>作用：</strong> 存放各种字面量 (Literal) 和符号引用 (Symbolic Reference)。字面量如文本字符串、基本数据类型常量。符号引用如类和接口的全限定名、字段的名称和描述符、方法的名称和描述符等。</li><li><strong>位置：</strong> 位于方法区 (Java 8+ 为 Metaspace)。</li><li><strong>异常：</strong> <code>OutOfMemoryError: Runtime constant pool</code> (通常是方法区 OOM 的一种表现形式)。</li><li><strong>String Pool (字符串常量池)：</strong> 字符串常量池比较特殊。 <ul><li><strong>Java 7 之前：</strong> 字符串常量池位于 <strong>PermGen</strong> 中。</li><li><strong>Java 7 及以后：</strong> 字符串常量池被移到了 <strong>Java 堆</strong> 中。这缓解了 PermGen 的压力，但如果字符串过多，可能导致堆溢出。</li></ul></li><li><strong>面试关联：</strong> 作用、位置、String Pool 的位置变化及其原因。</li></ul><h3 id="线程私有与线程共享区域总结" tabindex="-1"><a class="header-anchor" href="#线程私有与线程共享区域总结"><span>线程私有与线程共享区域总结</span></a></h3><table><thead><tr><th style="text-align:left;">区域名称</th><th style="text-align:left;">是否线程私有</th><th style="text-align:left;">主要作用</th><th style="text-align:left;">典型存储内容</th><th style="text-align:left;">典型内存错误</th></tr></thead><tbody><tr><td style="text-align:left;">程序计数器</td><td style="text-align:left;">✅ 私有</td><td style="text-align:left;">记录当前线程执行指令地址</td><td style="text-align:left;">当前指令地址</td><td style="text-align:left;">无</td></tr><tr><td style="text-align:left;">Java 虚拟机栈</td><td style="text-align:left;">✅ 私有</td><td style="text-align:left;">方法执行</td><td style="text-align:left;">栈帧 (局部变量表, 操作数栈, 动态链接, 返回地址)</td><td style="text-align:left;"><code>StackOverflowError</code>, <code>OutOfMemoryError</code> (栈)</td></tr><tr><td style="text-align:left;">本地方法栈</td><td style="text-align:left;">✅ 私有</td><td style="text-align:left;">Native 方法执行</td><td style="text-align:left;">本地方法栈帧</td><td style="text-align:left;"><code>StackOverflowError</code>, <code>OutOfMemoryError</code> (栈)</td></tr><tr><td style="text-align:left;">Java 堆</td><td style="text-align:left;">❌ 共享</td><td style="text-align:left;">对象实例和数组</td><td style="text-align:left;">几乎所有对象实例</td><td style="text-align:left;"><code>OutOfMemoryError: Java heap space</code></td></tr><tr><td style="text-align:left;">方法区 (PermGen/Metaspace)</td><td style="text-align:left;">❌ 共享</td><td style="text-align:left;">类元信息</td><td style="text-align:left;">类结构信息, 运行时常量池, 静态变量, JIT 代码</td><td style="text-align:left;"><code>OutOfMemoryError: PermGen/Metaspace</code></td></tr><tr><td style="text-align:left;">运行时常量池</td><td style="text-align:left;">❌ 共享</td><td style="text-align:left;">字面量和符号引用</td><td style="text-align:left;">字符串常量, 类/方法/字段引用等</td><td style="text-align:left;"><code>OutOfMemoryError: Runtime constant pool</code> (方法区 OOM)</td></tr></tbody></table><h3 id="常见的内存溢出错误-outofmemoryerror-分析" tabindex="-1"><a class="header-anchor" href="#常见的内存溢出错误-outofmemoryerror-分析"><span>常见的内存溢出错误 (OutOfMemoryError) 分析</span></a></h3><p>理解了各个区域的作用，我们就能更好地分析常见的 OOM 错误：</p><ul><li><code>OutOfMemoryError: Java heap space</code>：堆内存不足。通常是创建了太多对象，或者存在内存泄漏导致大量对象无法被 GC 回收。</li><li><code>OutOfMemoryError: PermGen space</code> (Java 8 之前)：永久代内存不足。通常是加载了过多的类、String Pool 过大、或者使用了过多动态生成的类。</li><li><code>OutOfMemoryError: Metaspace</code> (Java 8 及以后)：元空间内存不足。通常是加载了过多的类，默认情况下是无上限的，但如果设置了 <code>-XX:MaxMetaspaceSize</code> 且加载的类元信息超过此上限，或者存在 ClassLoader 泄漏导致类元信息无法卸载，就会发生。</li><li><code>StackOverflowError</code>：虚拟机栈或本地方法栈的栈深度溢出。通常是方法递归调用层数过多没有停止条件，或者栈帧过大。</li><li>其他 OOM 类型（如 Native Thread OOM）：JVM 申请本地内存（非堆、非 Metaspace）失败。可能与创建过多线程、DirectByteBuffer 内存不足等有关。</li></ul><h3 id="理解运行时数据区对开发者和面试的价值" tabindex="-1"><a class="header-anchor" href="#理解运行时数据区对开发者和面试的价值"><span>理解运行时数据区对开发者和面试的价值</span></a></h3><p>掌握 JVM 运行时数据区是 Java 开发者进阶的必经之路。它能帮助你：</p><ul><li><strong>进行内存分析：</strong> 结合 JMX、JVisualVM、MAT (Memory Analyzer Tool) 等工具，分析内存 Dump 文件时，能够清楚地知道各个对象存放在哪个区域，内存泄漏或溢出发生在哪个区域，从而快速定位问题。</li><li><strong>理解 GC 行为：</strong> 垃圾回收主要发生在堆和方法区。理解分代、GC Roots、对象的引用关系等需要建立在对这些区域的理解之上。</li><li><strong>优化性能：</strong> 合理调整各个内存区域的大小（通过 JVM 参数 <code>-Xms</code>, <code>-Xmx</code>, <code>-Xss</code>, <code>-XX:MaxMetaspaceSize</code> 等），选择合适的垃圾回收器，编写高效避免内存浪费或泄漏的代码。</li><li><strong>应对面试：</strong> 这是 Java 基础、JVM 原理、性能调优等面试方向的高频考点。</li></ul><h3 id="jvm-运行时数据区为何是面试热点" tabindex="-1"><a class="header-anchor" href="#jvm-运行时数据区为何是面试热点"><span>JVM 运行时数据区为何是面试热点</span></a></h3><ul><li><strong>Java 核心基础：</strong> 它是 JVM 执行模型和内存管理的基础。</li><li><strong>问题根源：</strong> 大部分内存相关的错误 (OOM, SOE) 都直接与这些区域相关。</li><li><strong>跨版本变化：</strong> Java 8 中 PermGen 到 Metaspace 的变化是重要的知识更新，面试官常用此来考察候选人是否学习了 Java 新特性。</li><li><strong>性能与 GC 基础：</strong> 理解这些区域是进一步学习 GC 算法和性能调优的前提。</li></ul><h3 id="面试问题示例与深度解析" tabindex="-1"><a class="header-anchor" href="#面试问题示例与深度解析"><span>面试问题示例与深度解析</span></a></h3><ul><li><strong>请列举 JVM 运行时数据区。哪些是线程私有的？哪些是线程共享的？</strong> (核心题，列出 5+1 个区域并正确区分私有/共享)</li><li><strong>Java 虚拟机栈的作用是什么？它存储了哪些内容？请解释栈帧的构成。</strong> (作用：方法执行。内容：栈帧。栈帧构成：局部变量表、操作数栈、动态链接、方法返回地址)</li><li><strong>程序计数器的作用是什么？为什么它是线程私有的？</strong> (作用：指令地址。私有原因：线程切换后恢复执行位置)</li><li><strong>Java 堆的作用是什么？为什么它是线程共享的？可能发生什么错误？</strong> (作用：存对象/数组。共享原因：所有对象共享。错误：OOM: Heap space)</li><li><strong>方法区的作用是什么？它存储了哪些内容？可能发生什么错误？</strong> (作用：类元信息。内容：类结构、常量池、静态变量、JIT代码。错误：OOM: PermGen/Metaspace)</li><li><strong>请解释 Java 8 中方法区的变化。PermGen 和 Metaspace 有什么区别？存储位置、默认大小、为什么会有这个变化？</strong> (<strong>核心！</strong> 必考题，详细对比：PermGen 在堆内固定大小 vs Metaspace 在本地内存默认无上限。变化原因：解决 PermGen 溢出、GC 复杂性等)</li><li><strong>运行时常量池的作用是什么？它在哪里？String Pool 在不同 Java 版本的位置有变化吗？</strong> (作用：字面量和符号引用。位置：方法区/Metaspace。String Pool：Java 7 之前 PermGen，Java 7 以后 Heap)</li><li><strong>请简述常见的内存溢出错误 (OutOfMemoryError) 类型及其发生原因。</strong> (回顾各个区域的 OOM 类型及原因)</li><li><strong>JVM 栈溢出 (StackOverflowError) 通常是什么原因导致的？</strong> (方法递归调用层数过深)</li><li><strong>Java 堆为什么要分代？</strong> (与 GC 算法相关，根据对象生命周期采用不同回收策略，提高 GC 效率 - 简述即可，无需深入 GC 算法)</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>JVM 运行时数据区是 Java 内存管理的核心。它清晰地划分了内存区域，为程序执行、对象存储、元数据管理、线程隔离以及垃圾回收提供了基础。理解程序计数器、虚拟机栈、本地方法栈、堆、方法区（PermGen/Metaspace）、运行时常量池各自的作用、特点以及线程私有/共享属性，特别是 Java 8 中方法区的重大变化，是掌握 JVM 内存模型的关键。</p>',41)]))}const g=e(l,[["render",n],["__file","jvm-framework.html.vue"]]),c=JSON.parse('{"path":"/jvm/jvm-framework.html","title":"","lang":"zh-CN","frontmatter":{"description":"作为 Java 开发者，我们几乎每天都在编写和运行 Java 代码，但代码在 JVM 中是如何执行的？数据存储在哪里？JVM 如何管理程序运行时所需的内存？理解 JVM 的内存区域划分（即运行时数据区）是深入 Java 虚拟机工作原理、进行性能调优、分析内存问题（如内存溢出 OutOfMemoryError）以及理解垃圾回收机制的基础。 JVM 运行时...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/jvm/jvm-framework.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"作为 Java 开发者，我们几乎每天都在编写和运行 Java 代码，但代码在 JVM 中是如何执行的？数据存储在哪里？JVM 如何管理程序运行时所需的内存？理解 JVM 的内存区域划分（即运行时数据区）是深入 Java 虚拟机工作原理、进行性能调优、分析内存问题（如内存溢出 OutOfMemoryError）以及理解垃圾回收机制的基础。 JVM 运行时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"深度解析 JVM 运行时数据区：Java 内存的奥秘","slug":"深度解析-jvm-运行时数据区-java-内存的奥秘","link":"#深度解析-jvm-运行时数据区-java-内存的奥秘","children":[{"level":3,"title":"引言：JVM 内存管理的重要性","slug":"引言-jvm-内存管理的重要性","link":"#引言-jvm-内存管理的重要性","children":[]},{"level":3,"title":"JVM 运行时数据区总览","slug":"jvm-运行时数据区总览","link":"#jvm-运行时数据区总览","children":[]},{"level":3,"title":"各运行时数据区深度解析 (重点)","slug":"各运行时数据区深度解析-重点","link":"#各运行时数据区深度解析-重点","children":[]},{"level":3,"title":"线程私有与线程共享区域总结","slug":"线程私有与线程共享区域总结","link":"#线程私有与线程共享区域总结","children":[]},{"level":3,"title":"常见的内存溢出错误 (OutOfMemoryError) 分析","slug":"常见的内存溢出错误-outofmemoryerror-分析","link":"#常见的内存溢出错误-outofmemoryerror-分析","children":[]},{"level":3,"title":"理解运行时数据区对开发者和面试的价值","slug":"理解运行时数据区对开发者和面试的价值","link":"#理解运行时数据区对开发者和面试的价值","children":[]},{"level":3,"title":"JVM 运行时数据区为何是面试热点","slug":"jvm-运行时数据区为何是面试热点","link":"#jvm-运行时数据区为何是面试热点","children":[]},{"level":3,"title":"面试问题示例与深度解析","slug":"面试问题示例与深度解析","link":"#面试问题示例与深度解析","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1746115551000,"updatedTime":1746115551000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":13.41,"words":4024},"filePathRelative":"jvm/jvm-framework.md","localizedDate":"2025年5月2日","autoDesc":true}');export{g as comp,c as data};
