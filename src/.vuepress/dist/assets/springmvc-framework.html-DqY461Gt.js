import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,e as d,o as n}from"./app-CzKZ5RuK.js";const l={};function c(t,e){return n(),r("div",null,e[0]||(e[0]=[d('<p>在现代 Web 应用开发领域，MVC (Model-View-Controller) 模式因其良好的分层和职责分离而被广泛采用。而 Spring MVC 作为 Spring Framework 的一个重要模块，更是 Java Web 开发中实现 MVC 模式的翘楚。</p><p>理解 Spring MVC 的架构设计，不仅仅是了解各个组件的名称，更重要的是理解一个 Web 请求是如何从用户浏览器到达服务器，经过 Spring MVC 内部的层层处理，最终生成响应并返回给用户的完整<strong>流程</strong>。这对于进行高级定制、排查 Web 层问题以及应对面试官对 Web 框架原理的考察至关重要。</p><p>今天，就让我们一起深入 Spring MVC 的内部，揭示其精巧的架构设计和请求处理的“幕后故事”。</p><hr><h2 id="深度解析-spring-mvc-架构设计-请求的奇幻漂流" tabindex="-1"><a class="header-anchor" href="#深度解析-spring-mvc-架构设计-请求的奇幻漂流"><span>深度解析 Spring MVC 架构设计：请求的奇幻漂流</span></a></h2><h3 id="引言-mvc-模式与-spring-的-web-实现" tabindex="-1"><a class="header-anchor" href="#引言-mvc-模式与-spring-的-web-实现"><span>引言：MVC 模式与 Spring 的 Web 实现</span></a></h3><p>MVC 是一种经典的软件架构模式，旨在将应用逻辑分解为三个相互关联的部分：</p><ul><li><strong>Model (模型)：</strong> 负责处理数据和业务逻辑。通常是 POJO 类，与数据源交互。</li><li><strong>View (视图)：</strong> 负责数据的展示，通常是用户界面。可以是 JSP、Thymeleaf、FreeMarker 等模板。</li><li><strong>Controller (控制器)：</strong> 接收用户输入，调用 Model 进行业务处理，并选择合适的 View 展示结果。它充当 Model 和 View 之间的协调者。</li></ul><p>Spring MVC 是基于 Spring Framework 构建的一个实现了 MVC 模式的 Web 框架。它充分利用了 Spring 的 IoC 和 AOP 等核心特性，提供了灵活、可配置的 Web 开发能力。</p><p>理解 Spring MVC 的架构设计，能让你：</p><ul><li>清晰地看到一个 Web 请求在框架内部的流转路径。</li><li>理解各个组件（如 DispatcherServlet, HandlerMapping, HandlerAdapter, ViewResolver）在流程中的具体职责和协作方式。</li><li>知道如何在请求处理的不同阶段进行拦截、修改参数、处理返回值或异常。</li><li>为排查“请求发了没反应”、“参数绑定不对”、“视图找不到”等问题提供方向。</li><li>从容应对面试中关于 Spring MVC 工作原理的提问。</li></ul><p>接下来，我们将以一个 Web 请求为线索，一步步分解 Spring MVC 的请求处理流程。</p><h3 id="spring-mvc-核心组件概览" tabindex="-1"><a class="header-anchor" href="#spring-mvc-核心组件概览"><span>Spring MVC 核心组件概览</span></a></h3><p>在深入流程之前，先认识一下 Spring MVC 架构中的几个核心“玩家”：</p><ul><li><strong><code>DispatcherServlet</code> (前端控制器)：</strong> 整个 Spring MVC 请求处理的中心，所有的请求首先由它接收，然后它负责将请求分发给后续的各个组件。</li><li><strong><code>HandlerMapping</code> (处理器映射器)：</strong> 负责根据请求信息（如 URL）查找对应的处理器（Handler，通常是 Controller 中的方法）。</li><li><strong><code>HandlerAdapter</code> (处理器适配器)：</strong> 负责执行找到的处理器（Handler）。因为它知道如何调用各种类型的 Handler（可能是 Controller 方法，也可能是其他类型的处理器）。</li><li><strong><code>Handler</code> (处理器)：</strong> 实际处理请求的业务逻辑代码，通常是 Controller 类中用 <code>@RequestMapping</code> 等注解标注的方法。</li><li><strong><code>ViewResolver</code> (视图解析器)：</strong> 负责将逻辑视图名解析为具体的视图对象（View）。</li><li><strong><code>View</code> (视图)：</strong> 负责渲染模型数据到客户端，生成最终的响应。</li><li><strong><code>ModelAndView</code>：</strong> HandlerAdapter 执行处理器后返回的对象，包含模型数据 (Model) 和逻辑视图名 (View Name)。</li><li><strong><code>HandlerExceptionResolver</code> (处理器异常解析器)：</strong> 负责处理请求处理过程中发生的异常。</li><li><strong><code>HandlerInterceptor</code> (处理器拦截器)：</strong> 允许在处理器执行前、后进行拦截操作。</li><li><strong><code>HandlerMethodArgumentResolver</code> (处理器方法参数解析器)：</strong> 负责解析处理器方法的参数。</li><li><strong><code>HandlerMethodReturnValueHandler</code> (处理器方法返回值处理器)：</strong> 负责处理处理器方法的返回值。</li><li><strong><code>HttpMessageConverter</code> (HTTP 消息转换器)：</strong> 负责将 HTTP 请求体读取为对象，或将对象写入 HTTP 响应体（如处理 JSON、XML）。</li></ul><h3 id="spring-mvc-请求处理核心流程图解-文字描述" tabindex="-1"><a class="header-anchor" href="#spring-mvc-请求处理核心流程图解-文字描述"><span>Spring MVC 请求处理核心流程图解 (文字描述)</span></a></h3><p>理解 Spring MVC 的关键在于理解请求流经这些组件的顺序。以下是一个 Web 请求在 Spring MVC 中处理的典型流程（从 <code>DispatcherServlet</code> 接收请求开始）：</p><ol><li><strong>请求到达 <code>DispatcherServlet</code>：</strong> 作为前端控制器，<code>DispatcherServlet</code> 接收到所有由其映射的 URL 请求（通常在 <code>web.xml</code> 或 Java Config 中配置）。</li><li><strong><code>DispatcherServlet</code> 查找 <code>HandlerMapping</code>：</strong> <code>DispatcherServlet</code> 委托给注册的所有 <code>HandlerMapping</code> 实例，尝试找到一个能够处理当前请求的 <code>Handler</code> (通常是 Controller 方法) 和一个 <code>HandlerExecutionChain</code> (包含 Handler 自身和需要应用的 <code>HandlerInterceptor</code> 列表)。 <ul><li><strong>关键点：</strong> <code>HandlerMapping</code> 根据请求信息（如 URL Path, HTTP Method, Header, Parameters 等）与 Handler 定义（如 <code>@RequestMapping</code> 注解信息）进行匹配。</li><li><strong>常见实现：</strong> <code>RequestMappingHandlerMapping</code> 是处理基于 <code>@RequestMapping</code> 注解的 Handler 的默认实现。</li></ul></li><li><strong><code>DispatcherServlet</code> 查找 <code>HandlerAdapter</code>：</strong> 找到 Handler 后，<code>DispatcherServlet</code> 委托给注册的所有 <code>HandlerAdapter</code> 实例，找到一个能够执行该 Handler 的适配器。 <ul><li><strong>关键点：</strong> <code>HandlerAdapter</code> 知道如何调用特定类型的 Handler。因为 Handler 可以是多种形式（早期的 Controller 接口实现，或现在的 HandlerMethod）。</li><li><strong>常见实现：</strong> <code>RequestMappingHandlerAdapter</code> 是用于执行基于 <code>@RequestMapping</code> 注点的 Controller 方法的默认实现。它内部会利用 <code>HandlerMethodArgumentResolver</code>s 解析方法参数，利用 <code>HandlerMethodReturnValueHandler</code>s 处理方法返回值。</li></ul></li><li><strong><code>HandlerAdapter</code> 执行 <code>Handler</code> (Controller 方法)：</strong><ul><li>在执行 Handler 方法之前，如果配置了 <code>HandlerInterceptor</code>s，<code>HandlerAdapter</code> 会回调 <code>HandlerInterceptor</code> 的 <code>preHandle()</code> 方法。如果任何一个 <code>preHandle()</code> 方法返回 <code>false</code>，整个请求处理流程中断。</li><li><code>HandlerAdapter</code> 调用找到的 Handler 方法。调用时： <ul><li>它利用配置的 <code>HandlerMethodArgumentResolver</code>s 来解析 Controller 方法的参数（例如，解析 <code>@RequestParam</code>, <code>@PathVariable</code>, <code>@RequestBody</code> 等注解，将请求中的数据绑定到方法参数上）。</li><li>Controller 方法执行具体的业务逻辑，调用 Service 层和 Model 层。</li></ul></li><li>Handler 方法执行完毕，返回结果。通常是 <code>ModelAndView</code> 对象、逻辑视图名字符串、或者其他任意对象（如果使用了 <code>@ResponseBody</code>）。</li></ul></li><li><strong>处理返回值 (通过 <code>HandlerMethodReturnValueHandler</code>)：</strong> <code>HandlerAdapter</code> (具体是 <code>RequestMappingHandlerAdapter</code>) 利用配置的 <code>HandlerMethodReturnValueHandler</code>s 来处理 Handler 方法的返回值。 <ul><li>如果返回值是 <code>ModelAndView</code> 或逻辑视图名，流程继续到视图解析阶段。</li><li>如果返回值标注了 <code>@ResponseBody</code> 注解，或者 Controller 类标注了 <code>@RestController</code> (其中包含了 <code>@ResponseBody</code>)，<code>HandlerMethodReturnValueHandler</code> (具体是 <code>RequestResponseBodyMethodProcessor</code> 等) 会使用 <code>HttpMessageConverter</code> 将返回值对象转换为指定的格式（如 JSON、XML），并直接写入 HTTP 响应体。<strong>此时，会跳过视图解析和视图渲染阶段。</strong></li><li>其他返回值类型（如 <code>String</code> 作为视图名，<code>void</code> 等）也有对应的处理器。</li></ul></li><li><strong><code>DispatcherServlet</code> 查找 <code>ViewResolver</code> (如果需要视图渲染)：</strong> 如果 Handler 方法返回的是 <code>ModelAndView</code> 或逻辑视图名，<code>DispatcherServlet</code> 会委托给注册的所有 <code>ViewResolver</code> 实例，根据逻辑视图名查找对应的 <code>View</code> 对象。 <ul><li><strong>关键点：</strong> <code>ViewResolver</code> 将一个抽象的逻辑视图名（如 <code>&quot;userList&quot;</code>）解析为一个具体的视图技术实现（如一个指向 <code>/WEB-INF/jsp/userList.jsp</code> 的 <code>JspView</code> 对象）。</li><li><strong>常见实现：</strong> <code>InternalResourceViewResolver</code> (用于 JSP 等内部资源), <code>ThymeleafViewResolver</code>, <code>FreeMarkerViewResolver</code> 等。</li></ul></li><li><strong><code>DispatcherServlet</code> 委托给 <code>View</code> 进行渲染：</strong> 找到具体的 <code>View</code> 对象后，<code>DispatcherServlet</code> 会将模型数据 (Model) 传递给 <code>View</code> 对象，调用其 <code>render()</code> 方法。 <ul><li><strong>关键点：</strong> <code>View</code> 对象负责结合模型数据和视图模板（如 JSP 文件）生成最终的 HTML、XML 或其他格式的内容，并写入 HTTP 响应流。</li></ul></li><li><strong>请求处理完毕 (后处理与异常处理)：</strong><ul><li><strong>后处理 (Post-handling)：</strong> 如果请求处理成功完成（未发生异常），<code>HandlerAdapter</code> 会回调 <code>HandlerInterceptor</code> 的 <code>postHandle()</code> 方法。然后，无论是否发生异常，<code>DispatcherServlet</code> 都会回调 <code>HandlerInterceptor</code> 的 <code>afterCompletion()</code> 方法。</li><li><strong>异常处理：</strong> 如果在请求处理的任何阶段发生异常（Handler Mapping、Handler Adapter 执行 Handler、视图渲染等），<code>DispatcherServlet</code> 会委托给注册的所有 <code>HandlerExceptionResolver</code> 实例来处理异常。<code>HandlerExceptionResolver</code> 可以将异常映射到特定的错误视图、返回错误信息（如 JSON）、设置响应状态码等。 <ul><li><strong>常见实现：</strong> <code>@ExceptionHandler</code> 方法、<code>SimpleMappingExceptionResolver</code>、<code>DefaultHandlerExceptionResolver</code>。</li></ul></li></ul></li><li><strong>响应返回客户端：</strong> 最终生成的响应内容（由 View 渲染或由 <code>HttpMessageConverter</code> 写入）通过 Servlet 容器返回给客户端。</li></ol><p><strong>请求处理流程简化图示 (文字版):</strong></p><p>请求 -&gt; <code>DispatcherServlet</code> -&gt; 查找 <code>HandlerMapping</code> (根据 URL 找 Handler) -&gt; 找到 <code>HandlerExecutionChain</code> (Handler + Interceptors) -&gt; 回调 <code>HandlerInterceptor.preHandle()</code> -&gt; 查找 <code>HandlerAdapter</code> (根据 Handler 类型) -&gt; <code>HandlerAdapter</code> 调用 <code>Handler</code> 方法 (<code>HandlerMethodArgumentResolver</code> 解析参数) -&gt; <code>Handler</code> 方法执行业务逻辑，返回结果 (如 <code>ModelAndView</code> 或 <code>@ResponseBody</code> 数据) -&gt; <code>HandlerAdapter</code> 处理返回值 (<code>HandlerMethodReturnValueHandler</code> 处理，<code>HttpMessageConverter</code> 如果 <code>@ResponseBody</code>) -&gt; 如果 <code>@ResponseBody</code>：直接写入响应体 -&gt; 回调 <code>HandlerInterceptor.afterCompletion()</code> -&gt; 完成 -&gt; 如果 <code>ModelAndView</code>： -&gt; 回调 <code>HandlerInterceptor.postHandle()</code> -&gt; <code>DispatcherServlet</code> 查找 <code>ViewResolver</code> (根据逻辑视图名找 View) -&gt; <code>DispatcherServlet</code> 委托 <code>View</code> 渲染 (结合 Model) -&gt; 回调 <code>HandlerInterceptor.afterCompletion()</code> -&gt; 完成</p><p><strong>异常处理流程 (插入):</strong></p><p>任何阶段抛出异常 -&gt; <code>DispatcherServlet</code> -&gt; 委托 <code>HandlerExceptionResolver</code> 处理 -&gt; 生成错误响应 (可能是错误视图或错误 JSON) -&gt; 回调 <code>HandlerInterceptor.afterCompletion()</code> -&gt; 完成</p><h3 id="核心组件详解" tabindex="-1"><a class="header-anchor" href="#核心组件详解"><span>核心组件详解</span></a></h3><p>理解流程后，我们再来深入看看流程中的几个核心组件的具体职责和常见实现：</p><ul><li><strong><code>DispatcherServlet</code>：</strong><ul><li><strong>职责：</strong> 前端控制器，所有请求的入口。负责初始化 Spring MVC 环境，协调整个请求处理流程，将请求转发给各个功能组件，并汇总处理结果。</li><li><strong>实现：</strong> Spring MVC 只提供这一个 <code>DispatcherServlet</code> 类，我们通过配置来使用它。</li></ul></li><li><strong><code>HandlerMapping</code>：</strong><ul><li><strong>职责：</strong> 将请求映射到 Handler (Controller 方法)。</li><li><strong>常见实现：</strong><ul><li><code>RequestMappingHandlerMapping</code>：默认实现，处理基于 <code>@RequestMapping</code> 系列注解 (如 <code>@GetMapping</code>, <code>@PostMapping</code>) 的 Handler。</li><li><code>SimpleUrlHandlerMapping</code>：基于 URL 路径与 Handler 的显式配置映射。</li><li><code>BeanNameUrlHandlerMapping</code>：将 URL 与容器中 Bean 的名称进行匹配。</li></ul></li></ul></li><li><strong><code>HandlerAdapter</code>：</strong><ul><li><strong>职责：</strong> 执行 Handler。屏蔽不同 Handler 类型的调用差异。</li><li><strong>常见实现：</strong><ul><li><code>RequestMappingHandlerAdapter</code>：默认实现，用于调用 <code>@RequestMapping</code> 注解标注的 Controller 方法。它非常重要，内部集成了参数解析器和返回值处理器。</li><li><code>SimpleControllerHandlerAdapter</code>：用于执行实现了 Spring 早期 <code>Controller</code> 接口的 Handler。</li></ul></li></ul></li><li><strong><code>ViewResolver</code>：</strong><ul><li><strong>职责：</strong> 将逻辑视图名解析为具体的 View 对象。</li><li><strong>常见实现：</strong><ul><li><code>InternalResourceViewResolver</code>：最常用，将逻辑视图名加上前缀和后缀（如 <code>/WEB-INF/jsp/</code> + <code>userList</code> + <code>.jsp</code>）解析为内部资源视图（如 JSP）。</li><li><code>ThymeleafViewResolver</code>：解析 Thymeleaf 模板视图。</li><li><code>FreeMarkerViewResolver</code>：解析 FreeMarker 模板视图。</li><li><code>ContentNegotiatingViewResolver</code>：根据请求的 Accept Header（如 <code>application/json</code>, <code>text/html</code>）和配置的 ViewResolver 列表来选择最合适的 ViewResolver 进行解析。</li></ul></li></ul></li><li><strong><code>HandlerExceptionResolver</code>：</strong><ul><li><strong>职责：</strong> 处理请求处理过程中发生的异常，生成友好的错误响应。</li><li><strong>常见实现：</strong><ul><li><code>ExceptionHandlerExceptionResolver</code>：处理 Controller 中使用 <code>@ExceptionHandler</code> 标注的方法。</li><li><code>ResponseStatusExceptionResolver</code>：处理标注了 <code>@ResponseStatus</code> 注解的异常。</li><li><code>DefaultHandlerExceptionResolver</code>：处理一些 Spring 框架内部的异常。</li></ul></li></ul></li><li><strong><code>HandlerInterceptor</code>：</strong><ul><li><strong>职责：</strong> 拦截器，可以在请求处理流程的 Handler 执行前 (<code>preHandle</code>)、Handler 执行后 (<code>postHandle</code>)、请求完成后 (<code>afterCompletion</code>) 插入自定义逻辑。</li><li><strong>使用场景：</strong> 登录检查、权限验证、日志记录、性能监控等。</li></ul></li></ul><h3 id="配置-spring-mvc" tabindex="-1"><a class="header-anchor" href="#配置-spring-mvc"><span>配置 Spring MVC</span></a></h3><p>配置 Spring MVC 主要就是配置上述核心组件，并将其注册到 <code>DispatcherServlet</code> 所在的 WebApplicationContext 中。</p><ul><li><strong>传统方式 (<code>web.xml</code>)：</strong> 在 <code>web.xml</code> 中配置 <code>DispatcherServlet</code>，并指定其加载的 Spring 配置文件的位置（通常是 <code>[servlet-name]-servlet.xml</code>）。在该 XML 文件中配置 <code>HandlerMapping</code>, <code>HandlerAdapter</code>, <code>ViewResolver</code> 等 Bean。</li><li><strong>Java Config (<code>@EnableWebMvc</code>)：</strong> 使用 Java 配置类替代 XML。在一个 <code>@Configuration</code> 类上标注 <code>@EnableWebMvc</code>，并实现 <code>WebMvcConfigurer</code> 接口，通过重写接口方法来配置各种组件（如 <code>addViewResolvers</code>, <code>addInterceptors</code>, <code>addArgumentResolvers</code> 等）。<code>@EnableWebMvc</code> 注解会自动注册 Spring MVC 核心的 Bean，如 <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> 等，但需要你通过实现 <code>WebMvcConfigurer</code> 来进一步定制。</li><li><strong>Spring Boot 自动配置 (<code>WebMvcAutoConfiguration</code>)：</strong> <strong>这是现代 Spring Boot 应用最常用的方式。</strong> 引入 <code>spring-boot-starter-web</code> 依赖后，Spring Boot 会通过 <code>WebMvcAutoConfiguration</code> 自动配置好 Spring MVC 的大部分常用组件，包括 <code>DispatcherServlet</code> 的注册、默认的 <code>HandlerMapping</code> (如 <code>RequestMappingHandlerMapping</code>)、<code>HandlerAdapter</code> (如 <code>RequestMappingHandlerAdapter</code>)、<code>ViewResolver</code> (如 <code>InternalResourceViewResolver</code> 或根据模板引擎依赖配置相应的 ViewResolver)。 <ul><li><strong>与 <code>@EnableWebMvc</code> 的关系：</strong> 在 Spring Boot 应用中，如果使用了 <code>@EnableWebMvc</code>，会<strong>禁用</strong> <code>WebMvcAutoConfiguration</code> 的大部分自动配置，你需要完全手动通过实现 <code>WebMvcConfigurer</code> 来配置 MVC 组件。通常，如果你想利用 Spring Boot 的自动配置，并且只做少量定制，可以直接配置实现 <code>WebMvcConfigurer</code> 接口的 Bean，Spring Boot 的自动配置会与你的配置合并；只有当你需要完全控制 MVC 配置时，才使用 <code>@EnableWebMvc</code>。</li></ul></li></ul><h3 id="spring-mvc-与-spring-boot-的关系" tabindex="-1"><a class="header-anchor" href="#spring-mvc-与-spring-boot-的关系"><span>Spring MVC 与 Spring Boot 的关系</span></a></h3><p>Spring MVC 是 Spring Framework 的一个模块，而 Spring Boot 是构建在 Spring Framework 之上的，旨在简化 Spring 应用的开发和部署。</p><p>Spring Boot <strong>并没有取代</strong> Spring MVC，它只是通过<strong>自动配置</strong>的方式，极大地简化了 Spring MVC 的配置过程。当你使用 <code>spring-boot-starter-web</code> 时，Spring Boot 会自动帮你配置好 <code>DispatcherServlet</code>、<code>HandlerMapping</code>、<code>HandlerAdapter</code>、<code>ViewResolver</code> 等 Spring MVC 核心组件，使得你可以直接开始编写 Controller 方法，无需关心繁琐的基础配置。</p><h3 id="理解-spring-mvc-架构的价值" tabindex="-1"><a class="header-anchor" href="#理解-spring-mvc-架构的价值"><span>理解 Spring MVC 架构的价值</span></a></h3><p>深入理解 Spring MVC 的架构和请求处理流程，能让你：</p><ul><li><strong>高效排查问题：</strong> 例如，请求返回 404 错误，可能是 <code>HandlerMapping</code> 没有找到对应的 Handler；参数绑定不对，可能是 <code>HandlerMethodArgumentResolver</code> 没有正确解析；视图页面显示异常，可能是 <code>ViewResolver</code> 或 <code>View</code> 渲染出错；请求处理过程中出现异常，可以去查看 <code>HandlerExceptionResolver</code> 的配置。</li><li><strong>进行高级定制：</strong> 你知道如何在流程中的特定点插入自己的组件，例如自定义 <code>HandlerMethodArgumentResolver</code> 来处理特殊类型的参数，实现自定义 <code>HandlerExceptionResolver</code> 来统一异常处理格式，或者编写 <code>HandlerInterceptor</code> 来实现全局的请求日志记录或权限检查。</li><li><strong>优化性能：</strong> 理解流程有助于分析请求在哪里花费了大量时间，从而进行优化。</li><li><strong>应对面试：</strong> Spring MVC 是 Java Web 开发的基础，对其架构和流程的考察非常普遍。</li></ul><h3 id="spring-mvc-为何是面试热点" tabindex="-1"><a class="header-anchor" href="#spring-mvc-为何是面试热点"><span>Spring MVC 为何是面试热点</span></a></h3><p>Spring MVC 是 Java Web 开发领域最流行的框架之一，面试官考察它，旨在：</p><ul><li>确认你是否掌握了现代 Java Web 开发的核心技能。</li><li>考察你对 Web 框架工作原理的理解深度。</li><li>评估你排查和解决 Web 层问题的能力。</li><li>判断你对 MVC 模式的理解以及如何在框架中应用。</li></ul><p><strong>常见的面试问题类型：</strong></p><ul><li>“请描述一下 Spring MVC 的请求处理流程。” (这是最核心的问题，需要详细、有条理地讲解)</li><li>“<code>DispatcherServlet</code> 在 Spring MVC 中起什么作用？”</li><li>“<code>HandlerMapping</code>, <code>HandlerAdapter</code>, <code>ViewResolver</code> 的职责分别是什么？它们在请求流程中处于哪个位置？”</li><li>“<code>@RequestMapping</code> 注解是如何被 Spring MVC 处理的？” (关联到 <code>RequestMappingHandlerMapping</code>)</li><li>“参数绑定 (<code>@RequestParam</code>, <code>@PathVariable</code>, <code>@RequestBody</code>) 是如何实现的？由哪个组件负责？” (关联到 <code>HandlerMethodArgumentAdapter</code> 内部的 <code>HandlerMethodArgumentResolver</code>)</li><li>“视图解析 (<code>ViewResolver</code>) 的过程是怎样的？”</li><li>“如何处理 <code>@ResponseBody</code> 注解？它与视图解析有什么区别？” (回答跳过视图解析，直接通过 <code>HttpMessageConverter</code> 写入响应体)</li><li>“Spring MVC 的异常处理机制是怎样的？” (回答 <code>HandlerExceptionResolver</code>，以及 <code>@ExceptionHandler</code>)</li><li>“如何编写一个 Spring MVC 拦截器？” (<code>HandlerInterceptor</code> 的方法及其执行时机)</li><li>“Spring Boot 是如何自动配置 Spring MVC 的？ <code>@EnableWebMvc</code> 在 Spring Boot 中有什么影响？”</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Spring MVC 通过引入前端控制器 <code>DispatcherServlet</code>，并协调 <code>HandlerMapping</code>、<code>HandlerAdapter</code>、<code>ViewResolver</code> 等核心组件，实现了清晰、灵活、可扩展的 MVC 架构。一个 Web 请求在 <code>DispatcherServlet</code> 的调度下，依次经过映射、处理、视图解析（或直接写响应），最终生成响应返回给用户。</p>',41)]))}const p=o(l,[["render",c],["__file","springmvc-framework.html.vue"]]),s=JSON.parse('{"path":"/springmvc/springmvc-framework.html","title":"","lang":"zh-CN","frontmatter":{"description":"在现代 Web 应用开发领域，MVC (Model-View-Controller) 模式因其良好的分层和职责分离而被广泛采用。而 Spring MVC 作为 Spring Framework 的一个重要模块，更是 Java Web 开发中实现 MVC 模式的翘楚。 理解 Spring MVC 的架构设计，不仅仅是了解各个组件的名称，更重要的是理解一个...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/springmvc/springmvc-framework.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"在现代 Web 应用开发领域，MVC (Model-View-Controller) 模式因其良好的分层和职责分离而被广泛采用。而 Spring MVC 作为 Spring Framework 的一个重要模块，更是 Java Web 开发中实现 MVC 模式的翘楚。 理解 Spring MVC 的架构设计，不仅仅是了解各个组件的名称，更重要的是理解一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"深度解析 Spring MVC 架构设计：请求的奇幻漂流","slug":"深度解析-spring-mvc-架构设计-请求的奇幻漂流","link":"#深度解析-spring-mvc-架构设计-请求的奇幻漂流","children":[{"level":3,"title":"引言：MVC 模式与 Spring 的 Web 实现","slug":"引言-mvc-模式与-spring-的-web-实现","link":"#引言-mvc-模式与-spring-的-web-实现","children":[]},{"level":3,"title":"Spring MVC 核心组件概览","slug":"spring-mvc-核心组件概览","link":"#spring-mvc-核心组件概览","children":[]},{"level":3,"title":"Spring MVC 请求处理核心流程图解 (文字描述)","slug":"spring-mvc-请求处理核心流程图解-文字描述","link":"#spring-mvc-请求处理核心流程图解-文字描述","children":[]},{"level":3,"title":"核心组件详解","slug":"核心组件详解","link":"#核心组件详解","children":[]},{"level":3,"title":"配置 Spring MVC","slug":"配置-spring-mvc","link":"#配置-spring-mvc","children":[]},{"level":3,"title":"Spring MVC 与 Spring Boot 的关系","slug":"spring-mvc-与-spring-boot-的关系","link":"#spring-mvc-与-spring-boot-的关系","children":[]},{"level":3,"title":"理解 Spring MVC 架构的价值","slug":"理解-spring-mvc-架构的价值","link":"#理解-spring-mvc-架构的价值","children":[]},{"level":3,"title":"Spring MVC 为何是面试热点","slug":"spring-mvc-为何是面试热点","link":"#spring-mvc-为何是面试热点","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1745924024000,"updatedTime":1746115551000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":2}]},"readingTime":{"minutes":12.78,"words":3835},"filePathRelative":"springmvc/springmvc-framework.md","localizedDate":"2025年4月29日","autoDesc":true}');export{p as comp,s as data};
