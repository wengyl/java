import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as r}from"./app-CzKZ5RuK.js";const s={};function o(i,e){return r(),a("div",null,e[0]||(e[0]=[n(`<p>很多开发同学对SQL优化如数家珍，却对MySQL架构一知半解。岂不是只见树叶，不见森林，终将陷入细节中不能自拔。 今天就一块学习MySQL分层架构，深入了解MySQL底层实现原理，以及每层的作用，我们常见的SQL优化到底在哪一层做了优化？</p><h2 id="_1-mysql整体架构" tabindex="-1"><a class="header-anchor" href="#_1-mysql整体架构"><span>1. MySQL整体架构</span></a></h2><p>由图中可以看到MySQL架构主要分为<strong>Server层</strong>和<strong>存储引擎层</strong>。 <strong>Server层</strong>又分为连接器、缓存、分析器、优化器、执行器。所有跨存储引擎的功能都在这层实现，比如：函数、存储过程、触发器、视图等。 <strong>存储引擎</strong>是可插拔式的，常见的存储引擎有MyISAM、InnoDB、Memory等，MySQL5.5之前默认的是MyISAM，之后默认的是InnoDB。 <img src="https://javabaguwen.com/img/MySQL架构.png" alt="image-1.png" loading="lazy"></p><h2 id="_2-连接器" tabindex="-1"><a class="header-anchor" href="#_2-连接器"><span>2. 连接器</span></a></h2><p>连接器主要用来管理客户端的连接和用户身份认证。 客户端与Server端的连接采用的是TCP协议，经过TCP握手，建立连接之后，连接器开始进行身份验证。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&gt; mysql -hlocalhost -P3306 -uroot -p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/MySQL连接器.png" alt="image-2.png" loading="lazy"> 如果认证失败，就会出现错误 <strong>ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</strong>。 可以通过 <strong>show processlist</strong> 命令查看系统所有连接的信息：</p><p>其中Commond列表示连接状态，Daemon表示后台进程，Query表示查询，Sleep表示空闲连接。</p><h2 id="_3-查询缓存" tabindex="-1"><a class="header-anchor" href="#_3-查询缓存"><span>3. 查询缓存</span></a></h2><p>客户端请求不会直接去存储引擎查询数据，而是先在缓存中查询结果是否存在。如果结果已存在，直接返回，否则再执行一遍查询流程，查询结束后把结果再缓存起来。 如果数据表发生更改，将清空失效缓存，例如 insert、update、delete、alter操作等。 对于频繁变更的数据表来说，缓存命中率很低。使用缓存反而降低了读写性能，所以在MySQL8.0以后就移除了缓存模块。 可以通过下面命令查看是否开启了缓存： <img src="https://javabaguwen.com/img/MySQL缓存.png" alt="image-3.png" loading="lazy"></p><h2 id="_4-分析器" tabindex="-1"><a class="header-anchor" href="#_4-分析器"><span>4. 分析器</span></a></h2><p>分析器主要对SQL语句进行<strong>词法分析</strong>和<strong>语法分析</strong>。 首先进行词法分析，分析出MySQL的关键字、以及每个词语代表的含义。然后进行语法分析，检测SQL语句是否符合MySQL语法要求。 MySQL通过识别字符串中列名、表名、where、select/update/insert 等MySQL关键字，在根据语法规则判断sql是否满足语法，最终会生成一个抽象语法树(AST)。 比如：SQL语句中少写个where关键字，就会提示错误。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql&gt; select * from user id=1;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;=1&#39; at line 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-优化器" tabindex="-1"><a class="header-anchor" href="#_5-优化器"><span>5. 优化器</span></a></h2><p>在真正执行SQL语句之前，还需要经过优化器处理。 我们熟知的执行计划（Explain）就是优化器生成的。 优化器主要有两个作用：<strong>逻辑优化</strong>和<strong>物理优化</strong>。 逻辑优化主要进行等价谓词重写、条件化简、子查询消除、连接消除、语义优化、分组合并、选择下推、索引优化查询、表查询替换视图查询、Union替换or操作等。 物理优化主要作用是通过贪婪算法，根据代价估算模型，估算出每种执行方式的代价。并使用索引优化表连接，最终生成查询执行计划。 附上MySQL优化器架构图，可以清晰的看到优化过程： <img src="https://javabaguwen.com/img/MySQL优化器.png" alt="image-4.png" loading="lazy"> 如果想知道优化器估算结果信息，可以通过Explain查看，关注一灯，下篇文章会详细讲解Explain具体用法。</p><h2 id="_6-执行器" tabindex="-1"><a class="header-anchor" href="#_6-执行器"><span>6. 执行器</span></a></h2><p>在优化器优化完SQL，并生成了执行计划后，就会把执行计划传递给执行器。 执行器调用存储引擎接口，真正的执行SQL查询。获取到存储引擎返回的查询结果，并把结果返回给客户端，至此SQL语句执行结束。</p><h2 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结"><span>7. 总结</span></a></h2><p>本篇文章主要带大家了解了MySQL分层架构，以及每层的架构的作用。可以看出MySQL每层架构分工明确、逻辑清晰，深刻地体现了架构设计中“高内聚，低耦合”的设计思想。我们平时在做架构设计的时候，也要多学习一下这种分层架构的设计思想。</p>`,19)]))}const c=t(s,[["render",o],["__file","framework.html.vue"]]),m=JSON.parse('{"path":"/mysql/framework.html","title":"","lang":"zh-CN","frontmatter":{"description":"很多开发同学对SQL优化如数家珍，却对MySQL架构一知半解。岂不是只见树叶，不见森林，终将陷入细节中不能自拔。 今天就一块学习MySQL分层架构，深入了解MySQL底层实现原理，以及每层的作用，我们常见的SQL优化到底在哪一层做了优化？ 1. MySQL整体架构 由图中可以看到MySQL架构主要分为Server层和存储引擎层。 Server层又分为连...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/mysql/framework.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"很多开发同学对SQL优化如数家珍，却对MySQL架构一知半解。岂不是只见树叶，不见森林，终将陷入细节中不能自拔。 今天就一块学习MySQL分层架构，深入了解MySQL底层实现原理，以及每层的作用，我们常见的SQL优化到底在哪一层做了优化？ 1. MySQL整体架构 由图中可以看到MySQL架构主要分为Server层和存储引擎层。 Server层又分为连..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javabaguwen.com/img/MySQL%E6%9E%B6%E6%9E%84.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T06:25:28.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-04-29T06:25:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://javabaguwen.com/img/MySQL%E6%9E%B6%E6%9E%84.png\\",\\"https://javabaguwen.com/img/MySQL%E8%BF%9E%E6%8E%A5%E5%99%A8.png\\",\\"https://javabaguwen.com/img/MySQL%E7%BC%93%E5%AD%98.png\\",\\"https://javabaguwen.com/img/MySQL%E4%BC%98%E5%8C%96%E5%99%A8.png\\"],\\"dateModified\\":\\"2025-04-29T06:25:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. MySQL整体架构","slug":"_1-mysql整体架构","link":"#_1-mysql整体架构","children":[]},{"level":2,"title":"2. 连接器","slug":"_2-连接器","link":"#_2-连接器","children":[]},{"level":2,"title":"3. 查询缓存","slug":"_3-查询缓存","link":"#_3-查询缓存","children":[]},{"level":2,"title":"4. 分析器","slug":"_4-分析器","link":"#_4-分析器","children":[]},{"level":2,"title":"5. 优化器","slug":"_5-优化器","link":"#_5-优化器","children":[]},{"level":2,"title":"6. 执行器","slug":"_6-执行器","link":"#_6-执行器","children":[]},{"level":2,"title":"7. 总结","slug":"_7-总结","link":"#_7-总结","children":[]}],"git":{"createdTime":1745907928000,"updatedTime":1745907928000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":3.86,"words":1157},"filePathRelative":"mysql/framework.md","localizedDate":"2025年4月29日","autoDesc":true}');export{c as comp,m as data};
