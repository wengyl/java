import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a,e as l,b as s,d as t,r as i,o as c}from"./app-CzKZ5RuK.js";const r={},u={href:"https://blog.csdn.net/wertuiop_/article/details/145603019",target:"_blank",rel:"noopener noreferrer"},d={href:"https://zhuanlan.zhihu.com/p/257417149",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.aliyun.com/article/1625656",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/feifuzeng/p/14230756.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.tulingxueyuan.cn/tlzx/jsp/2916.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.aliyun.com/article/1047146",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/WIK_7264/article/details/146586209",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.cnblogs.com/dev1ce/p/10682425.html",target:"_blank",rel:"noopener noreferrer"};function f(x,n){const e=i("ExternalLinkIcon");return c(),o("div",null,[n[32]||(n[32]=a("h2",{id:"一、异常体系的「基因密码」",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#一、异常体系的「基因密码」"},[a("span",null,"一、异常体系的「基因密码」")])],-1)),n[33]||(n[33]=a("h3",{id:"_1-1-throwable家族的双螺旋结构",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-1-throwable家族的双螺旋结构"},[a("span",null,"1.1 Throwable家族的双螺旋结构")])],-1)),a("p",null,[n[2]||(n[2]=s("在JVM眼中，所有异常都是Throwable的子孙。")),n[3]||(n[3]=a("strong",null,'Error是系统级的"绝症"',-1)),n[4]||(n[4]=s("，比如")),n[5]||(n[5]=a("code",null,"OutOfMemoryError",-1)),n[6]||(n[6]=s("发生时，JVM的堆内存就像被撑爆的气球，连对象头都塞不下新对象了。这类异常的特点是：")),n[7]||(n[7]=a("strong",null,"无法通过代码挽救，只能调整JVM参数或修复程序逻辑",-1)),a("a",u,[n[0]||(n[0]=s("[1]")),t(e)]),a("a",d,[n[1]||(n[1]=s("[8]")),t(e)]),n[8]||(n[8]=s("。"))]),n[34]||(n[34]=l(`<p><strong>Exception则是程序员能处理的&quot;慢性病&quot;</strong>。比如<code>NullPointerException</code>发生时，引用指针在栈帧中指向了无效的堆内存地址。这类异常的内存结构特点决定了它们可被捕获处理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 典型空指针场景</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 栈中的user引用指向null，触发NPE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-checked与unchecked的哲学之争" tabindex="-1"><a class="header-anchor" href="#_1-2-checked与unchecked的哲学之争"><span>1.2 Checked与Unchecked的哲学之争</span></a></h3><p>Checked异常（如<code>IOException</code>）像编译器给你的TODO清单——必须显式处理才能通过编译。这种设计强制开发者考虑异常场景，但过度使用会导致代码臃肿：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 经典检查型异常处理</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;config.ini&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 必须捕获或声明throws</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;配置文件读取失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),a("p",null,[n[11]||(n[11]=s("Unchecked异常（如")),n[12]||(n[12]=a("code",null,"IllegalArgumentException",-1)),n[13]||(n[13]=s("）则是信任开发者的产物。编译器不做强制检查，但运行时一旦触发就会导致程序崩溃，适合表示编程错误")),a("a",k,[n[9]||(n[9]=s("[4]")),t(e)]),a("a",v,[n[10]||(n[10]=s("[12]")),t(e)]),n[14]||(n[14]=s("。"))]),n[35]||(n[35]=l(`<h3 id="_1-3-自定义异常的黄金法则" tabindex="-1"><a class="header-anchor" href="#_1-3-自定义异常的黄金法则"><span>1.3 自定义异常的黄金法则</span></a></h3><ul><li><strong>业务异常继承Exception</strong>：比如支付超时异常需要调用方处理</li><li><strong>框架异常继承RuntimeException</strong>：如Spring的<code>DataAccessException</code></li><li>链式异常的正确姿势：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 业务代码</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">&quot;数据库操作失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 保留原始堆栈</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、异常处理的「底层密码」" tabindex="-1"><a class="header-anchor" href="#二、异常处理的「底层密码」"><span>二、异常处理的「底层密码」</span></a></h2><h3 id="_2-1-try-catch-finally的字节码真相" tabindex="-1"><a class="header-anchor" href="#_2-1-try-catch-finally的字节码真相"><span>2.1 try-catch-finally的字节码真相</span></a></h3><p>JVM通过异常表（Exception Table）实现异常处理。每个<code>try</code>块对应一个异常表条目，包含监控范围、异常类型和处理地址。<code>finally</code>的<code>jsr/ret</code>指令在字节码层面实现了代码复用：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>异常表：
起始指令  结束指令  处理程序地址  异常类型
0        4        8            java/io/IOException

字节码：
0: getstatic     #2  // 开始try块
3: pop
4: goto          20  // 正常执行跳转
7: astore_1         // 异常处理入口
8: jsr           15  // 跳转到finally块
11: aload_1
12: athrow          // 抛出异常
15: astore_2        // finally块开始
...
20: return          // 正常返回
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-资源关闭的「血泪史」" tabindex="-1"><a class="header-anchor" href="#_2-2-资源关闭的「血泪史」"><span>2.2 资源关闭的「血泪史」</span></a></h3><p>传统try-finally的陷阱：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 业务代码</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// close可能再次抛异常！</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Try-with-resources的魔法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 自动调用close()</span>
    <span class="token comment">// 业务代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),a("p",null,[n[16]||(n[16]=s("背后的")),n[17]||(n[17]=a("code",null,"AutoCloseable",-1)),n[18]||(n[18]=s("接口通过编译器生成合成方法实现自动关闭，字节码层面比手动关闭更高效")),a("a",m,[n[15]||(n[15]=s("[43]")),t(e)]),n[19]||(n[19]=s("。"))]),n[36]||(n[36]=l(`<h3 id="_2-3-异常吞没的「替身攻击」" tabindex="-1"><a class="header-anchor" href="#_2-3-异常吞没的「替身攻击」"><span>2.3 异常吞没的「替身攻击」</span></a></h3><p>多资源关闭时使用<code>addSuppressed()</code>保留原始异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">OutputStream</span> os1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">OutputStream</span> os2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;2.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Throwable</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceCloseException</span><span class="token punctuation">(</span><span class="token string">&quot;资源关闭失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 保留原始异常</span>
    <span class="token keyword">throw</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、异常处理的「性能暗礁」" tabindex="-1"><a class="header-anchor" href="#三、异常处理的「性能暗礁」"><span>三、异常处理的「性能暗礁」</span></a></h2><h3 id="_3-1-异常构造的代价" tabindex="-1"><a class="header-anchor" href="#_3-1-异常构造的代价"><span>3.1 异常构造的代价</span></a></h3><p>JMH测试显示，创建异常对象的开销是普通对象的100倍以上！因为需要收集完整的堆栈跟踪：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token class-name">Exception</span> <span class="token function">createException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token class-name">Exception</span> <span class="token function">createPrebuiltException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">PREBUILT_EXCEPTION</span><span class="token punctuation">;</span>  <span class="token comment">// 预创建异常实例</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优化技巧</strong>：在高频代码路径中避免抛出异常，或复用异常实例（需确保线程安全）。</p><h3 id="_3-2-全局异常处理的「指挥链」" tabindex="-1"><a class="header-anchor" href="#_3-2-全局异常处理的「指挥链」"><span>3.2 全局异常处理的「指挥链」</span></a></h3><p>Spring的<code>@ControllerAdvice</code>基于责任链模式实现统一异常处理：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>客户端请求 -&gt; DispatcherServlet -&gt; 控制器方法 -&gt; 异常发生
                    ↑
                    └── @ControllerAdvice捕获异常并处理
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Servlet容器的异常传递路径：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>HTTP请求 -&gt; Filter链 -&gt; Servlet.service() -&gt; 业务代码
                                    ↑
                                    └── web.xml配置的&lt;error-page&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、框架中的「异常江湖」" tabindex="-1"><a class="header-anchor" href="#四、框架中的「异常江湖」"><span>四、框架中的「异常江湖」</span></a></h2><h3 id="_4-1-线程池的「沉默杀手」" tabindex="-1"><a class="header-anchor" href="#_4-1-线程池的「沉默杀手」"><span>4.1 线程池的「沉默杀手」</span></a></h3><ul><li><code>execute()</code>：未捕获的异常会触发线程的<code>UncaughtExceptionHandler</code></li><li><code>submit()</code>：异常被封装在Future中，只有调用<code>get()</code>时才会抛出</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 异常被吞没</span>
pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发UncaughtExceptionHandler</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-分布式系统的「烽火台」" tabindex="-1"><a class="header-anchor" href="#_4-2-分布式系统的「烽火台」"><span>4.2 分布式系统的「烽火台」</span></a></h3><p>Dubbo的异常传播机制：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>消费者 -&gt; 代理对象 -&gt; 网络传输 -&gt; 提供者
   ↑                        │
   └── RpcException ←───────┘ (序列化异常、超时异常等)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20)),a("p",null,[n[21]||(n[21]=s("RPC框架通过异常码映射实现跨语言异常传递，例如Dubbo的")),n[22]||(n[22]=a("code",null,"RpcException",-1)),n[23]||(n[23]=s("封装了错误码和原始异常信息")),a("a",b,[n[20]||(n[20]=s("[29]")),t(e)]),n[24]||(n[24]=s("。"))]),n[37]||(n[37]=l('<h2 id="五、面试官的「灵魂拷问」" tabindex="-1"><a class="header-anchor" href="#五、面试官的「灵魂拷问」"><span>五、面试官的「灵魂拷问」</span></a></h2><h3 id="_5-1-final、finally、finalize的「三胞胎之谜」" tabindex="-1"><a class="header-anchor" href="#_5-1-final、finally、finalize的「三胞胎之谜」"><span>5.1 final、finally、finalize的「三胞胎之谜」</span></a></h3><ul><li><strong>final</strong>：修饰类不可继承，方法不可重写，变量不可修改</li><li><strong>finally</strong>：异常处理中的清理代码块</li><li><strong>finalize</strong>：对象被GC前的最后机会（可能导致内存泄漏）</li></ul><h3 id="_5-2-error的「死亡证明」" tabindex="-1"><a class="header-anchor" href="#_5-2-error的「死亡证明」"><span>5.2 Error的「死亡证明」</span></a></h3>',4)),a("p",null,[n[27]||(n[27]=a("code",null,"StackOverflowError",-1)),n[28]||(n[28]=s("不可恢复的本质原因：JVM的线程栈空间耗尽，无法创建新的栈帧。可通过")),n[29]||(n[29]=a("code",null,"-XX:ThreadStackSize=256k",-1)),n[30]||(n[30]=s("调整栈大小，但治标不治本")),a("a",h,[n[25]||(n[25]=s("[5]")),t(e)]),a("a",g,[n[26]||(n[26]=s("[14]")),t(e)]),n[31]||(n[31]=s("。"))]),n[38]||(n[38]=l(`<hr><h2 id="特别放送" tabindex="-1"><a class="header-anchor" href="#特别放送"><span>特别放送</span></a></h2><h3 id="jdk-17-新特性" tabindex="-1"><a class="header-anchor" href="#jdk-17-新特性"><span>JDK 17+新特性</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Pattern Matching简化异常处理</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可能抛出多种异常</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 自动转型</span>
        <span class="token function">handleIOE</span><span class="token punctuation">(</span>ioe<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">handleSQLE</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SQLException</span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sealed Classes约束异常继承：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">BusinessException</span> 
    <span class="token keyword">permits</span> <span class="token class-name">PaymentException</span><span class="token punctuation">,</span> <span class="token class-name">OrderException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 限制异常子类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="反模式警示录" tabindex="-1"><a class="header-anchor" href="#反模式警示录"><span>反模式警示录</span></a></h3><p>Lombok的<code>@SneakyThrows</code>绕过检查型异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;config.ini&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 编译期不报错</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="延伸阅读" tabindex="-1"><a class="header-anchor" href="#延伸阅读"><span>延伸阅读</span></a></h3><ul><li>《Effective Java》第69条：优先使用标准异常</li><li>JEP 390：废弃基于finalization的API</li><li>Java Flight Recorder分析异常热点</li></ul><hr><p><strong>异常处理的艺术，在于平衡安全性与性能，理解规范更需看透本质。掌握这些原理和技巧，定能在面试和实战中游刃有余。</strong></p>`,13))])}const E=p(r,[["render",f],["__file","exception.html.vue"]]),j=JSON.parse('{"path":"/basic/exception.html","title":"","lang":"zh-CN","frontmatter":{"description":"一、异常体系的「基因密码」 1.1 Throwable家族的双螺旋结构 在JVM眼中，所有异常都是Throwable的子孙。Error是系统级的\\"绝症\\"，比如OutOfMemoryError发生时，JVM的堆内存就像被撑爆的气球，连对象头都塞不下新对象了。这类异常的特点是：无法通过代码挽救，只能调整JVM参数或修复程序逻辑[1][8]。 Excepti...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/basic/exception.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"一、异常体系的「基因密码」 1.1 Throwable家族的双螺旋结构 在JVM眼中，所有异常都是Throwable的子孙。Error是系统级的\\"绝症\\"，比如OutOfMemoryError发生时，JVM的堆内存就像被撑爆的气球，连对象头都塞不下新对象了。这类异常的特点是：无法通过代码挽救，只能调整JVM参数或修复程序逻辑[1][8]。 Excepti..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、异常体系的「基因密码」","slug":"一、异常体系的「基因密码」","link":"#一、异常体系的「基因密码」","children":[{"level":3,"title":"1.1 Throwable家族的双螺旋结构","slug":"_1-1-throwable家族的双螺旋结构","link":"#_1-1-throwable家族的双螺旋结构","children":[]},{"level":3,"title":"1.2 Checked与Unchecked的哲学之争","slug":"_1-2-checked与unchecked的哲学之争","link":"#_1-2-checked与unchecked的哲学之争","children":[]},{"level":3,"title":"1.3 自定义异常的黄金法则","slug":"_1-3-自定义异常的黄金法则","link":"#_1-3-自定义异常的黄金法则","children":[]}]},{"level":2,"title":"二、异常处理的「底层密码」","slug":"二、异常处理的「底层密码」","link":"#二、异常处理的「底层密码」","children":[{"level":3,"title":"2.1 try-catch-finally的字节码真相","slug":"_2-1-try-catch-finally的字节码真相","link":"#_2-1-try-catch-finally的字节码真相","children":[]},{"level":3,"title":"2.2 资源关闭的「血泪史」","slug":"_2-2-资源关闭的「血泪史」","link":"#_2-2-资源关闭的「血泪史」","children":[]},{"level":3,"title":"2.3 异常吞没的「替身攻击」","slug":"_2-3-异常吞没的「替身攻击」","link":"#_2-3-异常吞没的「替身攻击」","children":[]}]},{"level":2,"title":"三、异常处理的「性能暗礁」","slug":"三、异常处理的「性能暗礁」","link":"#三、异常处理的「性能暗礁」","children":[{"level":3,"title":"3.1 异常构造的代价","slug":"_3-1-异常构造的代价","link":"#_3-1-异常构造的代价","children":[]},{"level":3,"title":"3.2 全局异常处理的「指挥链」","slug":"_3-2-全局异常处理的「指挥链」","link":"#_3-2-全局异常处理的「指挥链」","children":[]}]},{"level":2,"title":"四、框架中的「异常江湖」","slug":"四、框架中的「异常江湖」","link":"#四、框架中的「异常江湖」","children":[{"level":3,"title":"4.1 线程池的「沉默杀手」","slug":"_4-1-线程池的「沉默杀手」","link":"#_4-1-线程池的「沉默杀手」","children":[]},{"level":3,"title":"4.2 分布式系统的「烽火台」","slug":"_4-2-分布式系统的「烽火台」","link":"#_4-2-分布式系统的「烽火台」","children":[]}]},{"level":2,"title":"五、面试官的「灵魂拷问」","slug":"五、面试官的「灵魂拷问」","link":"#五、面试官的「灵魂拷问」","children":[{"level":3,"title":"5.1 final、finally、finalize的「三胞胎之谜」","slug":"_5-1-final、finally、finalize的「三胞胎之谜」","link":"#_5-1-final、finally、finalize的「三胞胎之谜」","children":[]},{"level":3,"title":"5.2 Error的「死亡证明」","slug":"_5-2-error的「死亡证明」","link":"#_5-2-error的「死亡证明」","children":[]}]},{"level":2,"title":"特别放送","slug":"特别放送","link":"#特别放送","children":[{"level":3,"title":"JDK 17+新特性","slug":"jdk-17-新特性","link":"#jdk-17-新特性","children":[]},{"level":3,"title":"反模式警示录","slug":"反模式警示录","link":"#反模式警示录","children":[]},{"level":3,"title":"延伸阅读","slug":"延伸阅读","link":"#延伸阅读","children":[]}]}],"git":{"createdTime":1745924024000,"updatedTime":1746115551000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":2}]},"readingTime":{"minutes":4.76,"words":1429},"filePathRelative":"basic/exception.md","localizedDate":"2025年4月29日","autoDesc":true}');export{E as comp,j as data};
