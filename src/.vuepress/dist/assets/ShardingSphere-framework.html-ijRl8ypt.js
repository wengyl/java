import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as t}from"./app-CzKZ5RuK.js";const l={};function i(p,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p>在构建大型分布式系统时，数据库常常成为系统的瓶颈。传统的垂直扩展（升级更好的硬件）有物理上限，且成本高昂。水平扩展（将数据分散到多个数据库实例）是解决扩展性问题的有效途径，但这带来了新的开发和运维挑战：如何将数据分散到不同的库和表（分库分表，Sharding）？如何在分散的数据源上执行跨库跨表查询？如何保证分布式事务的一致性？如何处理读写分离和数据库高可用？</p><p>Apache ShardingSphere 正是为了应对这些分布式数据库挑战而诞生的<strong>开源生态圈</strong>。它提供了数据分片、分布式事务、数据库高可用、数据治理等一系列解决方案，旨在<strong>透明地</strong>为应用程序提供分布式数据库能力，让开发者像使用单个数据库一样使用分布式数据库。</p><p>理解 ShardingSphere 的架构设计、核心原理及其不同接入端的使用方式，是掌握分布式数据库核心技术、解决数据库扩展性问题以及应对面试官对数据库中间件和分布式系统原理考察的关键。</p><p>今天，就让我们一起深入 ShardingSphere 的世界，剖析其透明化分布式数据库能力的艺术。</p><hr><h2 id="深度解析-apache-shardingsphere-架构设计-透明分布式数据库的构建之道" tabindex="-1"><a class="header-anchor" href="#深度解析-apache-shardingsphere-架构设计-透明分布式数据库的构建之道"><span>深度解析 Apache ShardingSphere 架构设计：透明分布式数据库的构建之道</span></a></h2><h3 id="引言-数据库扩展的瓶颈与-shardingsphere-的使命" tabindex="-1"><a class="header-anchor" href="#引言-数据库扩展的瓶颈与-shardingsphere-的使命"><span>引言：数据库扩展的瓶颈与 ShardingSphere 的使命</span></a></h3><p>随着业务数据的快速增长和访问量的爆炸式提升，单一关系型数据库面临着存储容量和处理能力的双重瓶颈。</p><ul><li><strong>垂直扩展：</strong> 升级硬件（CPU、内存、SSD）可以在一定程度上提升性能，但存在物理天花板，且成本随着性能提升呈指数级增长。</li><li><strong>水平扩展：</strong> 将数据分散到多个数据库节点，理论上可以无限扩展。但实现水平扩展需要解决： <ul><li><strong>数据分片 (Sharding)：</strong> 如何根据规则将数据分布到不同的数据库实例或表？</li><li><strong>路由：</strong> SQL 语句如何被正确地转发到存储了所需数据的物理库和表？</li><li><strong>跨库跨表查询：</strong> 如何执行涉及多个分片节点的复杂查询（如 JOIN、GROUP BY、ORDER BY、聚合函数）？</li><li><strong>分布式事务：</strong> 如何保证跨越多个分片节点的写操作的 ACID 特性？</li><li><strong>数据一致性：</strong> 如何保证不同节点间的数据同步和一致？</li><li><strong>读写分离与高可用 (HA)：</strong> 如何利用主从复制实现读流量分担和故障转移？</li><li><strong>运维复杂性：</strong> 分布式环境下的数据迁移、扩容、备份、恢复等。</li></ul></li></ul><p>ShardingSphere 的使命正是通过中间件的方式，<strong>透明地</strong>解决应用程序在使用分布式数据库时面临的上述复杂性问题。它提供了统一的访问入口和一套标准化的分布式数据库能力。</p><p>理解 ShardingSphere 的架构设计，能让你：</p><ul><li>掌握数据分片、读写分离、分布式事务等分布式数据库核心技术的实现原理。</li><li>理解 ShardingSphere 如何通过 SQL 解析、路由、执行、结果归并来实现透明访问。</li><li>对比 ShardingSphere 的不同接入端（JDBC vs Proxy）的优缺点和适用场景。</li><li>高效使用 ShardingSphere 解决数据库扩展性问题。</li><li>排查数据库中间件层面的问题。</li><li>自信应对面试中关于数据库中间件和分布式数据库的提问。</li></ul><p>接下来，我们将深入 ShardingSphere 的整体架构、核心处理流程和关键功能。</p><h3 id="shardingsphere-是什么-定位与目标" tabindex="-1"><a class="header-anchor" href="#shardingsphere-是什么-定位与目标"><span>ShardingSphere 是什么？定位与目标</span></a></h3><p>Apache ShardingSphere 是一个<strong>开源的分布式数据库中间件解决方案生态圈</strong>。</p><ul><li><strong>定位：</strong> 它不改变底层数据库，而是在应用程序和数据库之间构建一个中间层，通过对应用程序的 SQL 进行拦截和解析，透明地增加分布式数据库的能力。</li><li><strong>目标：</strong> 提供一套标准化的数据分片、分布式事务、数据库高可用等能力，让开发者像使用一个逻辑数据库一样使用物理上分散的数据源。其核心目标是实现<strong>数据库的透明化扩展和治理</strong>。</li></ul><p>ShardingSphere 包含多个子项目，其中最核心的是：</p><ul><li><strong>ShardingSphere-JDBC：</strong> 作为 Java JDBC 驱动或增强数据源，在 Java 进程内部提供服务。</li><li><strong>ShardingSphere-Proxy：</strong> 一个独立的数据库代理服务，应用程序通过标准数据库协议（如 MySQL、PostgreSQL）连接它。</li></ul><h3 id="为什么选择-shardingsphere-优势分析" tabindex="-1"><a class="header-anchor" href="#为什么选择-shardingsphere-优势分析"><span>为什么选择 ShardingSphere？优势分析</span></a></h3><ul><li><strong>透明性：</strong> 对应用程序完全透明，无需修改大部分现有代码即可接入分布式数据库能力。</li><li><strong>灵活性：</strong> 支持多种数据分片算法和策略，可根据业务需求定制。支持多种分布式事务方案和读写分离模式。</li><li><strong>功能丰富：</strong> 除了数据分片和读写分离，还提供分布式事务、数据加密、数据脱敏、影子库等分布式数据治理功能。</li><li><strong>多接入端：</strong> 提供 JDBC 和 Proxy 两种接入方式，适应不同场景需求。</li><li><strong>生态融合：</strong> 可以与 Spring、Spring Boot、Dubbo、Kubernetes 等生态良好集成。</li></ul><h3 id="shardingsphere-整体架构与核心模块-重点" tabindex="-1"><a class="header-anchor" href="#shardingsphere-整体架构与核心模块-重点"><span>ShardingSphere 整体架构与核心模块 (重点)</span></a></h3><p>ShardingSphere 的架构可以从两个层面理解：<strong>多接入端</strong>和<strong>核心处理引擎</strong>。</p><ol><li><p><strong>多接入端 (Multiple Access Modes)：</strong> ShardingSphere 提供多种方式供应用程序接入。</p><ul><li><p><strong>ShardingSphere-JDBC (客户端模式)：</strong></p><ul><li><strong>原理：</strong> 作为一个轻量级的 Java 类库，它增强了 JDBC 的功能，提供额外的 <code>ShardingSphereDataSource</code> 等实现。开发者在应用中配置 ShardingSphere 的数据源，应用通过标准的 JDBC API 访问这个数据源。</li><li><strong>工作方式：</strong> ShardingSphere-JDBC 拦截 JDBC 调用，对 SQL 进行解析和改写，然后转发给真实的 JDBC 驱动，执行物理数据库操作。整个过程在应用进程内部完成。</li><li><strong>优点：</strong> 轻量级，无需额外部署，性能损耗小，与应用耦合度高。</li><li><strong>缺点：</strong> 只支持 Java 应用；需要在每个应用中独立配置和管理；运维（如扩容、规则变更）可能需要重启应用。</li><li><strong>适用场景：</strong> 纯 Java 应用，对性能要求较高，不希望引入额外部署单元。</li></ul></li><li><p><strong>ShardingSphere-Proxy (服务端模式)：</strong></p><ul><li><strong>原理：</strong> ShardingSphere-Proxy 是一个独立的无状态服务进程，它充当数据库的代理。应用程序通过标准数据库协议（如 MySQL、PostgreSQL）连接到 Proxy 的监听端口。</li><li><strong>工作方式：</strong> Proxy 接收来自应用程序的数据库协议请求，对协议中的 SQL 进行解析和改写，然后通过 JDBC 驱动连接真实的物理数据库，执行操作，并将结果按照数据库协议返回给应用程序。</li><li><strong>优点：</strong> 对应用程序的语言、技术栈无限制；集中配置和管理；易于运维（如扩容、升级 Proxy 不影响应用）。</li><li><strong>缺点：</strong> 需要额外部署和维护 Proxy 进程；相比 JDBC 模式可能增加一层网络开销。</li><li><strong>适用场景：</strong> 多语言应用，希望集中管理分布式能力，简化应用端配置和运维。</li></ul></li><li><p><strong>ShardingSphere-Sidecar (规划/未来)：</strong> 基于 Service Mesh 的概念，将 ShardingSphere 作为 Sidecar 部署在应用的 Pod 中，通过拦截网络请求来实现分布式能力，提供更灵活的部署模式。这部分目前仍在规划或发展中。</p></li></ul></li><li><p><strong>核心处理引擎 (Kernel) - SQL 执行流程的关键：</strong></p><ul><li>无论是 JDBC 还是 Proxy 接入端，它们都共享一套核心的处理引擎，这是 ShardingSphere 实现透明访问和分布式能力的核心。</li><li><strong>SQL Parsing (SQL 解析)：</strong> ShardingSphere 接收到应用程序发送的 SQL 语句后，会使用内置的解析器将其解析成一个抽象语法树 (AST - Abstract Syntax Tree)。解析器会提取 SQL 的关键信息，如是查询还是更新、涉及哪些表、有哪些条件、是否有排序/分组/聚合函数等。</li><li><strong>Optimizer (SQL 优化器)：</strong> 对 AST 进行分析和优化，例如对查询语句的执行计划进行优化，选择更高效的路由和执行策略。</li><li><strong>Route Engine (路由引擎)：</strong> <strong>这是 ShardingSphere 实现数据分片的核心阶段！</strong> 路由引擎根据解析后的 SQL 信息和预设的<strong>分片规则</strong>，计算出 SQL 语句需要被路由到哪些<strong>物理数据库实例</strong>和<strong>物理表</strong>。 <ul><li><strong>分片规则：</strong> 定义了逻辑表与物理表之间的映射关系，以及如何根据分片键计算目标物理库表。</li><li><strong>路由类型：</strong> 可能产生单库单表路由、单库多表路由、多库单表路由、多库多表路由、广播路由、强制路由、未分片路由等多种路由结果。</li></ul></li><li><strong>Executor Engine (执行引擎)：</strong> 负责将路由引擎计算出的 SQL 执行计划（即，哪些 SQL 需要在哪个物理库的哪个物理表上执行）进行执行。执行引擎可以<strong>并行</strong>在多个物理数据源上执行 SQL，提高处理效率。</li><li><strong>Result Merging Engine (结果归并引擎)：</strong> <strong>这是处理跨库跨表查询的关键！</strong> 物理数据源执行完 SQL 后，会将结果返回给 ShardingSphere 的执行引擎。结果归并引擎负责收集来自多个物理数据源的结果集，并根据原始 SQL 的要求（如 ORDER BY, GROUP BY, 聚合函数等），将这些分散的结果进行<strong>归并</strong>（如排序、分组计算、聚合计算），最终生成一个单一的、符合原始 SQL 语义的<strong>逻辑结果集</strong>返回给应用程序。</li></ul></li><li><p><strong>其他功能模块集成：</strong></p><ul><li><strong>分布式事务：</strong> ShardingSphere 集成和支持多种分布式事务解决方案，如 <strong>XA 事务</strong> (强一致性，基于两阶段提交，性能开销大)、<strong>BASE 事务</strong> (最终一致性，基于补偿等机制，性能较好)。它可以与 Seata 等分布式事务框架协同工作。</li><li><strong>读写分离：</strong> 配置主从数据源，ShardingSphere 根据 SQL 类型（写操作走主库，读操作走从库）自动将读写请求路由到不同的数据源，减轻主库压力，提高读性能和可用性。</li><li><strong>数据治理：</strong> 提供数据加密、数据脱敏（数据掩码）、影子库（用于压测或数据验证）等功能。</li></ul></li></ol><h3 id="shardingsphere-sql-执行流程-详细" tabindex="-1"><a class="header-anchor" href="#shardingsphere-sql-执行流程-详细"><span>ShardingSphere SQL 执行流程 (详细)</span></a></h3><p>一个 SQL 语句在 ShardingSphere 中的完整生命周期（以 JDBC 或 Proxy 接入为例）：</p><ol><li><strong>应用程序发送 SQL：</strong> 应用通过 ShardingSphere 的数据源 (JDBC) 或连接到 Proxy (Proxy) 发送 SQL 语句。</li><li><strong>ShardingSphere 拦截 SQL：</strong> JDBC 驱动或 Proxy 接收到 SQL。</li><li><strong>SQL 解析：</strong> 将 SQL 解析为 AST，提取关键信息。</li><li><strong>路由引擎：</strong> 分析 AST，结合分片规则、读写分离规则、影子库规则等，计算出 SQL 应该发送到哪些<strong>物理数据源</strong>上的哪些<strong>物理表</strong>。生成一个包含多个要在不同物理数据源上执行的<strong>物理 SQL</strong> 的执行计划。 <ul><li><strong>分片路由过程简述：</strong> 根据配置的分片算法，将 SQL 中的分片键值映射到逻辑表对应的物理数据库和物理表名。例如，<code>user_id = 10</code> 的查询，分片算法可能是 <code>user_id % 2</code>，如果结果是 0，则路由到 <code>ds_0.user_0</code> 表；如果是 1，则路由到 <code>ds_1.user_1</code> 表。复杂查询（如范围查询、OR 条件）可能导致路由到多个物理表。不带分片键的查询（如全表扫描）可能路由到所有物理表（广播路由）。</li></ul></li><li><strong>执行引擎：</strong> 接收执行计划，根据计划在对应的物理数据源连接上并行执行各个物理 SQL。</li><li><strong>结果归并引擎：</strong> 收集来自各个物理数据源的结果集。如果原始 SQL 包含聚合函数、ORDER BY、GROUP BY 等，归并引擎会在 ShardingSphere 这一层进行<strong>内存计算或二次排序</strong>，将多个结果集合并成一个逻辑结果集。例如，跨库 COUNT(*)，归并引擎会将所有分片返回的 COUNT 值相加。跨库 ORDER BY，归并引擎会将所有分片的结果取回，在内存中进行全局排序。</li><li><strong>ShardingSphere 返回结果：</strong> 将最终归并得到的逻辑结果集返回给应用程序。</li></ol><h3 id="核心功能实现原理简述" tabindex="-1"><a class="header-anchor" href="#核心功能实现原理简述"><span>核心功能实现原理简述</span></a></h3><ul><li><strong>数据分片：</strong><ul><li><strong>分片键 (Sharding Key)：</strong> 用于确定数据分布的列（如 <code>user_id</code>, <code>order_id</code>）。</li><li><strong>分片算法：</strong> 决定分片键如何映射到物理库表。常见类型：标准分片算法（如范围、取模、Hash、基于时间），复杂分片算法（多个分片键），Hint 分片算法（通过 Hint 指定路由），自动分片算法（如雪花算法 ID）。</li></ul></li><li><strong>读写分离：</strong><ul><li><strong>原理：</strong> 配置一个逻辑数据源，包含一个主库数据源和多个从库数据源。ShardingSphere 拦截 SQL，判断是写操作（<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>）则路由到主库，是读操作（<code>SELECT</code>）则根据配置的负载均衡策略（如轮询、随机、权重）路由到一个从库。</li></ul></li><li><strong>分布式事务：</strong><ul><li><strong>原理：</strong> 协调跨越多个物理数据源的事务操作。 <ul><li><strong>XA 模式：</strong> 基于分布式事务的 XA 规范，依赖底层数据库和驱动支持。强一致性，通过全局事务管理器协调二阶段提交。性能开销较大。</li><li><strong>BASE 模式：</strong> 基于补偿机制实现最终一致性。性能优于 XA。通常需要与 Seata 等分布式事务框架集成。</li></ul></li></ul></li><li><strong>数据治理：</strong><ul><li><strong>数据加密：</strong> 在写入数据库前对敏感数据进行加密，读取时自动解密。</li><li><strong>数据脱敏：</strong> 在查询结果返回给应用前，对敏感数据进行处理（如部分隐藏）。</li><li><strong>影子库：</strong> 将业务流量按规则复制一份到影子库中，用于压测、数据验证等，不影响线上主库。</li></ul></li></ul><h3 id="shardingsphere-配置方式-简要" tabindex="-1"><a class="header-anchor" href="#shardingsphere-配置方式-简要"><span>ShardingSphere 配置方式 (简要)</span></a></h3><p>ShardingSphere 的配置（数据源、分片规则、读写分离规则、分布式事务配置等）主要通过 YAML 文件进行。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># 简要 YAML 配置结构示例</span>

<span class="token key atrule">dataSources</span><span class="token punctuation">:</span> <span class="token comment"># 配置物理数据源</span>
  <span class="token key atrule">ds_0</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_0<span class="token punctuation">?</span>serverTimezone=UTC
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> password
    <span class="token comment"># ... 其他连接池配置</span>
  <span class="token key atrule">ds_1</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_1<span class="token punctuation">?</span>serverTimezone=UTC
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> password
    <span class="token comment"># ...</span>

<span class="token key atrule">rules</span><span class="token punctuation">:</span> <span class="token comment"># 配置规则</span>
  <span class="token punctuation">-</span> <span class="token tag">!SHARDING</span> <span class="token comment"># 分片规则</span>
    <span class="token key atrule">tables</span><span class="token punctuation">:</span>
      <span class="token key atrule">user</span><span class="token punctuation">:</span> <span class="token comment"># 用户表分片</span>
        <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.user_$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span> <span class="token comment"># 物理数据节点表达式，ds_0.user_0, ds_0.user_1, ds_1.user_0, ds_1.user_1</span>
        <span class="token key atrule">databaseStrategy</span><span class="token punctuation">:</span> <span class="token comment"># 库分片策略</span>
          <span class="token key atrule">standard</span><span class="token punctuation">:</span>
            <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> user_id <span class="token comment"># 分片键</span>
            <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> user_db_hash <span class="token comment"># 分片算法名称</span>
        <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span> <span class="token comment"># 表分片策略</span>
          <span class="token key atrule">standard</span><span class="token punctuation">:</span>
            <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> user_id <span class="token comment"># 分片键</span>
            <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> user_table_hash <span class="token comment"># 分片算法名称</span>
    <span class="token key atrule">defaultDatabaseStrategy</span><span class="token punctuation">:</span> <span class="token comment"># 默认库分片策略</span>
      <span class="token key atrule">standard</span><span class="token punctuation">:</span>
        <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> order_id <span class="token comment"># 默认分片键</span>
        <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> default_db_hash <span class="token comment"># 默认分片算法名称</span>
    <span class="token key atrule">shardingAlgorithms</span><span class="token punctuation">:</span> <span class="token comment"># 分片算法定义</span>
      <span class="token key atrule">user_db_hash</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> HASH_MOD <span class="token comment"># Hash 取模算法</span>
        <span class="token key atrule">props</span><span class="token punctuation">:</span>
          <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>user_id % 2<span class="token punctuation">}</span> <span class="token comment"># 表达式 user_id % 2 映射到 0 或 1</span>
      <span class="token key atrule">user_table_hash</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> HASH_MOD
        <span class="token key atrule">props</span><span class="token punctuation">:</span>
          <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>user_id % 2<span class="token punctuation">}</span> <span class="token comment"># 表达式 user_id % 2 映射到 0 或 1</span>
      <span class="token key atrule">default_db_hash</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> HASH_MOD
        <span class="token key atrule">props</span><span class="token punctuation">:</span>
          <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>order_id % 2<span class="token punctuation">}</span>

  <span class="token punctuation">-</span> <span class="token tag">!READWRITE_SPLITTING</span> <span class="token comment"># 读写分离规则</span>
    <span class="token key atrule">dataSources</span><span class="token punctuation">:</span>
      <span class="token key atrule">logic_db</span><span class="token punctuation">:</span> <span class="token comment"># 逻辑数据源名称</span>
        <span class="token key atrule">writeDataSourceName</span><span class="token punctuation">:</span> ds_write <span class="token comment"># 主库名称</span>
        <span class="token key atrule">readDataSourceNames</span><span class="token punctuation">:</span> <span class="token comment"># 从库名称列表</span>
          <span class="token punctuation">-</span> ds_read_0
          <span class="token punctuation">-</span> ds_read_1
        <span class="token key atrule">loadBalancerName</span><span class="token punctuation">:</span> round_robin <span class="token comment"># 负载均衡算法名称</span>
    <span class="token key atrule">dataSources</span><span class="token punctuation">:</span> <span class="token comment"># 配置主从物理数据源</span>
      <span class="token key atrule">ds_write</span><span class="token punctuation">:</span>
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/write_db<span class="token punctuation">?</span>serverTimezone=UTC
        <span class="token comment"># ...</span>
      <span class="token key atrule">ds_read_0</span><span class="token punctuation">:</span>
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/read_db_0<span class="token punctuation">?</span>serverTimezone=UTC
        <span class="token comment"># ...</span>
      <span class="token key atrule">ds_read_1</span><span class="token punctuation">:</span>
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/read_db_1<span class="token punctuation">?</span>serverTimezone=UTC
        <span class="token comment"># ...</span>
    <span class="token key atrule">loadBalancers</span><span class="token punctuation">:</span> <span class="token comment"># 负载均衡算法定义</span>
      <span class="token key atrule">round_robin</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> ROUND_ROBIN <span class="token comment"># 轮询</span>

  <span class="token comment"># - !DISTRIBUTED_TRANSACTION_RULE # 分布式事务规则</span>
  <span class="token comment">#   defaultProvider: XA # 默认事务提供者，可选 XA 或 BASE 相关的如 Seata</span>
  <span class="token comment">#   transactionProviders:</span>
  <span class="token comment">#     XA:</span>
  <span class="token comment">#       type: XA</span>
  <span class="token comment">#     # Seata:</span>
  <span class="token comment">#     #   type: BASE</span>

  <span class="token comment"># - !ENCRYPT # 数据加密规则</span>
  <span class="token comment">#   tables:</span>
  <span class="token comment">#     user:</span>
  <span class="token comment">#       columns:</span>
  <span class="token comment">#         phone:</span>
  <span class="token comment">#           plainColumn: phone_plain</span>
  <span class="token comment">#           cipherColumn: phone_cipher</span>
  <span class="token comment">#           encryptorName: aes_encryptor</span>
  <span class="token comment">#   encryptors:</span>
  <span class="token comment">#     aes_encryptor:</span>
  <span class="token comment">#       type: AES # AES 加密算法</span>
  <span class="token comment">#       props:</span>
  <span class="token comment">#         aes.key.value: your-aes-key</span>

  <span class="token comment"># - !DATA_MASK # 数据脱敏规则</span>
  <span class="token comment">#   tables:</span>
  <span class="token comment">#     user:</span>
  <span class="token comment">#       columns:</span>
  <span class="token comment">#         email:</span>
  <span class="token comment">#           logicColumn: email</span>
  <span class="token comment">#           maskAlgorithmName: email_mask</span>
  <span class="token comment">#   maskAlgorithms:</span>
  <span class="token comment">#     email_mask:</span>
  <span class="token comment">#       type: MASK_JAVASCRIPT # 使用 Javascript 脱敏算法</span>
  <span class="token comment">#       props:</span>
  <span class="token comment">#         mask.javascript.code: &quot;value.replace(/\\\\w{3}@/,&#39;***@&#39;)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shardingsphere-与-spring-boot-集成方式-简要" tabindex="-1"><a class="header-anchor" href="#shardingsphere-与-spring-boot-集成方式-简要"><span>ShardingSphere 与 Spring Boot 集成方式 (简要)</span></a></h3><p>ShardingSphere 提供了便捷的 Spring Boot Starter。</p><ol><li><strong>添加依赖：</strong> 在 <code>pom.xml</code> 中添加 ShardingSphere Spring Boot Starter 和 JDBC 驱动依赖。如果使用 Proxy，则无需在应用中添加 ShardingSphere 依赖，直接添加数据库驱动即可。<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shardingsphere-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>配置：</strong> 在 <code>application.yml</code> 或 <code>application.properties</code> 中直接引入 ShardingSphere 的 YAML 配置文件。<div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># application.yml</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>
    <span class="token comment"># 指定 ShardingSphere 的 YAML 配置文件位置</span>
    <span class="token comment"># 注意：ShardingSphere 的配置格式与 Spring Boot 不同</span>
    <span class="token comment"># 将上述 ShardingSphere 的 YAML 配置放在一个单独的文件，例如 classpath:shardingsphere-config.yaml</span>
    <span class="token key atrule">yaml-config</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>shardingsphere<span class="token punctuation">-</span>config.yaml

<span class="token comment"># 如果使用 ShardingSphere-Proxy 模式，应用中只配置连接 Proxy 的数据源即可</span>
<span class="token comment"># spring:</span>
<span class="token comment">#   datasource:</span>
<span class="token comment">#     url: jdbc:mysql://localhost:3307/logic_db?serverTimezone=UTC # 连接 Proxy 的地址和逻辑库名</span>
<span class="token comment">#     username: root</span>
<span class="token comment">#     password: password</span>
<span class="token comment">#     driver-class-name: com.mysql.cj.jdbc.Driver</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>使用：</strong> 应用程序像使用普通数据源一样使用 ShardingSphere 提供的 <code>DataSource</code> Bean。</li></ol><h3 id="理解-shardingsphere-架构的价值" tabindex="-1"><a class="header-anchor" href="#理解-shardingsphere-架构的价值"><span>理解 ShardingSphere 架构的价值</span></a></h3><ul><li><strong>掌握数据库水平扩展核心原理：</strong> 深入理解数据分片、读写分离的实现机制。</li><li><strong>理解透明化中间件设计：</strong> 学习如何通过 SQL 拦截、解析、路由、执行、归并实现对上层应用的透明。</li><li><strong>对比不同接入端：</strong> 清楚 JDBC 和 Proxy 的优缺点和适用场景，根据项目选择合适模式。</li><li><strong>解决分布式数据问题：</strong> 知道如何应对分布式事务、数据一致性、高可用等挑战。</li><li><strong>应对面试：</strong> 数据库扩展和中间件原理是高阶面试的必考点。</li></ul><h3 id="shardingsphere-为何是面试热点" tabindex="-1"><a class="header-anchor" href="#shardingsphere-为何是面试热点"><span>ShardingSphere 为何是面试热点</span></a></h3><ul><li><strong>数据库扩展核心方案：</strong> 数据分片是应对海量数据和高并发的常用手段。</li><li><strong>国内广泛应用：</strong> 在国内许多互联网公司有大量落地实践。</li><li><strong>架构独特性：</strong> 多接入端和核心处理引擎的设计非常具有代表性。</li><li><strong>SQL 处理流程复杂性：</strong> SQL 解析、路由、结果归并等过程能够深入考察候选人对数据库原理和中间件的理解。</li><li><strong>分布式特性丰富：</strong> 不仅分片，还涵盖读写分离、分布式事务、数据治理等，考点全面。</li></ul><h3 id="面试问题示例与深度解析" tabindex="-1"><a class="header-anchor" href="#面试问题示例与深度解析"><span>面试问题示例与深度解析</span></a></h3><ul><li><strong>什么是 Apache ShardingSphere？它解决了什么问题？核心目标是什么？</strong> (定义为分布式数据库中间件生态，解决数据库水平扩展带来的复杂性，核心目标是透明化分布式数据库能力)</li><li><strong>请描述一下 ShardingSphere 的整体架构。它有哪些不同的接入端？请对比它们的优缺点和适用场景。</strong> (<strong>核心！</strong> 整体架构包括接入端和核心处理引擎。接入端：JDBC (Client-side) vs Proxy (Server-side)。详细对比优缺点和适用场景)</li><li><strong>请详细描述一个 SQL 查询语句在 ShardingSphere 中的执行流程。重点说明路由引擎和结果归并引擎的作用。</strong> (<strong>核心！</strong> SQL拦截 -&gt; 解析 -&gt; <strong>路由 (结合分片规则确定物理库表)</strong> -&gt; 执行 (并行) -&gt; <strong>结果归并 (处理聚合、排序、分组)</strong> -&gt; 返回。详细讲解路由和归并)</li><li><strong>ShardingSphere 如何实现数据分片？分片的核心要素是什么？</strong> (通过分片键和分片算法。核心要素：分片键、逻辑表、物理表、分片算法、分片策略)</li><li><strong>ShardingSphere 支持哪些分片算法类型？</strong> (标准、复杂、Hint、自动分片算法等，可以简述其工作原理)</li><li><strong>ShardingSphere 如何实现读写分离？原理是什么？</strong> (配置主从数据源，根据 SQL 类型自动路由，读操作通过负载均衡策略路由到从库)</li><li><strong>ShardingSphere 如何支持分布式事务？支持哪些模式？它们有什么区别？</strong> (支持 XA 和 BASE 模式，XA 强一致性但开销大，BASE 最终一致性性能好，常与 Seata 集成。简述原理)</li><li><strong>ShardingSphere 还提供了哪些数据治理功能？</strong> (数据加密、数据脱敏、影子库等，简述作用)</li><li><strong>ShardingSphere 和 MyCAT 或 Atlas 等其他数据库中间件有什么区别？</strong> (这是一个拓展问题，可以从架构模式、功能丰富度、社区活跃度等方面简要对比，ShardingSphere 生态更全面)</li><li><strong>ShardingSphere 如何实现对应用透明？</strong> (通过拦截 JDBC 调用或数据库协议，在中间层处理分布式逻辑，向上层返回单一的逻辑数据源/连接)</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Apache ShardingSphere 是解决关系型数据库水平扩展和分布式数据治理的优秀开源方案。它通过提供 ShardingSphere-JDBC (客户端) 和 ShardingSphere-Proxy (服务端) 两种接入方式，以及一套强大的核心处理引擎（SQL 解析、路由、执行、结果归并），透明地为应用程序提供了数据分片、读写分离、分布式事务等分布式数据库能力。</p><p>理解 ShardingSphere 的整体架构、不同接入端的优缺点、SQL 执行流程中路由和结果归并的关键作用，以及其支持的分布式事务和数据治理功能，是掌握分布式数据库核心技术、应对海量数据和高并发场景的必备技能。</p>`,43)]))}const c=s(l,[["render",i],["__file","ShardingSphere-framework.html.vue"]]),d=JSON.parse('{"path":"/shardingsphere/ShardingSphere-framework.html","title":"","lang":"zh-CN","frontmatter":{"description":"在构建大型分布式系统时，数据库常常成为系统的瓶颈。传统的垂直扩展（升级更好的硬件）有物理上限，且成本高昂。水平扩展（将数据分散到多个数据库实例）是解决扩展性问题的有效途径，但这带来了新的开发和运维挑战：如何将数据分散到不同的库和表（分库分表，Sharding）？如何在分散的数据源上执行跨库跨表查询？如何保证分布式事务的一致性？如何处理读写分离和数据库高可用？","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/shardingsphere/ShardingSphere-framework.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"在构建大型分布式系统时，数据库常常成为系统的瓶颈。传统的垂直扩展（升级更好的硬件）有物理上限，且成本高昂。水平扩展（将数据分散到多个数据库实例）是解决扩展性问题的有效途径，但这带来了新的开发和运维挑战：如何将数据分散到不同的库和表（分库分表，Sharding）？如何在分散的数据源上执行跨库跨表查询？如何保证分布式事务的一致性？如何处理读写分离和数据库高可用？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"深度解析 Apache ShardingSphere 架构设计：透明分布式数据库的构建之道","slug":"深度解析-apache-shardingsphere-架构设计-透明分布式数据库的构建之道","link":"#深度解析-apache-shardingsphere-架构设计-透明分布式数据库的构建之道","children":[{"level":3,"title":"引言：数据库扩展的瓶颈与 ShardingSphere 的使命","slug":"引言-数据库扩展的瓶颈与-shardingsphere-的使命","link":"#引言-数据库扩展的瓶颈与-shardingsphere-的使命","children":[]},{"level":3,"title":"ShardingSphere 是什么？定位与目标","slug":"shardingsphere-是什么-定位与目标","link":"#shardingsphere-是什么-定位与目标","children":[]},{"level":3,"title":"为什么选择 ShardingSphere？优势分析","slug":"为什么选择-shardingsphere-优势分析","link":"#为什么选择-shardingsphere-优势分析","children":[]},{"level":3,"title":"ShardingSphere 整体架构与核心模块 (重点)","slug":"shardingsphere-整体架构与核心模块-重点","link":"#shardingsphere-整体架构与核心模块-重点","children":[]},{"level":3,"title":"ShardingSphere SQL 执行流程 (详细)","slug":"shardingsphere-sql-执行流程-详细","link":"#shardingsphere-sql-执行流程-详细","children":[]},{"level":3,"title":"核心功能实现原理简述","slug":"核心功能实现原理简述","link":"#核心功能实现原理简述","children":[]},{"level":3,"title":"ShardingSphere 配置方式 (简要)","slug":"shardingsphere-配置方式-简要","link":"#shardingsphere-配置方式-简要","children":[]},{"level":3,"title":"ShardingSphere 与 Spring Boot 集成方式 (简要)","slug":"shardingsphere-与-spring-boot-集成方式-简要","link":"#shardingsphere-与-spring-boot-集成方式-简要","children":[]},{"level":3,"title":"理解 ShardingSphere 架构的价值","slug":"理解-shardingsphere-架构的价值","link":"#理解-shardingsphere-架构的价值","children":[]},{"level":3,"title":"ShardingSphere 为何是面试热点","slug":"shardingsphere-为何是面试热点","link":"#shardingsphere-为何是面试热点","children":[]},{"level":3,"title":"面试问题示例与深度解析","slug":"面试问题示例与深度解析","link":"#面试问题示例与深度解析","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1745924024000,"updatedTime":1746115551000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":2}]},"readingTime":{"minutes":17.7,"words":5310},"filePathRelative":"shardingsphere/ShardingSphere-framework.md","localizedDate":"2025年4月29日","autoDesc":true}');export{c as comp,d as data};
