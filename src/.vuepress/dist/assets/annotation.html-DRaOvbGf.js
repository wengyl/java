import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as t,o as e}from"./app-CzKZ5RuK.js";const o={};function p(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h2 id="一、class文件中的注解存储机制" tabindex="-1"><a class="header-anchor" href="#一、class文件中的注解存储机制"><span>一、Class文件中的注解存储机制</span></a></h2><p>在JVM规范中，注解信息通过<code>RuntimeVisibleAnnotations</code>属性存储在Class文件的<strong>属性表</strong>中。该属性由以下结构组成：</p><ul><li><strong>属性名索引</strong>（2字节）：指向常量池中<code>RuntimeVisibleAnnotations</code>字符串的索引</li><li><strong>属性长度</strong>（4字节）：整个属性的字节长度</li><li><strong>注解数量</strong>（2字节）：当前元素（类/方法/字段）的注解总数</li><li><strong>注解数组</strong>：每个注解由三部分组成： <ul><li><strong>类型索引</strong>（2字节）：指向常量池中注解类型的全限定名（如<code>Lcom/example/Annotation;</code>）</li><li><strong>键值对数量</strong>（2字节）：注解成员值的数量</li><li><strong>键值对数组</strong>：每个成员由<code>u2</code>类型名称索引和<code>element_value</code>值构成</li></ul></li></ul><p>例如，<code>@DistributedLock(timeout=5000)</code>对应的字节码中，<code>timeout</code>作为名称索引指向常量池，值以<code>CONSTANT_Integer_info</code>形式存储。这种紧凑的二进制结构使得JVM能在加载类时快速解析注解信息。</p><hr><h2 id="二、annotationinvocationhandler的动态代理实现" tabindex="-1"><a class="header-anchor" href="#二、annotationinvocationhandler的动态代理实现"><span>二、AnnotationInvocationHandler的动态代理实现</span></a></h2><p>Spring框架处理<code>@AliasFor</code>的核心机制基于JDK动态代理：</p><ol><li><strong>代理必要性判断</strong>：通过<code>isSynthesizable</code>方法检查注解是否包含别名定义或嵌套可合成注解：</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Spring AnnotationUtils源码</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSynthesizable</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> annotationType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> attribute <span class="token operator">:</span> <span class="token function">getAttributeMethods</span><span class="token punctuation">(</span>annotationType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getAttributeAliasNames</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>代理对象创建</strong>：当需要合成注解时，通过<code>SynthesizedAnnotationInvocationHandler</code>处理属性访问：</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 属性访问代理逻辑</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理基础方法</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attributeExtractor<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理别名映射</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>动态代理生成</strong>：最终通过<code>Proxy.newProxyInstance</code>创建同时实现原注解接口和<code>SynthesizedAnnotation</code>标记接口的代理对象，实现属性别名的运行时解析。</li></ol><hr><h2 id="三、asm动态修改注解值实战" tabindex="-1"><a class="header-anchor" href="#三、asm动态修改注解值实战"><span>三、ASM动态修改注解值实战</span></a></h2><p>通过字节码工具ASM实现运行时注解修改：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ClassReader</span> cr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span>cr<span class="token punctuation">,</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">.</span><span class="token constant">COMPUTE_FRAMES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

cr<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassVisitor</span><span class="token punctuation">(</span><span class="token constant">ASM9</span><span class="token punctuation">,</span> cw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AnnotationVisitor</span> <span class="token function">visitAnnotation</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token keyword">boolean</span> visible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;Lcom/example/Config;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationVisitor</span><span class="token punctuation">(</span><span class="token constant">ASM9</span><span class="token punctuation">,</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitAnnotation</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> visible<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将timeout值改为10秒</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitAnnotation</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> visible<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newClass <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过自定义ClassLoader加载修改后的类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该技术可用于实现动态配置切换，但需注意修改后的类需重新加载以避免PermGen内存泄漏。</p><hr><h2 id="四、声明式分布式锁框架设计" tabindex="-1"><a class="header-anchor" href="#四、声明式分布式锁框架设计"><span>四、声明式分布式锁框架设计</span></a></h2><p>基于<code>@DistributedLock</code>注解的框架实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DistributedLock</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment">// 秒</span>
    <span class="token class-name">LockType</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token constant">REDIS</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 切面实现</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockAspect</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(lock)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doLock</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">,</span> <span class="token class-name">DistributedLock</span> lock<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">LockClient</span> client <span class="token operator">=</span> <span class="token class-name">LockFactory</span><span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token function">parseSpEL</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pjp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>client<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> lock<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LockConflictException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 异步续期线程启动</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">renewLock</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> lockKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            client<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键技术点</strong>：</p><ul><li><strong>SPEL表达式解析</strong>：支持动态锁键生成（如<code>#user.id</code>）</li><li><strong>锁续期策略</strong>：通过后台线程定期执行<code>EXPIRE</code>命令</li><li><strong>降级方案</strong>：当Redis不可用时切换本地锁（如RedLock算法）</li></ul><hr><h2 id="五、java注解-vs-c-attribute" tabindex="-1"><a class="header-anchor" href="#五、java注解-vs-c-attribute"><span>五、Java注解 vs C# Attribute</span></a></h2><table><thead><tr><th><strong>维度</strong></th><th>Java注解</th><th>C# Attribute</th></tr></thead><tbody><tr><td><strong>元数据保留</strong></td><td>需显式声明@Retention策略</td><td>默认保留至运行时，通过Conditional控制编译时过滤</td></tr><tr><td><strong>作用域</strong></td><td>仅支持类/方法/字段等元素</td><td>支持程序集级属性（如[assembly: AssemblyVersion]）</td></tr><tr><td><strong>元编程能力</strong></td><td>需APT或AnnotationProcessor</td><td>通过PostSharp实现AOP</td></tr><tr><td><strong>默认值处理</strong></td><td>通过default关键字声明</td><td>通过构造函数参数设置</td></tr><tr><td><strong>嵌套注解</strong></td><td>支持多层嵌套</td><td>需显式声明AttributeUsage.AllowMultiple</td></tr></tbody></table><hr><h2 id="六、lombok-getter的ast魔法" tabindex="-1"><a class="header-anchor" href="#六、lombok-getter的ast魔法"><span>六、Lombok @Getter的AST魔法</span></a></h2><p>Lombok通过JSR 269注解处理器实现AST转换：</p><ol><li><strong>初始化阶段</strong>：在<code>AbstractProcessor</code>中注册对<code>@Getter</code>的监听</li><li><strong>AST修改</strong>：</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeElement</span><span class="token punctuation">&gt;</span></span> annotations<span class="token punctuation">,</span> <span class="token class-name">RoundEnvironment</span> roundEnv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> elem <span class="token operator">:</span> roundEnv<span class="token punctuation">.</span><span class="token function">getElementsAnonotatedWith</span><span class="token punctuation">(</span><span class="token class-name">Getter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClassTree</span> ct <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ClassTree</span><span class="token punctuation">)</span> trees<span class="token punctuation">.</span><span class="token function">getTree</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ct <span class="token operator">=</span> ct<span class="token punctuation">.</span><span class="token function">addMember</span><span class="token punctuation">(</span><span class="token function">generateGetterMethod</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成getter方法节点</span>
        trees<span class="token punctuation">.</span><span class="token function">rewrite</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重写AST</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>编译时织入</strong>：生成的getter方法直接写入字节码，源码中不可见。这种机制使得Lombok能在保持代码简洁性的同时兼容IDE的代码提示。</li></ol><hr><h2 id="七、云原生场景下的注解安全隐患" tabindex="-1"><a class="header-anchor" href="#七、云原生场景下的注解安全隐患"><span>七、云原生场景下的注解安全隐患</span></a></h2><ol><li><strong>反射攻击面扩大</strong>：Kubernetes环境中，恶意Pod可通过反射读取敏感注解（如<code>@Value(&quot;\${db.password}&quot;)</code>），需配合SecurityManager限制反射权限</li><li><strong>配置泄露风险</strong>：Spring Boot的<code>@ConfigurationProperties</code>若未加密，可能通过Actuator端点暴露</li><li><strong>类加载冲突</strong>：容器化部署中多版本注解的ClassLoader隔离失效，导致元数据污染</li><li><strong>动态代理开销</strong>：频繁生成注解代理类可能引发Metaspace溢出，需配合<code>-XX:MaxMetaspaceSize</code>限制</li></ol><p><strong>防御策略</strong>：</p><ul><li>使用<code>@ConditionalOnProperty</code>控制注解生效环境</li><li>对含敏感信息的注解增加<code>@Retention(RetentionPolicy.SOURCE)</code>限制</li><li>启用GraalVM Native Image提前处理注解，减少运行时反射</li></ul><hr><h3 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h3><p>Java注解系统从Class文件存储到动态代理机制，展现了JVM层精巧的设计哲学。在云原生时代，开发者需在灵活性与安全性间找到平衡——既要善用注解驱动开发提升效率，又要警惕元数据暴露带来的风险。正如Spring的<code>@AliasFor</code>所示，优秀的注解设计往往是框架扩展性与性能的基石。</p>`,40)]))}const u=s(o,[["render",p],["__file","annotation.html.vue"]]),r=JSON.parse('{"path":"/basic/annotation.html","title":"","lang":"zh-CN","frontmatter":{"description":"一、Class文件中的注解存储机制 在JVM规范中，注解信息通过RuntimeVisibleAnnotations属性存储在Class文件的属性表中。该属性由以下结构组成： 属性名索引（2字节）：指向常量池中RuntimeVisibleAnnotations字符串的索引 属性长度（4字节）：整个属性的字节长度 注解数量（2字节）：当前元素（类/方法/字...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/basic/annotation.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"一、Class文件中的注解存储机制 在JVM规范中，注解信息通过RuntimeVisibleAnnotations属性存储在Class文件的属性表中。该属性由以下结构组成： 属性名索引（2字节）：指向常量池中RuntimeVisibleAnnotations字符串的索引 属性长度（4字节）：整个属性的字节长度 注解数量（2字节）：当前元素（类/方法/字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T01:59:11.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-04-30T01:59:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-30T01:59:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、Class文件中的注解存储机制","slug":"一、class文件中的注解存储机制","link":"#一、class文件中的注解存储机制","children":[]},{"level":2,"title":"二、AnnotationInvocationHandler的动态代理实现","slug":"二、annotationinvocationhandler的动态代理实现","link":"#二、annotationinvocationhandler的动态代理实现","children":[]},{"level":2,"title":"三、ASM动态修改注解值实战","slug":"三、asm动态修改注解值实战","link":"#三、asm动态修改注解值实战","children":[]},{"level":2,"title":"四、声明式分布式锁框架设计","slug":"四、声明式分布式锁框架设计","link":"#四、声明式分布式锁框架设计","children":[]},{"level":2,"title":"五、Java注解 vs C# Attribute","slug":"五、java注解-vs-c-attribute","link":"#五、java注解-vs-c-attribute","children":[]},{"level":2,"title":"六、Lombok @Getter的AST魔法","slug":"六、lombok-getter的ast魔法","link":"#六、lombok-getter的ast魔法","children":[]},{"level":2,"title":"七、云原生场景下的注解安全隐患","slug":"七、云原生场景下的注解安全隐患","link":"#七、云原生场景下的注解安全隐患","children":[{"level":3,"title":"结语","slug":"结语","link":"#结语","children":[]}]}],"git":{"createdTime":1745924024000,"updatedTime":1745978351000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":2}]},"readingTime":{"minutes":4.33,"words":1298},"filePathRelative":"basic/annotation.md","localizedDate":"2025年4月29日","autoDesc":true}');export{u as comp,r as data};
