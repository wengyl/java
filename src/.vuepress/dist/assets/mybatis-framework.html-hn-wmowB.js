import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,e as s,o as a}from"./app-CzKZ5RuK.js";const i={};function n(l,e){return a(),o("div",null,e[0]||(e[0]=[s('<p>在Java应用中与关系型数据库交互是常见的任务。虽然 JDBC (Java Database Connectivity) 提供了标准的数据库访问接口，但直接使用 JDBC 编写代码非常繁琐：需要手动加载驱动、建立连接、创建 Statement、设置参数、执行 SQL、处理 <code>ResultSet</code>、进行对象映射、关闭资源，并且需要手动管理事务。大量的样板代码不仅降低了开发效率，也容易引入资源泄露等问题。</p><p>ORM (Object-Relational Mapping) 框架如 JPA、Hibernate 的出现极大地简化了数据库访问，它们将对象操作透明地转化为 SQL，让开发者可以更专注于业务对象。然而，在一些复杂的场景下，开发者可能需要对 SQL 有更精细的控制，以进行性能优化或处理特定的数据库特性，这时全自动的 ORM 可能显得不够灵活。</p><p>MyBatis 正是为了解决 JDBC 的繁琐性，同时保留开发者对 SQL 的<strong>控制权</strong>而诞生的。它是一个<strong>优秀的 SQL Mapper 框架</strong>，专注于将 SQL 语句与 Java 方法进行映射，屏蔽了 JDBC 的底层细节，让开发者能够更方便、更灵活地进行数据库访问。</p><p>理解 MyBatis 的架构设计、核心原理及其与 Spring 的集成方式，是掌握数据库持久层技术、高效进行数据访问以及应对面试官对持久层框架原理考察的关键。</p><p>今天，就让我们一起深入 MyBatis 的世界，剖析其 SQL Mapper 的艺术。</p><hr><h2 id="深度解析-apache-mybatis-架构设计-sql-mapper-的艺术" tabindex="-1"><a class="header-anchor" href="#深度解析-apache-mybatis-架构设计-sql-mapper-的艺术"><span>深度解析 Apache MyBatis 架构设计：SQL Mapper 的艺术</span></a></h2><h3 id="引言-从-jdbc-到-orm-再到-sql-mapper" tabindex="-1"><a class="header-anchor" href="#引言-从-jdbc-到-orm-再到-sql-mapper"><span>引言：从 JDBC 到 ORM，再到 SQL Mapper</span></a></h3><p>开发者在与数据库交互时，面临以下选择：</p><ul><li><strong>直接使用 JDBC：</strong> 最底层，灵活性最高，但代码量大，繁琐易错。</li><li><strong>使用 ORM (如 JPA/Hibernate)：</strong> 极大地简化开发，将对象操作转换为 SQL，开发者通常无需关心 SQL细节。但在复杂 SQL 或优化场景下，控制权较弱。</li><li><strong>使用 SQL Mapper (如 MyBatis)：</strong> 介于 JDBC 和 ORM 之间。开发者自己编写 SQL，MyBatis 负责将 SQL 的参数设置和结果集映射到 Java 对象，屏蔽了 JDBC 样板代码。</li></ul><p>MyBatis 凭借其在 SQL 控制权和 JDBC 简化之间的良好平衡，在国内获得了广泛的应用。</p><p>理解 MyBatis 的架构设计，能让你：</p><ul><li>掌握 SQL Mapper 框架的工作原理。</li><li>理解 MyBatis 如何处理 SQL 语句、设置参数和映射结果。</li><li>了解 MyBatis 的缓存机制和事务管理。</li><li>掌握 MyBatis 如何与 Spring / Spring Boot 无缝集成。</li><li>高效使用 MyBatis 并排查数据访问问题。</li><li>自信应对面试中关于持久层框架和 MyBatis 的提问。</li></ul><p>接下来，我们将深入 MyBatis 的核心组件、工作流程和关键特性。</p><h3 id="mybatis-是什么-定位与核心理念" tabindex="-1"><a class="header-anchor" href="#mybatis-是什么-定位与核心理念"><span>MyBatis 是什么？定位与核心理念</span></a></h3><p>MyBatis 是一个支持定制化 SQL、存储过程以及高级映射的<strong>优秀的持久层框架</strong>。</p><ul><li><strong>定位：</strong> 它是一个 <strong>SQL Mapper (SQL 映射器)</strong> 框架。它将开发者手动编写的 SQL 语句与 Java 方法进行<strong>映射</strong>。</li><li><strong>核心理念：</strong> 让开发者完全控制 SQL，同时 MyBaits 负责参数的设置和结果集的映射，将开发者从繁琐的 JDBC 样板代码中解放出来。</li></ul><h3 id="为什么选择-mybatis-优势分析" tabindex="-1"><a class="header-anchor" href="#为什么选择-mybatis-优势分析"><span>为什么选择 MyBatis？优势分析</span></a></h3><ul><li><strong>强大的 SQL 控制权：</strong> 开发者可以编写和优化最符合需求的 SQL 语句，充分利用数据库的特性。</li><li><strong>简化 JDBC 开发：</strong> 屏蔽了连接管理、Statement 创建、参数设置、结果集处理、资源关闭等繁琐细节。</li><li><strong>灵活的结果集映射：</strong> 支持将 SQL 查询结果灵活地映射到 Java POJO、Map 或 List。</li><li><strong>易于学习和使用：</strong> 相比全功能 ORM，概念相对简单。</li><li><strong>与 Spring/Spring Boot 集成良好：</strong> 提供了专门的适配模块，可以方便地在 Spring 环境中使用 MyBatis 并利用 Spring 的事务管理。</li><li><strong>支持动态 SQL：</strong> 提供了强大的动态 SQL 能力，可以根据条件灵活构建 SQL 语句。</li></ul><h3 id="mybatis-核心组件详解-重点" tabindex="-1"><a class="header-anchor" href="#mybatis-核心组件详解-重点"><span>MyBatis 核心组件详解 (重点)</span></a></h3><p>MyBatis 的架构围绕着 <code>SqlSessionFactory</code> 和 <code>SqlSession</code> 以及一系列内部执行处理组件构建。</p><ol><li><p><strong><code>SqlSessionFactory</code> (SQL 会话工厂)：</strong></p><ul><li><strong>定义：</strong> 负责创建 <code>SqlSession</code> 对象的<strong>工厂</strong>。它是 MyBatis 的<strong>核心对象</strong>。</li><li><strong>作用：</strong> 负责解析 MyBatis 的配置信息（<code>mybatis-config.xml</code> 或 Java Config），构建 <code>Configuration</code> 对象，然后创建 <code>SqlSessionFactory</code> 实例。由于其构建过程比较耗时且是线程安全的，一个应用通常只需要一个 <code>SqlSessionFactory</code> 实例，作为单例存在。</li><li><strong>生命周期：</strong> 应用启动时构建，应用关闭时销毁。</li><li><strong>构建过程简述：</strong> <code>SqlSessionFactoryBuilder</code> 读取 MyBatis 配置文件或 <code>Configuration</code> 对象，解析其中的环境配置 (数据源、事务管理器)、Mapper 文件的 SQL 映射信息等，最终构建出 <code>SqlSessionFactory</code>。</li></ul></li><li><p><strong><code>SqlSession</code> (SQL 会话)：</strong></p><ul><li><strong>定义：</strong> 代表与数据库的一次<strong>交互会话</strong>。它是 MyBatis 提供给开发者用于执行 SQL 操作的主要接口。</li><li><strong>作用：</strong> 提供了执行 SQL 的方法（如 <code>selectOne</code>, <code>selectList</code>, <code>insert</code>, <code>update</code>, <code>delete</code>），获取 Mapper 接口代理对象 (<code>getMapper()</code>)，以及管理事务 (<code>commit</code>, <code>rollback</code>, <code>close</code>)。<code>SqlSession</code> 不是线程安全的。</li><li><strong>生命周期：</strong> 在需要访问数据库时创建，在数据库访问完成后关闭。它的生命周期与一次请求或一个业务单元绑定。</li><li><strong>比喻：</strong> 想象 <code>SqlSessionFactory</code> 是一个数据库连接池工厂，而 <code>SqlSession</code> 就是从连接池中获取的一个数据库连接以及基于这个连接进行的一次会话。</li></ul></li><li><p><strong>Mapper 接口与 XML 文件/注解：</strong></p><ul><li><strong>定义：</strong> 开发者定义的 Java 接口，接口方法与 SQL 语句进行<strong>映射</strong>。开发者无需编写接口实现类，MyBatis 会在运行时生成一个代理实现。SQL 语句可以定义在与接口同名的 Mapper XML 文件中，或者直接使用注解标注在接口方法上。</li><li><strong>映射关系：</strong> Mapper XML 文件中的 <code>&lt;select&gt;</code>, <code>&lt;insert&gt;</code>, <code>&lt;update&gt;</code>, <code>&lt;delete&gt;</code> 标签的 <code>id</code> 属性通常与 Mapper 接口的方法名对应。</li><li><strong>SQL 定义：</strong> 在 XML 或注解中编写 SQL 语句，使用 <code>#{} 或 ${}</code> 绑定参数，使用 <code>&lt;resultMap&gt;</code> 或 <code>@Results</code> 定义结果集到对象的映射规则。</li><li><strong>比喻：</strong> Mapper 接口是你对外暴露的数据库操作 API 契约。Mapper XML/注解是这些 API 契约的具体实现细节（也就是 SQL 语句）。</li></ul></li><li><p><strong>核心执行处理组件 (Executor, Handlers)：</strong></p><ul><li>这些是 <code>SqlSession</code> 内部用于实际执行 SQL 和处理结果的组件。</li><li><strong><code>Executor</code> (执行器)：</strong> <code>SqlSession</code> 的底层实现，负责实际执行 SQL 语句。它会根据配置选择不同的执行器实现 (<code>SimpleExecutor</code>, <code>ReuseExecutor</code>, <code>BatchExecutor</code>)。它负责管理事务，并调用 <code>StatementHandler</code>。</li><li><strong><code>StatementHandler</code> (语句处理器)：</strong> 负责准备 SQL 语句，包括处理 SQL 占位符、设置 Statement 参数、执行底层的 JDBC Statement。它会调用 <code>ParameterHandler</code> 和 <code>ResultSetHandler</code>。</li><li><strong><code>ParameterHandler</code> (参数处理器)：</strong> 负责将 Java 方法的参数值设置到 JDBC <code>PreparedStatement</code> 的参数占位符中。</li><li><strong><code>ResultSetHandler</code> (结果集处理器)：</strong> 负责处理 JDBC 执行 SQL 后返回的 <code>ResultSet</code>。它会根据配置的 <code>&lt;resultMap&gt;</code> 或注解，将 <code>ResultSet</code> 中的数据映射到 Java 对象、Map 或其他类型。</li></ul></li></ol><h3 id="mybatis-工作流程-sql-执行详细" tabindex="-1"><a class="header-anchor" href="#mybatis-工作流程-sql-执行详细"><span>MyBatis 工作流程 (SQL 执行详细)</span></a></h3><p>理解 MyBatis 架构的关键是理解一个 SQL 调用是如何从 Mapper 接口方法，经过各个核心组件，最终执行到数据库并返回结果的：</p><ol><li><strong>应用调用 Mapper 接口方法：</strong> 应用程序通过 <code>SqlSession.getMapper()</code> 获取到的 Mapper 接口代理对象，调用其方法。</li><li><strong><code>SqlSession</code> 接收调用：</strong> Mapper 接口代理对象将调用信息（方法、参数）转发给关联的 <code>SqlSession</code>。</li><li><strong>查找 SQL 配置：</strong> <code>SqlSession</code> 根据调用信息（Mapper 接口名、方法名），从 <code>Configuration</code> 对象中查找对应的 SQL 语句、参数映射、结果映射等配置信息。</li><li><strong>获取 <code>Executor</code>：</strong> <code>SqlSession</code> 从 <code>Configuration</code> 中获取或选择一个 <code>Executor</code> 实现。</li><li><strong><code>Executor</code> 使用 <code>StatementHandler</code>：</strong> <code>Executor</code> 将 SQL 配置和参数传递给 <code>StatementHandler</code>。</li><li><strong><code>StatementHandler</code> 准备语句：</strong> <code>StatementHandler</code> 根据 SQL 配置创建 JDBC <code>PreparedStatement</code> 或 <code>Statement</code>。</li><li><strong><code>StatementHandler</code> 使用 <code>ParameterHandler</code>：</strong> <code>StatementHandler</code> 将方法参数传递给 <code>ParameterHandler</code>。<code>ParameterHandler</code> 负责将参数值设置到 JDBC 语句的参数占位符中。</li><li><strong>执行 JDBC 语句：</strong> <code>StatementHandler</code> 调用 JDBC API 执行准备好的 SQL 语句。</li><li><strong><code>StatementHandler</code> 使用 <code>ResultSetHandler</code> (针对查询)：</strong> 对于查询语句，<code>StatementHandler</code> 将 JDBC 返回的 <code>ResultSet</code> 传递给 <code>ResultSetHandler</code>。</li><li><strong><code>ResultSetHandler</code> 映射结果：</strong> <code>ResultSetHandler</code> 根据配置（<code>&lt;resultMap&gt;</code> 或注解）从 <code>ResultSet</code> 中读取数据，并将其映射到 Java 对象。</li><li><strong>返回结果：</strong> <code>ResultSetHandler</code> 将映射好的结果返回给 <code>StatementHandler</code>，<code>StatementHandler</code> 返回给 <code>Executor</code>，<code>Executor</code> 返回给 <code>SqlSession</code>，最终 <code>SqlSession</code> 将结果返回给应用程序。</li><li><strong>事务管理与资源关闭：</strong> 在整个过程中，<code>SqlSession</code> 负责管理事务，并在会话结束时关闭底层 JDBC 连接和 Statement 等资源。</li></ol><h3 id="mybatis-缓存机制-重点" tabindex="-1"><a class="header-anchor" href="#mybatis-缓存机制-重点"><span>MyBatis 缓存机制 (重点)</span></a></h3><p>MyBatis 提供两级缓存来提高查询性能：</p><ol><li><p><strong>一级缓存 (<code>SqlSession</code> 级别)：</strong></p><ul><li><strong>默认启用。</strong> 作用域是<strong>同一个 <code>SqlSession</code> 对象</strong>。</li><li>在同一个 <code>SqlSession</code> 中，对同一条 SQL (相同的 statement ID 和参数) 的查询结果会被缓存。后续对同一 SQL 的查询将直接从缓存中获取结果，不再访问数据库。</li><li><strong>生命周期：</strong> 随着 <code>SqlSession</code> 的创建而存在，随着 <code>SqlSession</code> 的关闭而销毁。</li><li><strong>注意：</strong> 当 <code>SqlSession</code> 执行了插入、更新、删除操作，或者手动清空缓存时，一级缓存会失效。</li><li><strong>面试关联：</strong> 缓存作用域、生命周期、何时失效。</li></ul></li><li><p><strong>二级缓存 (<code>SqlSessionFactory</code> 级别)：</strong></p><ul><li><strong>默认不启用。</strong> 作用域是<strong>同一个 <code>SqlSessionFactory</code> 对象</strong>，可以跨越不同的 <code>SqlSession</code>。</li><li>当多个 <code>SqlSession</code> 查询同一条 SQL (相同的 statement ID 和参数) 且开启了二级缓存时，查询结果会被缓存在 <code>SqlSessionFactory</code> 共享的区域。后续不同 <code>SqlSession</code> 对同一 SQL 的查询可能从二级缓存获取结果，减少数据库访问。</li><li><strong>启用方式：</strong><ul><li>在 <code>mybatis-config.xml</code> 中开启全局二级缓存：<code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code></li><li>在 Mapper XML 文件中配置 <code>&lt;cache/&gt;</code> 标签。</li><li>缓存的 POJO 对象需要实现 <code>Serializable</code> 接口。</li></ul></li><li><strong>生命周期：</strong> 随着 <code>SqlSessionFactory</code> 的创建而存在，随着 <code>SqlSessionFactory</code> 的关闭而销毁。</li><li><strong>注意：</strong> 二级缓存的粒度是 Mapper 命名空间。当 Mapper 命名空间下的任何一条 SQL 执行了插入、更新、删除操作，该命名空间下的所有二级缓存都会失效。</li><li><strong>面试关联：</strong> 缓存作用域、生命周期、如何启用、何时失效、对缓存对象的要求、一级和二级的区别。</li></ul></li></ol><p><strong>一级缓存 vs 二级缓存：</strong></p><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">一级缓存 (<code>SqlSession</code> 级别)</th><th style="text-align:left;">二级缓存 (<code>SqlSessionFactory</code> 级别)</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>作用域</strong></td><td style="text-align:left;">同一个 <code>SqlSession</code></td><td style="text-align:left;">同一个 <code>SqlSessionFactory</code> (跨 <code>SqlSession</code>)</td></tr><tr><td style="text-align:left;"><strong>默认</strong></td><td style="text-align:left;">启用</td><td style="text-align:left;">不启用</td></tr><tr><td style="text-align:left;"><strong>生命周期</strong></td><td style="text-align:left;">随 <code>SqlSession</code> 存亡</td><td style="text-align:left;">随 <code>SqlSessionFactory</code> 存亡</td></tr><tr><td style="text-align:left;"><strong>粒度</strong></td><td style="text-align:left;"><code>SqlSession</code></td><td style="text-align:left;">Mapper 命名空间</td></tr><tr><td style="text-align:left;"><strong>失效时机</strong></td><td style="text-align:left;"><code>SqlSession</code> 执行 CUD 操作，或清空缓存</td><td style="text-align:left;">Mapper 命名空间执行 CUD 操作</td></tr></tbody></table><h3 id="mybatis-与-spring-集成方式-详细" tabindex="-1"><a class="header-anchor" href="#mybatis-与-spring-集成方式-详细"><span>MyBatis 与 Spring 集成方式 (详细)</span></a></h3><p>在实际开发中，MyBatis 常常与 Spring Framework 结合使用，利用 Spring 的 IoC、声明式事务等功能。MyBatis 提供了专门的 <strong><code>mybatis-spring</code></strong> 适配模块来简化集成。</p><p><code>mybatis-spring</code> 模块的主要组件：</p><ol><li><strong><code>SqlSessionFactoryBean</code>：</strong><ul><li><strong>作用：</strong> Spring 提供的 FactoryBean 实现，用于在 Spring 容器中构建并暴露 <code>SqlSessionFactory</code> Bean。它负责加载 MyBatis 的配置信息（<code>mybatis-config.xml</code> 或直接配置数据源、Mapper 等），并将构建好的 <code>SqlSessionFactory</code> 注册到 Spring 容器。</li></ul></li><li><strong><code>MapperScannerConfigurer</code> / <code>@MapperScan</code>：</strong><ul><li><strong>作用：</strong> 自动扫描指定包下的 Mapper 接口，并将它们注册为 Spring 容器中的 Bean。开发者只需要定义 Mapper 接口，无需手动为每个 Mapper 接口配置 Bean。<code>MapperScannerConfigurer</code> 用于 XML 配置，<code>@MapperScan</code> 用于 Java Config。</li></ul></li><li><strong><code>MapperFactoryBean</code>：</strong><ul><li><strong>作用：</strong> Spring 提供的 FactoryBean 实现，用于创建 Mapper 接口的代理对象 Bean。<code>MapperScannerConfigurer</code> / <code>@MapperScan</code> 在底层就是使用 <code>MapperFactoryBean</code> 为每个扫描到的 Mapper 接口生成代理 Bean。</li></ul></li><li><strong><code>SqlSessionTemplate</code>：</strong><ul><li><strong>作用：</strong> <code>SqlSession</code> 的线程安全实现。它封装了 <code>SqlSession</code> 的创建、使用和关闭逻辑，并能够<strong>自动集成 Spring 的声明式事务</strong>。在 Spring 环境下，通常使用 <code>SqlSessionTemplate</code> 来代替直接操作 <code>SqlSession</code>。<code>MapperFactoryBean</code> 生成的 Mapper 代理对象默认就使用 <code>SqlSessionTemplate</code> 来执行操作。</li></ul></li></ol><p><strong>MyBatis 与 Spring 声明式事务 (<code>@Transactional</code>) 集成：</strong></p><ul><li>在 Spring 环境下，通常由 Spring 的事务管理器管理事务。你只需要在 Service 层方法上添加 <code>@Transactional</code> 注解。</li><li><code>mybatis-spring</code> 的 <code>SqlSessionTemplate</code> 会感知到当前的 Spring 事务。当 <code>@Transactional</code> 方法被调用时，Spring 事务管理器会先开启事务，然后调用 MyBatis 操作。<code>SqlSessionTemplate</code> 会加入到这个由 Spring 管理的事务中，确保同一个事务中的所有 MyBatis 操作使用同一个数据库连接。</li><li>当 Spring 事务提交或回滚时，<code>SqlSessionTemplate</code> 也会跟着执行底层的 MyBatis (<code>SqlSession</code>) 提交或回滚操作。</li></ul><p><strong>MyBatis 与 Spring Boot 集成：</strong></p><ul><li>Spring Boot 提供了 <code>mybatis-spring-boot-starter</code>，它在 <code>mybatis-spring</code> 的基础上提供了自动配置能力。</li><li>只需要引入 Starter，配置数据源和 <code>mybatis.*</code> 相关属性，Spring Boot 会自动配置 <code>SqlSessionFactoryBean</code> 和 <code>SqlSessionTemplate</code>，并默认扫描 <code>main</code> 方法所在包及其子包下的 Mapper 接口。极大地简化了配置。</li></ul><h3 id="mybatis-vs-jpa-hibernate-对比分析" tabindex="-1"><a class="header-anchor" href="#mybatis-vs-jpa-hibernate-对比分析"><span>MyBatis vs JPA/Hibernate 对比分析</span></a></h3><ul><li><strong>MyBatis (SQL Mapper)：</strong> 开发者编写 SQL，控制权强。专注于 SQL 与方法的映射。适用于对 SQL 有精细控制需求、现有 SQL 复杂、或者希望充分利用特定数据库特性的场景。学习曲线相对平缓。</li><li><strong>JPA/Hibernate (Full ORM)：</strong> 开发者面向对象操作，框架自动生成 SQL。屏蔽 SQL 细节。适用于业务逻辑以对象为中心、对 SQL 控制权要求不高、希望快速开发CRUD功能的场景。学习曲线相对陡峭，但掌握后开发效率高。</li></ul><p>选择哪个框架取决于项目需求、团队熟悉度以及对 SQL 控制权的需求。在许多国内项目中，MyBatis 因其灵活的 SQL 控制权而备受青睐。</p><h3 id="理解-mybatis-架构与使用方式的价值" tabindex="-1"><a class="header-anchor" href="#理解-mybatis-架构与使用方式的价值"><span>理解 MyBatis 架构与使用方式的价值</span></a></h3><ul><li><strong>掌握数据库持久层核心技术：</strong> 理解 SQL Mapper 的工作原理，它是 ORM 之外的另一种重要持久层技术。</li><li><strong>高效进行数据访问：</strong> 熟练使用 MyBatis 进行数据库操作和结果映射。</li><li><strong>理解缓存和事务：</strong> 掌握一级/二级缓存的区别和使用，理解 MyBatis 如何与 Spring 事务集成。</li><li><strong>排查数据访问问题：</strong> 知道 SQL 执行流程和组件作用，有助于定位 SQL 错误、性能问题、缓存问题等。</li><li><strong>应对面试：</strong> MyBatis 是国内高频面试点，理解其核心组件、流程、缓存、Spring 集成是关键。</li></ul><h3 id="mybatis-为何是面试热点" tabindex="-1"><a class="header-anchor" href="#mybatis-为何是面试热点"><span>MyBatis 为何是面试热点</span></a></h3><ul><li><strong>国内广泛应用：</strong> 许多公司使用 MyBatis，面试中考察实践能力。</li><li><strong>SQL 控制权特点：</strong> 与 ORM 的对比是常见面试题，考察你对不同持久层方案的理解和权衡。</li><li><strong>核心组件和流程：</strong> <code>SqlSession</code>, <code>SqlSessionFactory</code>, Mapper, Executor, Handlers, SQL 执行流程都是考察原理的基础。</li><li><strong>缓存机制：</strong> 一级缓存和二级缓存的区别是必考点。</li><li><strong>与 Spring 集成：</strong> 考察 MyBatis 在实际项目中的应用方式以及对 Spring 事务的理解。</li></ul><h3 id="面试问题示例与深度解析" tabindex="-1"><a class="header-anchor" href="#面试问题示例与深度解析"><span>面试问题示例与深度解析</span></a></h3><ul><li><strong>什么是 MyBatis？它解决了 Java 数据库访问的哪些问题？它与 JPA/Hibernate 有什么区别？</strong> (定义 SQL Mapper，解决 JDBC 繁琐，区别于 ORM 的 SQL 控制权特点)</li><li><strong>请描述一下 MyBatis 的核心组件。它们在 MyBatis 中分别起什么作用？</strong> (<code>SqlSession</code>, <code>SqlSessionFactory</code>, Mapper，以及 Executor, StatementHandler, ParameterHandler, ResultSetHandler)</li><li><strong>请详细描述一个 SQL 查询语句在 MyBatis 中的执行流程。从调用 Mapper 接口方法到获取结果的全过程。</strong> (<strong>核心！</strong> Mapper -&gt; <code>SqlSession</code> -&gt; <code>Executor</code> -&gt; <code>StatementHandler</code> -&gt; <code>ParameterHandler</code> -&gt; JDBC 执行 -&gt; <code>ResultSetHandler</code> 结果映射 -&gt; 返回。详细说明各组件作用)</li><li><strong>MyBatis 有几种缓存？它们有什么区别？请详细说明一级缓存和二级缓存的作用域和生命周期。</strong> (<strong>核心！</strong> 两级缓存，详细对比 Level 1 (SqlSession 级) vs Level 2 (SqlSessionFactory 级)，作用域、生命周期、配置、失效时机)</li><li><strong>MyBatis 的二级缓存是如何配置和使用的？使用二级缓存需要注意什么？</strong> (全局配置、Mapper 配置，注意缓存对象需序列化，CUD 操作会使二级缓存失效)</li><li><strong>MyBatis 是如何与 Spring 集成的？需要哪些关键组件？</strong> (<strong>核心！</strong> <code>mybatis-spring</code> 适配模块，关键组件：<code>SqlSessionFactoryBean</code>, <code>MapperScannerConfigurer</code>/@MapperScan, <code>MapperFactoryBean</code>, <code>SqlSessionTemplate</code>)</li><li><strong>在 Spring 项目中，MyBatis 如何实现事务管理？ Spring 的 <code>@Transactional</code> 注解如何与 MyBatis 一起工作？</strong> (Spring 事务管理器管理事务，<code>SqlSessionTemplate</code> 自动集成 Spring 事务， <code>@Transactional</code> 开启事务，<code>SqlSessionTemplate</code> 加入，Spring 提交/回滚事务)</li><li><strong>MyBatis 的动态 SQL 是如何实现的？</strong> (基于 XML 中的 <code>&lt;if&gt;</code>, <code>&lt;where&gt;</code>, <code>&lt;foreach&gt;</code> 等标签，运行时动态构建 SQL)</li><li><strong><code>#{}</code> 和 <code>${}</code> 在 MyBatis 中有什么区别？</strong> (<code>#</code> 预编译参数，防止 SQL 注入；<code>$</code> 字符串替换，可能导致 SQL 注入，常用于动态列名或表名)</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>MyBatis 是 Java 数据库访问领域一个非常实用的 SQL Mapper 框架。它在保留开发者 SQL 控制权的同时，极大地简化了 JDBC 开发，并通过 <code>SqlSessionFactory</code>、<code>SqlSession</code>、Mapper、Executor、Handlers 等核心组件以及两级缓存机制，提供了高效灵活的数据持久层解决方案。</p><p>理解 MyBatis 的架构设计，特别是 SQL 执行流程中各组件的职责、两级缓存的区别、以及它与 Spring 的无缝集成方式，是掌握 MyBatis 核心技术、应对实际开发需求并从容面对面试的关键。</p>',50)]))}const d=t(i,[["render",n],["__file","mybatis-framework.html.vue"]]),g=JSON.parse('{"path":"/mybatis/mybatis-framework.html","title":"","lang":"zh-CN","frontmatter":{"description":"在Java应用中与关系型数据库交互是常见的任务。虽然 JDBC (Java Database Connectivity) 提供了标准的数据库访问接口，但直接使用 JDBC 编写代码非常繁琐：需要手动加载驱动、建立连接、创建 Statement、设置参数、执行 SQL、处理 ResultSet、进行对象映射、关闭资源，并且需要手动管理事务。大量的样板代码...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/mybatis/mybatis-framework.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"在Java应用中与关系型数据库交互是常见的任务。虽然 JDBC (Java Database Connectivity) 提供了标准的数据库访问接口，但直接使用 JDBC 编写代码非常繁琐：需要手动加载驱动、建立连接、创建 Statement、设置参数、执行 SQL、处理 ResultSet、进行对象映射、关闭资源，并且需要手动管理事务。大量的样板代码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"深度解析 Apache MyBatis 架构设计：SQL Mapper 的艺术","slug":"深度解析-apache-mybatis-架构设计-sql-mapper-的艺术","link":"#深度解析-apache-mybatis-架构设计-sql-mapper-的艺术","children":[{"level":3,"title":"引言：从 JDBC 到 ORM，再到 SQL Mapper","slug":"引言-从-jdbc-到-orm-再到-sql-mapper","link":"#引言-从-jdbc-到-orm-再到-sql-mapper","children":[]},{"level":3,"title":"MyBatis 是什么？定位与核心理念","slug":"mybatis-是什么-定位与核心理念","link":"#mybatis-是什么-定位与核心理念","children":[]},{"level":3,"title":"为什么选择 MyBatis？优势分析","slug":"为什么选择-mybatis-优势分析","link":"#为什么选择-mybatis-优势分析","children":[]},{"level":3,"title":"MyBatis 核心组件详解 (重点)","slug":"mybatis-核心组件详解-重点","link":"#mybatis-核心组件详解-重点","children":[]},{"level":3,"title":"MyBatis 工作流程 (SQL 执行详细)","slug":"mybatis-工作流程-sql-执行详细","link":"#mybatis-工作流程-sql-执行详细","children":[]},{"level":3,"title":"MyBatis 缓存机制 (重点)","slug":"mybatis-缓存机制-重点","link":"#mybatis-缓存机制-重点","children":[]},{"level":3,"title":"MyBatis 与 Spring 集成方式 (详细)","slug":"mybatis-与-spring-集成方式-详细","link":"#mybatis-与-spring-集成方式-详细","children":[]},{"level":3,"title":"MyBatis vs JPA/Hibernate 对比分析","slug":"mybatis-vs-jpa-hibernate-对比分析","link":"#mybatis-vs-jpa-hibernate-对比分析","children":[]},{"level":3,"title":"理解 MyBatis 架构与使用方式的价值","slug":"理解-mybatis-架构与使用方式的价值","link":"#理解-mybatis-架构与使用方式的价值","children":[]},{"level":3,"title":"MyBatis 为何是面试热点","slug":"mybatis-为何是面试热点","link":"#mybatis-为何是面试热点","children":[]},{"level":3,"title":"面试问题示例与深度解析","slug":"面试问题示例与深度解析","link":"#面试问题示例与深度解析","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1745924024000,"updatedTime":1746115551000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":2}]},"readingTime":{"minutes":14.74,"words":4422},"filePathRelative":"mybatis/mybatis-framework.md","localizedDate":"2025年4月29日","autoDesc":true}');export{d as comp,g as data};
