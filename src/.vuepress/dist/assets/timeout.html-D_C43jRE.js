import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as s,o as t}from"./app-CzKZ5RuK.js";const i={};function o(p,e){return t(),n("div",null,e[0]||(e[0]=[s(`<p>什么？线上的订单无法取消！ 我赶紧登录线上系统，查看业务日志。 <img src="https://javabaguwen.com/img/锁超时1.png" alt="image-20220805234433155.png" loading="lazy"> 发现有<strong>MySQL锁超时</strong>的错误日志。 不用想，肯定有另一个事务正在修改这条订单，持有这条订单的锁。 导致当前事务获取不到锁，一直等待，直到超过锁超时时间，然后报错。 既然问题已经清楚了，接下来就轮到怎么排查一下到底是哪个事务正在持有这条订单的锁。 好在MySQL提供了丰富的工具，帮助我们排查锁竞争问题。</p><p>现场复现一个这个问题： 创建一张用户表，造点数据：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键ID&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事务1，更新id=1的用户姓名，不提交事务：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">begin</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">&#39;一灯&#39;</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>事务2，删除id=1的数据，这时候会产生锁等待：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>begin;
delete from user where id=1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们就通过MySQL提供的锁竞争统计表，排查一下锁等待问题： 先查一下锁等待情况：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>select * from information_schema.innodb_lock_waits;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/锁超时2.png" alt="image-20220805230315814.png" loading="lazy"> 可以看到有一个锁等待的事务。 然后再查一下正在竞争的锁有哪些？</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>select * from information_schema.innodb_locks;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/锁超时3.png" alt="image-20220805230652982.png" tabindex="0" loading="lazy"><figcaption>image-20220805230652982.png</figcaption></figure><p>可以看到，MySQL统计的非常详细：</p><blockquote><p>lock_trx_id 表示事务ID lock_mode 表示排它锁还是共享锁 lock_type 表示锁定的记录，还是范围 lock_table 锁的表名 lock_index 锁定的是主键索引</p></blockquote><p>再查一下正在执行的事务有哪些？</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>select * from information_schema.innodb_trx;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/锁超时4.png" alt="image-20220805231412311.png" loading="lazy"> 可以清楚的看到正在执行的事务有两个，一个状态是锁等待（<code>LOCK WAIT</code>），正在执行的SQL也打印出来了：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>delete from user where id=1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正是事务2的删除语句。 不用问，第二条，显示正在运行状态（<code>RUNNING</code>）的事务就是正在持有锁的事务1，MySQL线程id（<code>trx_mysql_thread_id</code>）是193。 我们用MySQL线程id查一下事务线程id：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>select * from performance_schema.threads where processlist_id=193;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/锁超时5.png" alt="image-20220805232352034.png" loading="lazy"> 找到对应的事务线程id是218，然后再找一下这个线程正在执行的SQL语句：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>select THREAD_ID,CURRENT_SCHEMA,SQL_TEXT 
from performance_schema.events_statements_current 
where thread_id=218;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/锁超时6.png" alt="image-20220805233523949.png" loading="lazy"> 可以清楚的看到这个线程正在执行的SQL语句就是事务1的update语句。 持有锁的SQL语句找到了，接下来再去找对应的业务代码也就轻而易举了。 以上是基于MySQL5.7版本，在MySQL8.0版本中有些命令已经删除了，替换成了其他命令，下篇文章再讲一下MySQL8.0怎么定位<strong>MySQL锁超时</strong>问题。</p>`,23)]))}const d=a(i,[["render",o],["__file","timeout.html.vue"]]),r=JSON.parse('{"path":"/mysql/timeout.html","title":"","lang":"zh-CN","frontmatter":{"description":"什么？线上的订单无法取消！ 我赶紧登录线上系统，查看业务日志。 image-20220805234433155.png 发现有MySQL锁超时的错误日志。 不用想，肯定有另一个事务正在修改这条订单，持有这条订单的锁。 导致当前事务获取不到锁，一直等待，直到超过锁超时时间，然后报错。 既然问题已经清楚了，接下来就轮到怎么排查一下到底是哪个事务正在持有这条...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/mysql/timeout.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"什么？线上的订单无法取消！ 我赶紧登录线上系统，查看业务日志。 image-20220805234433155.png 发现有MySQL锁超时的错误日志。 不用想，肯定有另一个事务正在修改这条订单，持有这条订单的锁。 导致当前事务获取不到锁，一直等待，直到超过锁超时时间，然后报错。 既然问题已经清楚了，接下来就轮到怎么排查一下到底是哪个事务正在持有这条..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javabaguwen.com/img/%E9%94%81%E8%B6%85%E6%97%B61.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T06:25:28.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-04-29T06:25:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://javabaguwen.com/img/%E9%94%81%E8%B6%85%E6%97%B61.png\\",\\"https://javabaguwen.com/img/%E9%94%81%E8%B6%85%E6%97%B62.png\\",\\"https://javabaguwen.com/img/%E9%94%81%E8%B6%85%E6%97%B63.png\\",\\"https://javabaguwen.com/img/%E9%94%81%E8%B6%85%E6%97%B64.png\\",\\"https://javabaguwen.com/img/%E9%94%81%E8%B6%85%E6%97%B65.png\\",\\"https://javabaguwen.com/img/%E9%94%81%E8%B6%85%E6%97%B66.png\\"],\\"dateModified\\":\\"2025-04-29T06:25:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1745907928000,"updatedTime":1745907928000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":2.46,"words":737},"filePathRelative":"mysql/timeout.md","localizedDate":"2025年4月29日","autoDesc":true}');export{d as comp,r as data};
