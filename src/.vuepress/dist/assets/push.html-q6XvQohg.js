import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as i,o as a}from"./app-CzKZ5RuK.js";const l={};function o(r,e){return a(),n("div",null,e[0]||(e[0]=[i('<p>前面已经讲了MySQL的其他查询性能优化方式，没看过可以去了解一下： MySQL查询性能优化七种武器之索引潜水 MySQL查询性能优化七种武器之链路追踪 今天要讲的是MySQL的另一种查询性能优化方式 — <strong>索引下推（Index Condition Pushdown，简称ICP）</strong>，是MySQL5.6版本增加的特性。</p><h2 id="_1-索引下推的作用" tabindex="-1"><a class="header-anchor" href="#_1-索引下推的作用"><span>1. 索引下推的作用</span></a></h2><p>主要作用有两个：</p><ol><li>减少回表查询的次数</li><li>减少存储引擎和MySQL Server层的数据传输量</li></ol><p>总之就是了提升MySQL查询性能。</p><h2 id="_2-案例实践" tabindex="-1"><a class="header-anchor" href="#_2-案例实践"><span>2. 案例实践</span></a></h2><p>创建一张用户表，造点数据验证一下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CREATE TABLE `user` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,\n  `name` varchar(100) NOT NULL COMMENT &#39;姓名&#39;,\n  `age` tinyint NOT NULL COMMENT &#39;年龄&#39;,\n  `gender` tinyint NOT NULL COMMENT &#39;性别&#39;,\n  PRIMARY KEY (`id`),\n  KEY `idx_name_age` (`name`,`age`)\n) ENGINE=InnoDB COMMENT=&#39;用户表&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 姓名和年龄 (<code>name</code>,<code>age</code>) 两个字段上创建联合索引。 查询SQL执行计划，验证一下是否用到<strong>索引下推</strong>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>explain select * from user where name=&#39;一灯&#39; and age&gt;2;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/索引下推1.png" alt="" loading="lazy"> 执行计划中的Extra列显示了<strong>Using index condition</strong>，表示用到了<strong>索引下推</strong>的优化逻辑。</p><h2 id="_3-索引下推配置" tabindex="-1"><a class="header-anchor" href="#_3-索引下推配置"><span>3. 索引下推配置</span></a></h2><p>查看<strong>索引下推</strong>的配置：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>show variables like &#39;%optimizer_switch%&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果输出结果中，显示 <strong>index_condition_pushdown=on</strong>，表示开启了<strong>索引下推</strong>。 也可以手动开启<strong>索引下推</strong>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>set optimizer_switch=&quot;index_condition_pushdown=on&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭<strong>索引下推</strong>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>set optimizer_switch=&quot;index_condition_pushdown=off&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-索引下推原理剖析" tabindex="-1"><a class="header-anchor" href="#_4-索引下推原理剖析"><span>4. 索引下推原理剖析</span></a></h2><p><strong>索引下推</strong>在底层到底是怎么实现的？ 是怎么减少了回表的次数？ 又减少了存储引擎和MySQL Server层的数据传输量？ 在没有使用<strong>索引下推</strong>的情况，查询过程是这样的：</p><ol><li>存储引擎根据where条件中name索引字段，找到符合条件的3个主键ID</li><li>然后二次回表查询，根据这3个主键ID去主键索引上找到3个整行记录</li><li>把数据返回给MySQL Server层，再根据where中age条件，筛选出符合要求的一行记录</li><li>返回给客户端</li></ol><p>画两张图，就一目了然了。 下面这张图是回表查询的过程：</p><ol><li>先在联合索引上找到name=‘一灯’的3个主键ID</li><li>再根据查到3个主键ID，去主键索引上找到3行记录</li></ol><p><img src="https://javabaguwen.com/img/索引下推2.png" alt="" loading="lazy"> 下面这张图是存储引擎返回给MySQL Server端的处理过程： <img src="https://javabaguwen.com/img/索引下推3.png" alt="" loading="lazy"> 我们再看一下在使用<strong>索引下推</strong>的情况，查询过程是这样的：</p><ol><li>存储引擎根据where条件中name索引字段，找到符合条件的3行记录，再用age条件筛选出符合条件一个主键ID</li><li>然后二次回表查询，根据这一个主键ID去主键索引上找到该整行记录</li><li>把数据返回给MySQL Server层</li><li>返回给客户端</li></ol><figure><img src="https://javabaguwen.com/img/索引下推4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://javabaguwen.com/img/索引下推5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在是不是理解了<strong>索引下推</strong>的两个作用：</p><ol><li>减少回表查询的次数</li><li>减少存储引擎和MySQL Server层的数据传输量</li></ol><p>索引下推的含义就是，本来在MySQL Server层做的筛选操作，下推到存储引擎层来做。</p><h2 id="_5-索引下推应用范围" tabindex="-1"><a class="header-anchor" href="#_5-索引下推应用范围"><span>5. 索引下推应用范围</span></a></h2><ol><li>适用于InnoDB 引擎和 MyISAM 引擎的查询</li><li>适用于执行计划是range, ref, eq_ref, ref_or_null的范围查询</li><li>对于InnoDB表，仅用于非聚簇索引。索引下推的目标是减少全行读取次数，从而减少 I/O 操作。对于 InnoDB聚集索引，完整的记录已经读入InnoDB 缓冲区。在这种情况下使用索引下推 不会减少 I/O。</li><li>子查询不能使用索引下推</li><li>存储过程不能使用索引下推</li></ol><p>再附一张Explain执行计划详解图：</p><figure><img src="https://javabaguwen.com/img/索引下推6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',34)]))}const p=t(l,[["render",o],["__file","push.html.vue"]]),g=JSON.parse('{"path":"/mysql/push.html","title":"","lang":"zh-CN","frontmatter":{"description":"前面已经讲了MySQL的其他查询性能优化方式，没看过可以去了解一下： MySQL查询性能优化七种武器之索引潜水 MySQL查询性能优化七种武器之链路追踪 今天要讲的是MySQL的另一种查询性能优化方式 — 索引下推（Index Condition Pushdown，简称ICP），是MySQL5.6版本增加的特性。 1. 索引下推的作用 主要作用有两个：...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/mysql/push.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"前面已经讲了MySQL的其他查询性能优化方式，没看过可以去了解一下： MySQL查询性能优化七种武器之索引潜水 MySQL查询性能优化七种武器之链路追踪 今天要讲的是MySQL的另一种查询性能优化方式 — 索引下推（Index Condition Pushdown，简称ICP），是MySQL5.6版本增加的特性。 1. 索引下推的作用 主要作用有两个：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javabaguwen.com/img/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A81.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T06:25:28.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-04-29T06:25:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://javabaguwen.com/img/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A81.png\\",\\"https://javabaguwen.com/img/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A82.png\\",\\"https://javabaguwen.com/img/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A83.png\\",\\"https://javabaguwen.com/img/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A84.png\\",\\"https://javabaguwen.com/img/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A85.png\\",\\"https://javabaguwen.com/img/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A86.png\\"],\\"dateModified\\":\\"2025-04-29T06:25:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 索引下推的作用","slug":"_1-索引下推的作用","link":"#_1-索引下推的作用","children":[]},{"level":2,"title":"2. 案例实践","slug":"_2-案例实践","link":"#_2-案例实践","children":[]},{"level":2,"title":"3. 索引下推配置","slug":"_3-索引下推配置","link":"#_3-索引下推配置","children":[]},{"level":2,"title":"4. 索引下推原理剖析","slug":"_4-索引下推原理剖析","link":"#_4-索引下推原理剖析","children":[]},{"level":2,"title":"5. 索引下推应用范围","slug":"_5-索引下推应用范围","link":"#_5-索引下推应用范围","children":[]}],"git":{"createdTime":1745907928000,"updatedTime":1745907928000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":3.47,"words":1040},"filePathRelative":"mysql/push.md","localizedDate":"2025年4月29日","autoDesc":true}');export{p as comp,g as data};
