import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as i,o as s}from"./app-CzKZ5RuK.js";const l={};function t(o,e){return s(),n("div",null,e[0]||(e[0]=[i(`<figure><img src="https://javabaguwen.com/img/CodeReview1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-为什么需要-code-review" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要-code-review"><span>1. 为什么需要 Code Review？</span></a></h2><p>Code Review（代码评审）是日常开发中必不可少的步骤，但是一些开发者重视不够，没有体验到Code Review的好处。觉得自己发起的Code Review同事没有认真倾听，同事发起的Code Review又在耽误自己的开发时间。今天一灯就跟一起总结一下Code Review的好处。</p><h3 id="_1-1-统一代码风格" tabindex="-1"><a class="header-anchor" href="#_1-1-统一代码风格"><span>1.1 统一代码风格</span></a></h3><p>团队内代码风格的统一，可以增加代码的可读性，便于继任者快速上手。</p><p>你看到下面的换行，是什么感觉？</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 不规范的换行
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-提前发现bug" tabindex="-1"><a class="header-anchor" href="#_1-2-提前发现bug"><span>1.2 提前发现bug</span></a></h3><p>每个人功能是有限的，不可能考虑的很全面，对业务的理解也不同。其他人可以站在另一个角度，帮助潜在的bug，规避线上问题。</p><h3 id="_1-3-提高代码质量" tabindex="-1"><a class="header-anchor" href="#_1-3-提高代码质量"><span>1.3 提高代码质量</span></a></h3><p>有些开发者以完成任务为目的，完全不考虑架构风格，老子就是一把梭。接口层直接调用到数据层，代码调用混乱，重复编写。一个方法几百行，一个类几千行，写完第二天自己也看不懂了。</p><p>作为程序员还是需要对代码质量有追求的，很多招聘要求面试者有代码洁癖。雷军说自己写的代码像诗一样优美，咱们普通开发者也要向大佬看齐。</p><p>有些经典书籍有助于提升代码质量，像是《重构：改善既有代码的设计》、《代码整洁之道》、《代码大全》等。</p><h3 id="_1-4-促进知识共享" tabindex="-1"><a class="header-anchor" href="#_1-4-促进知识共享"><span>1.4 促进知识共享</span></a></h3><p>每次做Code Review，都是在做知识分享、交流学习。梳理自己实现方案，学习别人的架构风格、业务思路，对自己的技术和业务理解也是一种提高。也有助于培养团队内的技术氛围。</p><h3 id="_1-5-增加业务学习" tabindex="-1"><a class="header-anchor" href="#_1-5-增加业务学习"><span>1.5 增加业务学习</span></a></h3><p>了解业务上增加了什么新功能，对现有业务的影响是什么，更有助于团队成员之间沟通与协作。</p><h2 id="_2-code-review-基本原则" tabindex="-1"><a class="header-anchor" href="#_2-code-review-基本原则"><span>2. Code Review 基本原则</span></a></h2><p>在进行 Code Review 时，应遵循以下基本原则，以确保过程的高效和顺利：</p><h3 id="_2-1-以交流学习为目的" tabindex="-1"><a class="header-anchor" href="#_2-1-以交流学习为目的"><span>2.1 以交流学习为目的</span></a></h3><p>帮助同事做Code Review的目的是互相交流学习，而不是抓住同事的错误不放，炫耀自己的技术有多强。团队成员之间应该保持开放和积极的态度，互相学习和进步。</p><h3 id="_2-2-保持客观和专业" tabindex="-1"><a class="header-anchor" href="#_2-2-保持客观和专业"><span>2.2 保持客观和专业</span></a></h3><p>保持客观和专业的态度，评审代码的质量和符合规范的程度，而不是评价提交者本人。指出任何错误的时候，都要在对方可接受的范围内。</p><h3 id="_2-3-及时反馈结果" tabindex="-1"><a class="header-anchor" href="#_2-3-及时反馈结果"><span>2.3 及时反馈结果</span></a></h3><p>Code Review 应该是一个及时和持续的过程。审查者应在收到代码提交后尽快进行审查，以避免延误项目进度。同时，提交者在收到反馈后应及时进行修改和回应，以确保问题得到及时解决。审查者在确认修改后，应及时批准代码合并，以保持开发流程的高效运转。</p><h2 id="_3-code-review-时机" tabindex="-1"><a class="header-anchor" href="#_3-code-review-时机"><span>3. Code Review 时机</span></a></h2><p>发起 Code Review 的时机，最好是在<strong>需求提测前</strong>，这样可以保证Review后做的代码变更，可以被测试覆盖到。</p><p>有些开发者喜欢在上线前发起 Code Review ，这样是不对的。谁敢给你做 Code Review ，给你提了审核建议，你也没办法修改，马上就要上线了。</p><h2 id="_4-code-review-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-code-review-注意事项"><span>4.Code Review 注意事项</span></a></h2><p>在进行 Code Review 时候，审核者往往不知道从哪下手。可以关注以下几个方面，以提高审查的效果和质量。</p><h3 id="_4-1-关注代码风格" tabindex="-1"><a class="header-anchor" href="#_4-1-关注代码风格"><span>4.1 关注代码风格</span></a></h3><p>团队内部最好遵守相同的代码规范，比如：变量命名、常量定义、枚举值定义、代码格式、日期格式化工具、异常处理、注释规范、传参和响应数据包装、建表规约等，参考《阿里Java开发手册》。</p><h3 id="_4-2-单元测试要求" tabindex="-1"><a class="header-anchor" href="#_4-2-单元测试要求"><span>4.2 单元测试要求</span></a></h3><p>单元测试是开发者最容易忽略的问题，通常要求新增代码的单测覆盖率至少达到70%。写好单元测试用例可以帮助开发者提高代码质量，减少低级bug，减少调试时间。</p><h3 id="_4-3-符合架构规范" tabindex="-1"><a class="header-anchor" href="#_4-3-符合架构规范"><span>4.3 符合架构规范</span></a></h3><p>代码是否符合常见的架构规范，比如：单一职责原则、开闭原则、是否存在跨层调用、是否有重复逻辑、领域边界划分是否合理等。</p><figure><img src="https://javabaguwen.com/img/CodeReview2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-4-代码健壮性" tabindex="-1"><a class="header-anchor" href="#_4-4-代码健壮性"><span>4.4 代码健壮性</span></a></h3><p>通常只有20%的代码用来实现核心逻辑，而80%的代码用来保证程序安全。</p><p>实现了核心逻辑之后，代码的健壮性也是一个不可忽略的指标。可以关注以下几个方面：</p><ol><li>是否有判空和异常传参校验</li><li>逻辑边界是否完整</li><li>是否存在线程安全问题</li><li>是否存在并发调用问题</li><li>是否需要支持幂等</li><li>是否存在内存泄露风险</li><li>是否有资源边界限制</li><li>是否存在数据一致性问题</li><li>是否需要增加限流、熔断、降级等保护机制</li><li>是否需要兼容旧逻辑、旧版本</li></ol><h3 id="_4-5-接口性能问题" tabindex="-1"><a class="header-anchor" href="#_4-5-接口性能问题"><span>4.5 接口性能问题</span></a></h3><p>接口性能也是需要重点关注的问题，可以关注以下几个方面：</p><ol><li>是否存在循环调用（接口、数据库），能否改成批量处理</li><li>调用外部接口是否设置合理的超时时间</li><li>对外开放的接口，是否预估调用量？是否有保护机制（限流、熔断、降级）？</li><li>是否需要增加本地缓存、分布式缓存、多线程、消息队列</li><li>打印日志是否过多</li></ol><h3 id="_4-6-数据安全问题" tabindex="-1"><a class="header-anchor" href="#_4-6-数据安全问题"><span>4.6 数据安全问题</span></a></h3><p>表现形式为：用户可以访问或者操作不属于自己管理范围内的接口或者接口的数据。</p><p>需要关注接口是否需要登录态、参数签名的校验，是否有横向越权和纵向越权的问题，对外暴露的数据需要脱敏处理。</p>`,47)]))}const r=a(l,[["render",t],["__file","CodeReview.html.vue"]]),c=JSON.parse('{"path":"/tool/CodeReview.html","title":"","lang":"zh-CN","frontmatter":{"description":"1. 为什么需要 Code Review？ Code Review（代码评审）是日常开发中必不可少的步骤，但是一些开发者重视不够，没有体验到Code Review的好处。觉得自己发起的Code Review同事没有认真倾听，同事发起的Code Review又在耽误自己的开发时间。今天一灯就跟一起总结一下Code Review的好处。 1.1 统一代码风...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/tool/CodeReview.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"1. 为什么需要 Code Review？ Code Review（代码评审）是日常开发中必不可少的步骤，但是一些开发者重视不够，没有体验到Code Review的好处。觉得自己发起的Code Review同事没有认真倾听，同事发起的Code Review又在耽误自己的开发时间。今天一灯就跟一起总结一下Code Review的好处。 1.1 统一代码风..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javabaguwen.com/img/CodeReview1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T06:25:28.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-04-29T06:25:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://javabaguwen.com/img/CodeReview1.png\\",\\"https://javabaguwen.com/img/CodeReview2.png\\"],\\"dateModified\\":\\"2025-04-29T06:25:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 为什么需要 Code Review？","slug":"_1-为什么需要-code-review","link":"#_1-为什么需要-code-review","children":[{"level":3,"title":"1.1 统一代码风格","slug":"_1-1-统一代码风格","link":"#_1-1-统一代码风格","children":[]},{"level":3,"title":"1.2 提前发现bug","slug":"_1-2-提前发现bug","link":"#_1-2-提前发现bug","children":[]},{"level":3,"title":"1.3 提高代码质量","slug":"_1-3-提高代码质量","link":"#_1-3-提高代码质量","children":[]},{"level":3,"title":"1.4 促进知识共享","slug":"_1-4-促进知识共享","link":"#_1-4-促进知识共享","children":[]},{"level":3,"title":"1.5 增加业务学习","slug":"_1-5-增加业务学习","link":"#_1-5-增加业务学习","children":[]}]},{"level":2,"title":"2. Code Review 基本原则","slug":"_2-code-review-基本原则","link":"#_2-code-review-基本原则","children":[{"level":3,"title":"2.1 以交流学习为目的","slug":"_2-1-以交流学习为目的","link":"#_2-1-以交流学习为目的","children":[]},{"level":3,"title":"2.2 保持客观和专业","slug":"_2-2-保持客观和专业","link":"#_2-2-保持客观和专业","children":[]},{"level":3,"title":"2.3 及时反馈结果","slug":"_2-3-及时反馈结果","link":"#_2-3-及时反馈结果","children":[]}]},{"level":2,"title":"3. Code Review 时机","slug":"_3-code-review-时机","link":"#_3-code-review-时机","children":[]},{"level":2,"title":"4.Code Review 注意事项","slug":"_4-code-review-注意事项","link":"#_4-code-review-注意事项","children":[{"level":3,"title":"4.1 关注代码风格","slug":"_4-1-关注代码风格","link":"#_4-1-关注代码风格","children":[]},{"level":3,"title":"4.2 单元测试要求","slug":"_4-2-单元测试要求","link":"#_4-2-单元测试要求","children":[]},{"level":3,"title":"4.3 符合架构规范","slug":"_4-3-符合架构规范","link":"#_4-3-符合架构规范","children":[]},{"level":3,"title":"4.4 代码健壮性","slug":"_4-4-代码健壮性","link":"#_4-4-代码健壮性","children":[]},{"level":3,"title":"4.5 接口性能问题","slug":"_4-5-接口性能问题","link":"#_4-5-接口性能问题","children":[]},{"level":3,"title":"4.6 数据安全问题","slug":"_4-6-数据安全问题","link":"#_4-6-数据安全问题","children":[]}]}],"git":{"createdTime":1745907928000,"updatedTime":1745907928000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":5.26,"words":1579},"filePathRelative":"tool/CodeReview.md","localizedDate":"2025年4月29日","autoDesc":true}');export{r as comp,c as data};
