import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e,o as l}from"./app-CzKZ5RuK.js";const t={};function i(p,a){return l(),s("div",null,a[0]||(a[0]=[e('<p>上篇文章讲到使用MySQL的Explain命令可以分析SQL性能瓶颈，优化SQL查询，以及查看是否用到了索引。 我们都知道创建索引可以提高查询效率，但是具体该怎么创建索引？ 哪些字段适合创建索引？ 哪些字段又不适合创建索引？ 本文跟大家一块学习一下如何创建合适数据库索引。</p><h2 id="_1-索引分类" tabindex="-1"><a class="header-anchor" href="#_1-索引分类"><span>1. 索引分类</span></a></h2><p>在创建索引之前了解一下MySQL有哪些索引，然后我们才能选择合适的索引。 常见的索引有，普通索引、唯一索引、主键索引、联合索引、全文索引等。</p><h3 id="普通索引" tabindex="-1"><a class="header-anchor" href="#普通索引"><span>普通索引</span></a></h3><p>普通索引就是最基本的索引，没有任何限制。 可以使用命令创建普通索引：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table_name<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> index_name <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>column<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="唯一索引" tabindex="-1"><a class="header-anchor" href="#唯一索引"><span>唯一索引</span></a></h3><p>与普通索引不同，唯一索引的列值必须唯一，允许为null。 创建方式是这样的：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table_name<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> index_name <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>column<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="主键索引" tabindex="-1"><a class="header-anchor" href="#主键索引"><span>主键索引</span></a></h3><p>主键索引是一种特殊的唯一索引，并且一张表只有一个主键，不允许为null。 创建方式是这样的：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table_name<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>column<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="联合索引" tabindex="-1"><a class="header-anchor" href="#联合索引"><span>联合索引</span></a></h3><p>联合索引是同时在多个字段上创建索引，查询效率更高。 创建方式是这样的：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table_name<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> index_name <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>column1<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>column2<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>column3<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="全文索引" tabindex="-1"><a class="header-anchor" href="#全文索引"><span>全文索引</span></a></h3><p>全文索引主要用来匹配字符串文本中关键字。 当需要字符串中是否包含关键字的时候，我们一般用like，如果是以%开头的时候，则无法用到索引，这时候就可以使用全文索引了。 创建方式是这样的：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table_name<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> FULLTEXT <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>column<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="索引底层实现分类" tabindex="-1"><a class="header-anchor" href="#索引底层实现分类"><span>索引底层实现分类</span></a></h2><h3 id="哈希索引" tabindex="-1"><a class="header-anchor" href="#哈希索引"><span>哈希索引</span></a></h3><p>MEMORY 存储引擎默认使用哈希索引，哈希索引的实现原理是：</p><ul><li>哈希表结构：哈希索引通过一个哈希函数将键值映射到一个哈希表的桶中。每个桶包含指向数据记录的指针。</li><li>无序存储：哈希索引不维护数据的顺序，只是简单地将键值通过哈希函数映射到位置上。</li></ul><p>哈希索引的适用场景：</p><ul><li>等值查询：哈希索引特别适用于等值查询（如=、!=或者IN操作），因为哈希函数可以快速定位到目标桶。</li><li>不支持范围查询：由于哈希表不维护数据的顺序，无法高效地进行范围查询（如BETWEEN、&gt;、&lt;操作）。</li></ul><h3 id="b-树索引" tabindex="-1"><a class="header-anchor" href="#b-树索引"><span>B+树索引</span></a></h3><p>InnoDB和MyISAM默认都是使用B+树索引。 B+树索引实现原理：</p><ul><li>树结构：B+树是一种平衡树，其每个节点包含指向子节点的指针和键值。叶子节点包含实际的数据记录或指向数据记录的指针。</li><li>有序存储：B+树索引维护数据的顺序，支持范围查询和排序操作。</li></ul><p>B+树索引适用场景：</p><ul><li>范围查询和排序：B+树索引支持高效的范围查询和排序操作，适用于需要进行大量范围扫描的应用场景。</li><li>等值查询：虽然等值查询的性能不如哈希索引，但在B+树上进行等值查询的性能也非常高。</li><li>查找速度适中：B+树的查找、插入和删除操作的时间复杂度为O(log n)，适中但稳定。</li><li>维护成本高：由于需要维护树的平衡性，B+树索引的插入和删除操作会涉及节点的分裂和合并，维护成本较高。</li></ul><h2 id="索引实现原理" tabindex="-1"><a class="header-anchor" href="#索引实现原理"><span>索引实现原理</span></a></h2><p>要知道MySQL索引底层数据结构为啥用B+树？ 为了保证数据安全性，一般都是把数据存储在磁盘里面。当我们需要查询数据的时候，需要读取磁盘，就产生了磁盘IO，相比较内存操作，磁盘IO读取速度是非常慢的。 由于所需数据可能在磁盘并不是连续的，一次数据查询就需要多次磁盘IO，所以就需要我们设计的索引数据结构尽可能的减少磁盘IO次数。</p><p>再了解一下这几种二叉树的特性，以及优缺点，就知道哪种数据结构更适合建索引。</p><h3 id="二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二叉搜索树"><span>二叉搜索树</span></a></h3><p><strong>什么是二叉搜索树：</strong></p><ol><li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>左、右子树也分别为二叉查找树； <img src="https://javabaguwen.com/img/二叉查找树.png" alt="image-1.png" loading="lazy"></li></ol><p>二叉搜索树查找数据的时间复杂度是O(logN)，如图所示，最多查找3次就可以查到所需数据。 理想很丰满，现实很骨感。极端情况下，二叉查找树可能退化成线性链表。</p><p>链表的查找时间复杂度是O(N)，这时候最多需要7次才能查到所需数据。</p><p>该怎么办呢？于是我们就想到了给二叉树加一些限制条件，平衡一下左右子树，然后就引申出了很多平衡树：平衡二叉查找树、红黑树、B树、B+树。咱们分别说一下这几种树的优缺点，看哪种树最适合做索引。</p><h3 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树"><span>红黑树</span></a></h3><p><strong>什么是红黑树？</strong></p><ol><li>结点是红色或黑色</li><li>根结点是黑色</li><li>所有叶子都是黑色（叶子是NIL结点）</li><li>每个红色结点的两个子结点都是黑色（从每个叶子到根的所有路径上不能有两个连续的红色结点）</li><li>从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点 <img src="https://javabaguwen.com/img/红黑树.png" alt="image-2.png" loading="lazy"></li></ol><p>看蒙了没有？</p><p>这么多复杂的规则，就是为了保证从根节点到叶子节点的最长路径不超过最短路径的2倍。</p><p>当插入节点或者删除节点的时候，为了满足红黑树规则，可能需要变色和旋转，这是一个复杂且耗时的过程。</p><p><strong>红黑树的优点：</strong></p><ul><li>限制了左右子树的树高，不会相差过大。</li></ul><p><strong>缺点：</strong></p><ul><li>规则复杂，一般人想要弄懂这玩意儿，就已经很费劲了，更别说使用了。</li></ul><h3 id="b树" tabindex="-1"><a class="header-anchor" href="#b树"><span>B树</span></a></h3><p><strong>什么是B树？</strong></p><p>我们知道，树的高度越高，查找次数越多，也就是磁盘IO次数越多，耗时越长，我们能不能想办法降低树的高度，把二叉树变成N叉树？于是B树就来了。</p><p><strong>对于一个m阶的B树：</strong></p><ol><li>根节点至少有2个子节点</li><li>每个中间节点都包含k-1个元素和k个子节点，其中 m/2 &lt;= k &lt;= m</li><li>每个叶子节点都包含k-1个元素，其中 m/2 &lt;= k &lt;= m</li><li>中间节点的元素按照升序排列</li><li>所有的叶子结点都位于同一层 <img src="https://javabaguwen.com/img/B树.png" alt="image-1.png" loading="lazy"></li></ol><p>解释说明：</p><ol><li>根节点（8）有两个子节点，左子节点（3 5）和右子节点（11 15）。</li><li>左子节点（3 5）中有2个元素和3个子节点。</li><li>元素是3和5，按照升序排列。</li><li>子节点是（1 2）、（4）、（6 7），</li><li>而（1 2）中元素小于3，（4）中的元素在3和5中间，（6 7）的元素大于5，符合B树特征。</li></ol><p>B树这样的设计有哪些优点呢？</p><p>高度更低，每个节点含有多个元素，查找的时候一次可以把一个节点中的所有元素加载到内存中作比较，两种改进都大大减少了磁盘IO次数。</p><h3 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树"><span>B+树</span></a></h3><p><strong>什么是B+树？</strong></p><p>相比较B树，B+树又做了如下约定：</p><ol><li>有k个子节点的中间节点就有k个元素（B树中是k-1个元素），也就是子节点数量 = 元素数量。 每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。</li><li>所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。</li><li>非叶子节点只保存索引，不保存数据。（B树中两者都保存）</li><li>叶子结点包含了全部元素的信息，并且叶子结点按照元素大小组成有序列表。 <img src="https://javabaguwen.com/img/B%2B树.png" alt="image-1.png" loading="lazy"></li></ol><p>B+树这样设计有什么优点呢？</p><ol><li>每个节点存储的元素更多，看起来比B树更矮胖，导致磁盘IO次数更少。</li><li>非叶子节点不存储数据，只存储索引，叶子节点存储全部数据。 这样设计导致每次查找都会查到叶子节点，效率更稳定，便于做性能优化。</li><li>叶子节点之间使用有序链表连接。 这样设计方便范围查找，只需要遍历链表中相邻元素即可，不再需要二次遍历二叉树。</li></ol><p>很明显，B树和B+树就是为了文件检索系统设计的，更适合做索引结构。</p><h2 id="_2-哪些字段适合创建索引" tabindex="-1"><a class="header-anchor" href="#_2-哪些字段适合创建索引"><span>2. 哪些字段适合创建索引？</span></a></h2><p>我总结了有以下几条：</p><ol><li><strong>频繁查询的字段适合创建索引</strong> 一张表的字段总会有冷热之分，很明显那些频繁使用的字段更适合为它创建索引。</li><li><strong>在where和on条件出现的字段优先创建索引</strong> 为什么不是在select后面出现的字段优先创建索引？ 因为查询SQL会先匹配on和where条件的字段，具体的匹配顺序是这样的：</li></ol><blockquote><p>from &gt; on &gt; join &gt; where &gt; group by &gt; having &gt; select &gt; distinct &gt; order by &gt; limit</p></blockquote><ol start="3"><li><strong>区分度高的字段适合创建索引</strong> 比如对于一张用户表来说，生日比性别的区分度更高，更适合创建索引。 可以使用下面的方式手动统计一下，每个字段的区分度，值越大，区分度越高：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> \n    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> birthday<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> gender<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> \n<span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/创建MySQL索引1.png" alt="image-20220730230017044.png" loading="lazy"> 对于已经创建好的索引，我们还可以使用MySQL命令查看每个索引的区分度排名： <img src="https://javabaguwen.com/img/创建MySQL索引2.png" alt="image-20220730230358758.png" loading="lazy"> 图中<strong>Cardinality</strong>列表示索引的区分度排名，也被称为基数。 4. <strong>有序的字段适合创建索引</strong> 有序的字段在插入数据库的过程中，仍能保持B+树的索引结构，不需要频繁更新索引文件，性能更好。</p><h2 id="_3-哪些字段不合适创建索引" tabindex="-1"><a class="header-anchor" href="#_3-哪些字段不合适创建索引"><span>3. 哪些字段不合适创建索引？</span></a></h2><p>说完哪些字段适合创建索引，就有不适合创建索引的的字段。</p><ol><li><strong>区分度低的字段不适合创建索引。</strong> 刚才说了用户表中性别的区分度较低，不如生日字段适合创建索引。</li><li><strong>频繁更新的字段不适合创建索引</strong> 更新字段的过程中，需要维护B+树结构，会频繁更新索引文件，降低SQL性能。</li><li><strong>过长的字段不适合创建索引</strong> 过长的字段会占用更多的空间，不适合创建索引。</li><li><strong>无序的字段不适合创建索引</strong> 无序的字段在插入数据库的过程中，为了维护B+树索引结构，需要频繁更新索引文件，性能较差。</li></ol><h2 id="_4-创建索引的其他注意事项" tabindex="-1"><a class="header-anchor" href="#_4-创建索引的其他注意事项"><span>4. 创建索引的其他注意事项</span></a></h2><ol><li>优先使用联合索引 查询的时候，联合索引比普通索引能更精准的匹配到所需数据。 <img src="https://javabaguwen.com/img/创建MySQL索引3.png" alt="image-20220730232213888.png" loading="lazy"> 图中就是在（age，name）两个字段上建立的联合索引，在B+树中的存储结构。 可以看出，是先age排序，age相等的数据，再按name排序。 对于这条查询SQL：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> age<span class="token punctuation">,</span>name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> age<span class="token operator">=</span><span class="token number">18</span> <span class="token operator">and</span> name<span class="token operator">=</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>联合索引只需一次就可以查到所需数据，如果我们只在age字段上建立索引，会先匹配到age=18的三条数据，然后再逐个遍历，效率更差，所以平时应该优先使用联合索引。 2. <strong>使用联合索引时，区分度高的字段放前面</strong> 这样可以减少查询次数，更快地匹配到所需数据。 3. <strong>过长字符串可以使用前缀索引</strong> 比如在匹配用户地址的时候，如果乡镇已经能区分大部分用户了，就没必要精确到街道小区了。 创建普通索引的时候，指定索引长度，就可以创建前缀索引了。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_address <span class="token punctuation">(</span>address<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li><strong>值唯一的字段，使用唯一索引</strong> 使用唯一索引，可以避免程序bug导致产生重复数据。</li><li><strong>排序和分组字段也尽量创建索引</strong> 在order by和group by中的字段也尽量创建索引，避免使用文件排序，可以使用索引排序提供性能。</li><li><strong>避免创建过多索引</strong> 索引好用，适度即可。创建过多的索引，会占用更多存储空间，也会严重影响SQL性能，每次更新SQL，都需要更新大量索引文件，得不偿失。</li></ol><h2 id="索引失效场景" tabindex="-1"><a class="header-anchor" href="#索引失效场景"><span>索引失效场景</span></a></h2><p>工作中，经常遇到这样的问题，我明明在MySQL表上面加了索引，为什么执行SQL查询的时候却没有用到索引？ 同一条SQL有时候查询用到了索引，有时候却没用到索引，这是咋回事？</p><p>原因可能是索引失效了，失效的原因有以下几种，看你有没有踩过类似的坑？</p><ol><li>数据准备： 有这么一张用户表，在name字段上建个索引：</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CREATE TABLE `user` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,\n  `name` varchar(255) DEFAULT NULL COMMENT &#39;姓名&#39;,\n  `age` int DEFAULT NULL COMMENT &#39;年龄&#39;,\n  PRIMARY KEY (`id`),\n  KEY `idx_name` (`name`)\n) ENGINE=InnoDB COMMENT=&#39;用户表&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Explain详解： 想要查看一条SQL是否用到索引？用到了哪种类型的索引？</li></ol><p>可以使用<strong>explain</strong>关键字，查看SQL执行计划。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://javabaguwen.com/img/explain详解.png" alt="image-20220629230715808.png" loading="lazy"> 可以看到type=const，表示使用了主键索引。 explain的所有type类型如下： <img src="https://javabaguwen.com/img/explain-type类型.png" alt="image-20220630000000083.png" loading="lazy"></p><ol start="3"><li>失效原因</li></ol><h3 id="_1-数据类型隐式转换" tabindex="-1"><a class="header-anchor" href="#_1-数据类型隐式转换"><span>1. 数据类型隐式转换</span></a></h3><p>name字段是varchar类型，如果我们使用数据类型查询，就会产生数据类型转换，虽然不会报错，但是无法用到索引。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">&#39;一灯&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/索引隐式转换1.png" alt="image-20220629231442732.png" tabindex="0" loading="lazy"><figcaption>image-20220629231442732.png</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/索引隐式转换2.png" alt="image-20220629231513592.png" tabindex="0" loading="lazy"><figcaption>image-20220629231513592.png</figcaption></figure><h3 id="_2-模糊查询-like-以-开头" tabindex="-1"><a class="header-anchor" href="#_2-模糊查询-like-以-开头"><span>2. 模糊查询 like 以%开头</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;张%&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/like1.png" alt="image-20220629231905411.png" tabindex="0" loading="lazy"><figcaption>image-20220629231905411.png</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;%张&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/like2.png" alt="image-20220629231938893.png" tabindex="0" loading="lazy"><figcaption>image-20220629231938893.png</figcaption></figure><h3 id="_3-or前后没有同时使用索引" tabindex="-1"><a class="header-anchor" href="#_3-or前后没有同时使用索引"><span>3. or前后没有同时使用索引</span></a></h3><p>虽然name字段上加了索引，但是age字段没有索引，使用or的时候会全表扫描。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># or前后没有同时使用索引，导致全表扫描</span>\n<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">&#39;一灯&#39;</span> <span class="token operator">or</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/失效or.png" alt="image-20220629232130791.png" tabindex="0" loading="lazy"><figcaption>image-20220629232130791.png</figcaption></figure><h3 id="_4-联合索引-没有使用第一列索引" tabindex="-1"><a class="header-anchor" href="#_4-联合索引-没有使用第一列索引"><span>4. 联合索引，没有使用第一列索引</span></a></h3><p>如果我们在（name，age）上，建立联合索引，但是查询条件中只用到了age字段，也是无法用到索引的。 使用联合索引，必须遵循最左匹配原则，首先使用第一列字段，然后使用第二列字段。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CREATE TABLE `user` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,\n  `name` varchar(255) DEFAULT NULL COMMENT &#39;姓名&#39;,\n  `age` int DEFAULT NULL COMMENT &#39;年龄&#39;,\n  PRIMARY KEY (`id`),\n  KEY `idx_name_age` (`name`,`age`)\n) ENGINE=InnoDB COMMENT=&#39;用户表&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/失效联合索引.png" alt="image-20220630000609202.png" tabindex="0" loading="lazy"><figcaption>image-20220630000609202.png</figcaption></figure><h3 id="_5-在索引字段进行计算操作" tabindex="-1"><a class="header-anchor" href="#_5-在索引字段进行计算操作"><span>5. 在索引字段进行计算操作</span></a></h3><p>如果我们在索引列进行了计算操作，也是无法用到索引的。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 在主键索引上进行计算操作，导致全表扫描</span>\n<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://javabaguwen.com/img/失效计算.png" alt="image-20220629233208133.png" tabindex="0" loading="lazy"><figcaption>image-20220629233208133.png</figcaption></figure><h3 id="_6-在索引字段字段上使用函数" tabindex="-1"><a class="header-anchor" href="#_6-在索引字段字段上使用函数"><span>6. 在索引字段字段上使用函数</span></a></h3><p>如果我们在索引列使用函数，也是无法用到索引的。 <img src="https://javabaguwen.com/img/失效函数.png" alt="image-20220629233447426.png" loading="lazy"></p><h3 id="_7-优化器选错索引" tabindex="-1"><a class="header-anchor" href="#_7-优化器选错索引"><span>7. 优化器选错索引</span></a></h3><p>同一条SQL有时候查询用到了索引，有时候却没用到索引，这是咋回事？ 这可能是优化器选择的结果，会根据表中数据量选择是否使用索引。 <img src="https://javabaguwen.com/img/失效选错.png" alt="image-20220629234641204.png" loading="lazy"> 当表中大部分name都是一灯，这时候用name=&#39;一灯&#39;做查询，还会不会用到索引呢？ 索引优化器会认为，用索引还不如全表扫描来得快，干脆不用索引了。 <img src="https://javabaguwen.com/img/失效选错2.png" alt="image-20220629234900354.png" loading="lazy"> 当然我们认为优化器优化的不对，也可以使用<strong>force index</strong>强制使用索引。 <img src="https://javabaguwen.com/img/失效选错3.png" alt="image-20220629235137298.png" loading="lazy"></p>',117)]))}const r=n(t,[["render",i],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/mysql/","title":"","lang":"zh-CN","frontmatter":{"description":"上篇文章讲到使用MySQL的Explain命令可以分析SQL性能瓶颈，优化SQL查询，以及查看是否用到了索引。 我们都知道创建索引可以提高查询效率，但是具体该怎么创建索引？ 哪些字段适合创建索引？ 哪些字段又不适合创建索引？ 本文跟大家一块学习一下如何创建合适数据库索引。 1. 索引分类 在创建索引之前了解一下MySQL有哪些索引，然后我们才能选择合适...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/mysql/"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"上篇文章讲到使用MySQL的Explain命令可以分析SQL性能瓶颈，优化SQL查询，以及查看是否用到了索引。 我们都知道创建索引可以提高查询效率，但是具体该怎么创建索引？ 哪些字段适合创建索引？ 哪些字段又不适合创建索引？ 本文跟大家一块学习一下如何创建合适数据库索引。 1. 索引分类 在创建索引之前了解一下MySQL有哪些索引，然后我们才能选择合适..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javabaguwen.com/img/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T06:25:28.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-04-29T06:25:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://javabaguwen.com/img/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91.png\\",\\"https://javabaguwen.com/img/%E7%BA%A2%E9%BB%91%E6%A0%91.png\\",\\"https://javabaguwen.com/img/B%E6%A0%91.png\\",\\"https://javabaguwen.com/img/B%2B%E6%A0%91.png\\",\\"https://javabaguwen.com/img/%E5%88%9B%E5%BB%BAMySQL%E7%B4%A2%E5%BC%951.png\\",\\"https://javabaguwen.com/img/%E5%88%9B%E5%BB%BAMySQL%E7%B4%A2%E5%BC%952.png\\",\\"https://javabaguwen.com/img/%E5%88%9B%E5%BB%BAMySQL%E7%B4%A2%E5%BC%953.png\\",\\"https://javabaguwen.com/img/explain%E8%AF%A6%E8%A7%A3.png\\",\\"https://javabaguwen.com/img/explain-type%E7%B1%BB%E5%9E%8B.png\\",\\"https://javabaguwen.com/img/%E7%B4%A2%E5%BC%95%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A21.png\\",\\"https://javabaguwen.com/img/%E7%B4%A2%E5%BC%95%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A22.png\\",\\"https://javabaguwen.com/img/like1.png\\",\\"https://javabaguwen.com/img/like2.png\\",\\"https://javabaguwen.com/img/%E5%A4%B1%E6%95%88or.png\\",\\"https://javabaguwen.com/img/%E5%A4%B1%E6%95%88%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95.png\\",\\"https://javabaguwen.com/img/%E5%A4%B1%E6%95%88%E8%AE%A1%E7%AE%97.png\\",\\"https://javabaguwen.com/img/%E5%A4%B1%E6%95%88%E5%87%BD%E6%95%B0.png\\",\\"https://javabaguwen.com/img/%E5%A4%B1%E6%95%88%E9%80%89%E9%94%99.png\\",\\"https://javabaguwen.com/img/%E5%A4%B1%E6%95%88%E9%80%89%E9%94%992.png\\",\\"https://javabaguwen.com/img/%E5%A4%B1%E6%95%88%E9%80%89%E9%94%993.png\\"],\\"dateModified\\":\\"2025-04-29T06:25:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 索引分类","slug":"_1-索引分类","link":"#_1-索引分类","children":[{"level":3,"title":"普通索引","slug":"普通索引","link":"#普通索引","children":[]},{"level":3,"title":"唯一索引","slug":"唯一索引","link":"#唯一索引","children":[]},{"level":3,"title":"主键索引","slug":"主键索引","link":"#主键索引","children":[]},{"level":3,"title":"联合索引","slug":"联合索引","link":"#联合索引","children":[]},{"level":3,"title":"全文索引","slug":"全文索引","link":"#全文索引","children":[]}]},{"level":2,"title":"索引底层实现分类","slug":"索引底层实现分类","link":"#索引底层实现分类","children":[{"level":3,"title":"哈希索引","slug":"哈希索引","link":"#哈希索引","children":[]},{"level":3,"title":"B+树索引","slug":"b-树索引","link":"#b-树索引","children":[]}]},{"level":2,"title":"索引实现原理","slug":"索引实现原理","link":"#索引实现原理","children":[{"level":3,"title":"二叉搜索树","slug":"二叉搜索树","link":"#二叉搜索树","children":[]},{"level":3,"title":"红黑树","slug":"红黑树","link":"#红黑树","children":[]},{"level":3,"title":"B树","slug":"b树","link":"#b树","children":[]},{"level":3,"title":"B+树","slug":"b-树","link":"#b-树","children":[]}]},{"level":2,"title":"2. 哪些字段适合创建索引？","slug":"_2-哪些字段适合创建索引","link":"#_2-哪些字段适合创建索引","children":[]},{"level":2,"title":"3. 哪些字段不合适创建索引？","slug":"_3-哪些字段不合适创建索引","link":"#_3-哪些字段不合适创建索引","children":[]},{"level":2,"title":"4. 创建索引的其他注意事项","slug":"_4-创建索引的其他注意事项","link":"#_4-创建索引的其他注意事项","children":[]},{"level":2,"title":"索引失效场景","slug":"索引失效场景","link":"#索引失效场景","children":[{"level":3,"title":"1. 数据类型隐式转换","slug":"_1-数据类型隐式转换","link":"#_1-数据类型隐式转换","children":[]},{"level":3,"title":"2. 模糊查询 like 以%开头","slug":"_2-模糊查询-like-以-开头","link":"#_2-模糊查询-like-以-开头","children":[]},{"level":3,"title":"3. or前后没有同时使用索引","slug":"_3-or前后没有同时使用索引","link":"#_3-or前后没有同时使用索引","children":[]},{"level":3,"title":"4. 联合索引，没有使用第一列索引","slug":"_4-联合索引-没有使用第一列索引","link":"#_4-联合索引-没有使用第一列索引","children":[]},{"level":3,"title":"5. 在索引字段进行计算操作","slug":"_5-在索引字段进行计算操作","link":"#_5-在索引字段进行计算操作","children":[]},{"level":3,"title":"6. 在索引字段字段上使用函数","slug":"_6-在索引字段字段上使用函数","link":"#_6-在索引字段字段上使用函数","children":[]},{"level":3,"title":"7. 优化器选错索引","slug":"_7-优化器选错索引","link":"#_7-优化器选错索引","children":[]}]}],"git":{"createdTime":1745907928000,"updatedTime":1745907928000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":14.54,"words":4363},"filePathRelative":"mysql/index.md","localizedDate":"2025年4月29日","autoDesc":true}');export{r as comp,d as data};
