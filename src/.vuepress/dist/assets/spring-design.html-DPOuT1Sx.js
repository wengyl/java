import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,e as r,o as i}from"./app-CzKZ5RuK.js";const t={};function a(s,n){return i(),o("div",null,n[0]||(n[0]=[r('<h2 id="深度解析-spring-框架中的设计模式" tabindex="-1"><a class="header-anchor" href="#深度解析-spring-框架中的设计模式"><span>深度解析 Spring 框架中的设计模式</span></a></h2><h3 id="引言-设计模式与spring框架的珠联璧合" tabindex="-1"><a class="header-anchor" href="#引言-设计模式与spring框架的珠联璧合"><span>引言：设计模式与Spring框架的珠联璧合</span></a></h3><p>Spring框架是Java企业级应用开发的事实标准。它提供了一站式的解决方案，涵盖了依赖注入、AOP、事务管理、MVC、数据访问等众多领域。然而，Spring的伟大不仅仅在于其功能的全面，更在于其底层设计的精巧与匠心。这种精巧的设计使得Spring极具扩展性和可维护性，能够适应各种复杂的应用场景。</p><p>而实现这种设计目标的关键，正是对各种经典设计模式的融会贯合与灵活运用。Spring框架本身就是一个设计模式的集大成者。</p><p>理解Spring如何使用设计模式，对我们开发者而言价值巨大：</p><ul><li><strong>深入理解Spring核心原理：</strong> 设计模式是Spring骨骼和脉络。理解模式的应用，才能真正看懂Spring的“魔术”背后是如何工作的，比如AOP的实现、事务的传播行为、Bean的生命周期管理等。</li><li><strong>更好地利用Spring扩展点：</strong> Spring提供了丰富的扩展机制（如各种Processor、Aware接口、Factory等）。这些扩展点很多都围绕设计模式构建，理解模式能帮助我们更高效、更符合框架哲学地进行高级定制。</li><li><strong>编写更“Spring化”的代码：</strong> 学习框架如何运用模式，也能指导我们在自己的业务代码中应用类似的设计思想，写出更解耦、更灵活、更易测试的代码，即所谓“Idiomatic Spring”。</li><li><strong>提高代码质量：</strong> 设计模式是经过实践检验的解决方案，Spring对模式的应用使得其内部结构清晰，逻辑内聚，易于理解和维护。</li><li><strong>从容应对高阶面试：</strong> 面试官常常通过考察你对Spring内部设计模式的理解，来判断你对框架核心原理的掌握深度。能结合设计模式阐述Spring特性，往往能展现出更强的技术功底。</li></ul><p>在接下来的内容中，我们将重点聚焦于Spring中最具代表性、对理解框架核心至关重要的几种设计模式，并深入探讨它们在Spring中的具体应用。</p><h3 id="核心设计模式在spring中的应用深度解析" tabindex="-1"><a class="header-anchor" href="#核心设计模式在spring中的应用深度解析"><span>核心设计模式在Spring中的应用深度解析</span></a></h3><h4 id="_2-1-控制反转-ioc-依赖注入-di-spring的基石原则" tabindex="-1"><a class="header-anchor" href="#_2-1-控制反转-ioc-依赖注入-di-spring的基石原则"><span>2.1 控制反转 (IoC) / 依赖注入 (DI) - Spring的基石原则</span></a></h4><p>尽管 IoC/DI 通常被视为一种<strong>原则</strong>或<strong>思想</strong>，而不是一个经典的GoF（Gang of Four，即《设计模式》一书的四位作者）设计模式，但它是Spring框架最核心的理念，也是其他模式得以应用的基础。IoC（Inversion of Control）意味着应用程序中对象的创建和依赖关系的维护不再由对象本身负责，而是交给外部容器来控制。DI（Dependency Injection）是实现 IoC 的一种具体方式，即容器在创建对象时，将其依赖的其他对象注入进去。</p><ul><li><strong>在Spring中的应用：</strong> Spring IoC容器（<code>BeanFactory</code> 或 <code>ApplicationContext</code>）负责根据配置（XML, 注解, JavaConfig）创建Bean实例，并自动处理Bean之间的依赖关系，将依赖的Bean注入到需要它们的Bean中。</li><li><strong>为何这样用 (带来的好处)：</strong><ul><li><strong>极致解耦：</strong> 对象不再需要自己查找或创建依赖，而是被动接受注入。这使得对象之间只通过接口耦合，极大地降低了类之间的耦合度。</li><li><strong>提高可测试性：</strong> 单元测试时，可以轻松地用Mock对象或Stub对象替换掉真实的依赖，便于独立测试某个组件。</li><li><strong>简化配置和管理：</strong> 对象的生命周期和依赖关系由容器统一管理，避免了大量的 <code>new</code> 操作和对象之间的相互引用。</li></ul></li><li><strong>与模式的关联：</strong> IoC/DI 的实现高度依赖于<strong>工厂模式</strong>（容器作为创建Bean的工厂）和<strong>策略模式</strong>（不同的依赖注入方式如构造器注入、Setter注入、字段注入，以及后面提到的各种策略接口）。</li><li><strong>面试关联：</strong> IoC/DI 是Spring面试的开场白。面试官会问“什么是IoC/DI？”，你可以从“控制权的转移”（对象自己控制依赖 -&gt; 容器控制依赖）和“实现方式”（依赖查找 vs 依赖注入）来回答，并强调其带来的解耦和测试性好处。进一步可以结合工厂模式来解释容器如何“生产”Bean。</li></ul><h4 id="_2-2-工厂模式-factory-method-abstract-factory" tabindex="-1"><a class="header-anchor" href="#_2-2-工厂模式-factory-method-abstract-factory"><span>2.2 工厂模式 (Factory Method / Abstract Factory)</span></a></h4><p>工厂模式是创建型模式，它提供了创建对象的最佳方法，将对象的创建与使用代码分离。</p><ul><li><strong>在Spring中的应用：</strong> Spring的 IoC 容器本身就是典型的工厂。<code>org.springframework.beans.factory.BeanFactory</code> 和 <code>org.springframework.context.ApplicationContext</code> 是Spring Bean Factory的核心接口。它们负责根据 <code>BeanDefinition</code> 创建、配置和管理 Bean 实例。 <ul><li><strong><code>BeanFactory</code>:</strong> 最基本的工厂，提供最简单的容器功能，主要负责 Bean 的按需延迟加载。</li><li><strong><code>ApplicationContext</code>:</strong> <code>BeanFactory</code> 的子接口，提供了更多企业级特性，如事件发布、国际化支持、统一资源加载等。它通常会在容器启动时预加载所有单例 Bean。</li></ul></li><li><strong>如何体现工厂模式思想：</strong><ul><li>它们隐藏了 Bean 创建的复杂细节（实例化、属性填充、初始化等）。</li><li>客户端通过 <code>getBean()</code> 方法从工厂获取 Bean 实例，无需关心 Bean 的具体实现类或创建过程。</li><li>Spring 支持多种 Bean 的创建方式（构造器、静态工厂方法、实例工厂方法），这些都是工厂方法的体现。</li><li>Spring 提供了多种 <code>ApplicationContext</code> 实现类（如 <code>ClassPathXmlApplicationContext</code>, <code>FileSystemXmlApplicationContext</code>, <code>AnnotationConfigApplicationContext</code>, <code>WebApplicationContext</code> 等），每种实现类对应不同的配置加载方式和环境，这体现了 <strong>抽象工厂模式</strong> 的思想——提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</li></ul></li><li><strong>为何这样用 (带来的好处)：</strong> 将 Bean 的创建和配置过程与使用代码彻底解耦，增强了系统的灵活性和可插拔性。你可以轻松切换Bean的实现类、调整 Bean 的配置方式，而不会影响到使用该 Bean 的客户端代码。</li><li><strong>面试关联：</strong> “BeanFactory 和 ApplicationContext 有什么区别？”是一个经典面试题。从工厂模式的角度回答，可以强调 ApplicationContext 在基本工厂功能之上增加了更多企业级特性，是更常用的应用上下文。提及它们如何体现工厂模式，能展现你对容器核心机制的理解。</li></ul><h4 id="_2-3-代理模式-proxy" tabindex="-1"><a class="header-anchor" href="#_2-3-代理模式-proxy"><span>2.3 代理模式 (Proxy)</span></a></h4><p>代理模式是结构型模式，它为另一个对象提供一个替身或占位符，以控制对这个对象的访问。</p><ul><li><strong>在Spring中的应用：</strong> Spring AOP（Aspect-Oriented Programming，面向切面编程）的核心实现机制就是代理模式。AOP 允许你在不修改目标对象源代码的情况下，为对象的方法增加额外的行为（如事务、安全检查、日志记录）。</li><li><strong>如何实现：</strong> Spring AOP 默认使用动态代理来为目标 Bean 创建代理对象。 <ul><li>如果目标 Bean 实现了接口，Spring 默认使用 <strong>JDK 动态代理</strong>。JDK 代理要求目标对象实现至少一个接口，它代理的是接口的方法。</li><li>如果目标 Bean 没有实现接口，或者配置强制使用 CGLIB，Spring 会使用 <strong>CGLIB 代理</strong>。CGLIB 是一个第三方库，它通过继承目标类创建子类来实现代理，因此目标类及其方法不能是 final 的。</li></ul></li><li><strong>工作原理简述：</strong> 客户端调用的是代理对象的方法。在代理对象内部，会在调用目标对象的原始方法之前或之后插入额外的逻辑（即 AOP 通知 Aspect）。</li><li><strong>为何这样用 (带来的好处)：</strong> 将横切关注点（如事务、日志、安全）从业务逻辑中分离出来，集中管理，降低了业务代码的复杂度，提高了代码的可维护性和复用性。它实现了功能增强的无侵入性。</li><li><strong>与Bean生命周期的关联：</strong> Spring AOP 代理对象的创建通常发生在 Bean 生命周期中的 <strong><code>BeanPostProcessor#postProcessAfterInitialization()</code></strong> 阶段。在这个阶段，容器会检查 Bean 是否需要被代理。如果需要，<code>AbstractAutoProxyCreator</code>（一个 BeanPostProcessor 实现）会为该 Bean 创建一个代理对象，并返回这个代理对象。后续其他 Bean 依赖注入时，获取到的就是这个代理对象，而不是原始的 Bean 实例。</li><li><strong>面试关联：</strong> “Spring AOP 的实现原理是什么？”是高频面试题。清晰解释代理模式（JDK/CGLIB 的选择）以及它如何在 <code>BeanPostProcessor</code> 阶段生效，是回答这个问题的关键。理解代理模式也能解释为什么通过 <code>this</code> 关键字在 Bean 内部调用方法时 AOP 可能失效（因为 <code>this</code> 指向原始对象而非代理对象）。</li></ul><h4 id="_2-4-模板方法模式-template-method" tabindex="-1"><a class="header-anchor" href="#_2-4-模板方法模式-template-method"><span>2.4 模板方法模式 (Template Method)</span></a></h4><p>模板方法模式是行为型模式，它在一个方法中定义一个算法的骨架，而将一些具体步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下重定义该算法的特定步骤。</p><ul><li><strong>在Spring中的应用：</strong> Spring 大量使用“Template”后缀的类来处理那些包含固定流程但又允许自定义操作的场景，以减少开发者编写重复的样板代码。例如： <ul><li><code>JdbcTemplate</code>: 封装了 JDBC 访问数据库的标准流程（获取连接、创建Statement、执行SQL、处理结果集、关闭资源、处理异常），开发者只需要通过回调接口实现 SQL 语句的创建、参数设置、结果集的映射等可变步骤（如 <code>PreparedStatementCreator</code>, <code>RowMapper</code>）。</li><li><code>RestTemplate</code> (或新的 <code>WebClient</code>)：封装了 HTTP 请求的发送和响应处理流程。</li><li><code>JmsTemplate</code>, <code>MongoTemplate</code>, <code>RedisTemplate</code> 等也遵循相同的模式。</li><li>Spring 事务管理中的 <code>TransactionTemplate</code> 也类似，定义了事务管理的标准流程。</li></ul></li><li><strong>如何体现：</strong> &quot;Template&quot; 类中的核心方法（如 <code>JdbcTemplate.query()</code>, <code>RestTemplate.getForObject()</code>）就是模板方法，它们定义了操作的整体流程。开发者提供的回调接口（如 <code>RowMapper</code>, <code>RequestCallback</code>）就是由“子类”（在这里是通过匿名类或 Lambda 表达式提供的具体实现）来实现的那些可变步骤。</li><li><strong>为何这样用 (带来的好处)：</strong><ul><li><strong>减少样板代码 (Boilerplate Code)：</strong> 将重复性的资源获取/释放、异常处理等逻辑封装在模板类中，开发者只需关注核心业务逻辑。</li><li><strong>保证流程一致性：</strong> 确保了标准操作流程（如资源关闭）总是会被正确执行，避免了资源泄露等问题。</li><li><strong>易于使用：</strong> 提供了更简洁的 API 来执行复杂操作。</li></ul></li><li><strong>面试关联：</strong> 面试官可能会问“Spring 的 JdbcTemplate 是如何减少样板代码的？”或者“Spring 的事务管理中，TransactionTemplate 用到了什么设计模式？” 解释模板方法模式以及回调接口的应用，能体现你对这些工具类设计原理的理解。</li></ul><h4 id="_2-5-观察者模式-observer" tabindex="-1"><a class="header-anchor" href="#_2-5-观察者模式-observer"><span>2.5 观察者模式 (Observer)</span></a></h4><p>观察者模式是行为型模式，它定义了对象之间一对多的依赖关系，当一个对象（主题 Subject）的状态发生改变时，所有依赖于它的对象（观察者 Observer）都会收到通知并自动更新。</p><ul><li><strong>在Spring中的应用：</strong> Spring 的 <strong>Application Event</strong> / <strong>Listener</strong> 机制是观察者模式的经典应用。 <ul><li><code>ApplicationEventPublisher</code> (通常是 <code>ApplicationContext</code> 实现该接口) 扮演 <strong>主题 (Subject)</strong> 的角色，负责发布事件。</li><li><code>ApplicationEvent</code> 是 <strong>事件 (Event)</strong> 本身，表示系统中发生的某个状态变化。</li><li><code>ApplicationListener</code> 接口的实现类扮演 <strong>观察者 (Observer)</strong> 的角色，它们订阅特定类型的事件，并在事件发生时执行相应的处理逻辑。</li></ul></li><li><strong>如何体现：</strong> 当 <code>ApplicationEventPublisher</code> 发布一个 <code>ApplicationEvent</code> 时，所有对该类型事件感兴趣的 <code>ApplicationListener</code> 都会被通知并触发其 <code>onApplicationEvent()</code> 方法。</li><li><strong>为何这样用 (带来的好处)：</strong><ul><li><strong>实现解耦通信：</strong> 发布者和订阅者之间通过事件进行交互，互相不知道对方具体是谁，只依赖于事件本身。这极大地降低了组件之间的耦合度。</li><li><strong>增强系统灵活性：</strong> 可以轻松地增加或移除事件监听器，而无需修改事件发布者的代码。</li><li><strong>实现异步处理：</strong> Spring 支持异步事件处理，进一步提高系统的响应性和吞吐量。</li></ul></li><li><strong>面试关联：</strong> “Spring 的事件机制是基于什么模式实现的？” 这是一个考察 Spring 内部通信机制的问题。回答观察者模式，并解释发布者、事件、监听者这三个核心组成部分，能展现你对 Spring 事件模型的掌握。</li></ul><h4 id="_2-6-策略模式-strategy" tabindex="-1"><a class="header-anchor" href="#_2-6-策略模式-strategy"><span>2.6 策略模式 (Strategy)</span></a></h4><p>策略模式是行为型模式，它定义了一系列算法，将每个算法封装起来，并使它们可以相互替换。策略模式让算法可以独立于使用它的客户端而变化。</p><ul><li><strong>在Spring中的应用：</strong> Spring 在很多场景下都通过接口定义“策略”，然后提供多种实现类，客户端代码只需要依赖接口，运行时根据配置或环境选择具体的实现。这种模式使得 Spring 框架具有极高的灵活性和可插拔性。例子不胜枚举： <ul><li><strong>事务管理：</strong> <code>PlatformTransactionManager</code> 是事务管理的策略接口，Spring 提供了 <code>DataSourceTransactionManager</code> (用于 JDBC/MyBatis), <code>HibernateTransactionManager</code> (用于 Hibernate) 等多种实现，开发者只需配置使用哪种策略。</li><li><strong>AOP 通知类型：</strong> <code>MethodBeforeAdvice</code>, <code>AfterReturningAdvice</code>, <code>ThrowsAdvice</code>, <code>MethodInterceptor</code> 等定义了不同的 AOP 通知策略。</li><li><strong>Bean 实例化策略：</strong> <code>InstantiationStrategy</code> 接口定义了 Bean 的实例化策略，有不同的实现处理构造器注入、工厂方法等。</li><li><strong>资源加载策略：</strong> <code>ResourceLoader</code> 接口定义了加载资源的策略，有不同的实现支持加载 classpath、文件系统、URL 等位置的资源。</li><li>还有 <code>TaskExecutor</code> (任务执行策略), <code>MessageConverter</code> (消息转换策略)等等。</li></ul></li><li><strong>如何体现：</strong> 客户端代码（Spring内部或开发者代码）依赖的是策略接口（如 <code>PlatformTransactionManager</code>）。实际执行时，Spring IoC 容器会根据配置注入具体的策略实现类（如 <code>DataSourceTransactionManager</code>）。</li><li><strong>为何这样用 (带来的好处)：</strong><ul><li><strong>高灵活性和可插拔性：</strong> 可以轻松切换底层技术实现（如从 JDBC 切换到 Hibernate 进行事务管理），而无需修改业务代码。</li><li><strong>代码结构清晰：</strong> 将不同的算法实现封装在独立的类中。</li><li><strong>易于扩展：</strong> 添加新的策略实现不会影响现有的代码。</li></ul></li><li><strong>面试关联：</strong> “Spring 的事务管理是如何支持多种数据访问技术的？”或者“Spring 的资源加载器是如何工作的？”回答策略模式，并以 <code>PlatformTransactionManager</code> 或 <code>ResourceLoader</code> 为例，说明接口定义策略、实现类提供具体算法，客户端依赖接口的模式，能有力证明你对 Spring 核心组件设计原理的理解。</li></ul><h4 id="_2-7-单例模式-singleton" tabindex="-1"><a class="header-anchor" href="#_2-7-单例模式-singleton"><span>2.7 单例模式 (Singleton)</span></a></h4><p>单例模式是创建型模式，它保证一个类只有一个实例，并提供一个全局访问点。</p><ul><li><strong>在Spring中的应用：</strong> Spring Bean 的默认作用域 (Scope) 就是 <code>singleton</code>。这意味着在整个 Spring IoC 容器的生命周期中，对于一个给定的 Bean 定义，容器只会创建一个共享的 Bean 实例。</li><li><strong>Spring 的单例与经典 GoF 单例的区别：</strong><ul><li><strong>经典 GoF 单例：</strong> 由类自身控制实例的创建（通常通过私有构造器和静态工厂方法/静态变量），并提供静态的全局访问点（<code>getInstance()</code>）。</li><li><strong>Spring 的单例：</strong> 由 <strong>Spring IoC 容器</strong>控制 Bean 实例的创建和生命周期。容器保证针对同一个 Bean 定义只创建一个实例，并将这个实例存储在缓存中。客户端通过 <code>getBean()</code> 方法从容器获取 Bean，而不是直接调用类的静态方法。</li></ul></li><li><strong>为何这样用 (带来的好处)：</strong><ul><li><strong>资源复用：</strong> 大多数业务组件是无状态的（Stateless），或者它们的状态可以被安全地共享。使用单例可以避免重复创建对象，节省内存和创建对象的开销。</li><li><strong>性能优化：</strong> 获取单例 Bean 的成本很低，通常是直接从缓存中查找。</li><li><strong>易于管理：</strong> 容器统一管理单例 Bean 的生命周期，包括初始化和销毁。</li></ul></li><li><strong>面试关联：</strong> “Spring Bean 的默认作用域是什么？为什么？”回答单例，并解释 Spring 单例与 GoF 单例的区别（容器管理 vs 类自身管理），以及单例带来的资源复用和性能优势。面试官可能还会问“Spring 如何处理单例 Bean 的并发问题？”，这需要结合 Bean 的无状态设计原则或使用线程安全的方式来回答，但不属于设计模式本身的范畴。</li></ul><h3 id="为什么spring偏爱这些模式带来的好处" tabindex="-1"><a class="header-anchor" href="#为什么spring偏爱这些模式带来的好处"><span>为什么Spring偏爱这些模式带来的好处</span></a></h3><p>通过对上述模式的分析，我们可以看到，Spring 对这些设计模式的偏爱并非偶然，它们共同赋予了Spring框架以下核心优势：</p><ul><li><strong>高内聚，低耦合：</strong> 各个模块和组件职责单一（高内聚），通过接口和依赖注入相互协作，减少了硬编码的依赖（低耦合）。</li><li><strong>极高的灵活性和可扩展性：</strong> 策略模式、工厂模式的应用使得Spring的各个组件易于替换和扩展。IoC/DI 使得添加新功能或修改现有功能对系统的影响最小。</li><li><strong>出色的可测试性：</strong> 解耦的设计结合依赖注入，使得单元测试变得异常简单，可以方便地模拟依赖。</li><li><strong>减少重复的样板代码：</strong> 模板方法模式的应用极大地减少了开发者需要手动处理的繁琐流程代码。</li><li><strong>提供一致的编程模型：</strong> 无论使用何种底层技术（JDBC、Hibernate、JMS等），Spring通常都能提供一套基于模板或回调的、风格一致的API，降低学习成本。</li></ul><p>设计模式的应用，使得Spring成为一个优雅、健壮、易于维护和扩展的企业级应用开发平台。</p><h3 id="理解设计模式如何助你理解spring和应对面试" tabindex="-1"><a class="header-anchor" href="#理解设计模式如何助你理解spring和应对面试"><span>理解设计模式如何助你理解Spring和应对面试</span></a></h3><p>掌握了上述设计模式在Spring中的应用，你将不再只是一个Spring的使用者，更能成为一个理解者。你可以：</p><ol><li><strong>看懂源码：</strong> 阅读Spring源码时，能够识别出 IoC 容器如何使用工厂创建 Bean，AOP 模块如何运用代理，事务管理器如何应用策略模式等，从而快速理解代码意图。</li><li><strong>优化代码设计：</strong> 在你的业务代码中，如果遇到类似 Spring 使用模式的场景（如多种算法选择、固定流程+可变步骤、对象创建管理），你也能借鉴 Spring 的设计思想，写出更符合最佳实践的代码。</li><li><strong>秒杀面试难题：</strong> 许多看似复杂的 Spring 面试题，其底层原理都与设计模式有关。当你被问到： <ul><li>“Spring AOP 的实现原理是什么？” → 回答：代理模式。</li><li>“Spring 如何管理事务？” → 回答：策略模式 (<code>PlatformTransactionManager</code>) 和模板方法模式 (<code>TransactionTemplate</code>)。</li><li>“BeanFactory 和 ApplicationContext 有什么区别？” → 回答：都是工厂模式的体现，ApplicationContext 是更高级的工厂。</li><li>“Spring 如何解耦组件？” → 回答：IoC/DI，基于工厂和策略模式实现。</li><li>“Spring 的事件机制是怎么回事？” → 回答：观察者模式。</li></ul></li></ol><p>能够结合设计模式来解释这些问题，会让你的回答更具深度和条理，给面试官留下深刻印象。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Spring框架之所以能成为 Java 世界的翘楚，与其卓越的设计密不可分。对控制反转/依赖注入、工厂模式、代理模式、模板方法模式、观察者模式、策略模式、单例模式等经典设计模式的巧妙运用，构成了 Spring 优雅、灵活、可扩展的基石。</p>',39)]))}const p=e(t,[["render",a],["__file","spring-design.html.vue"]]),c=JSON.parse('{"path":"/spring/spring-design.html","title":"","lang":"zh-CN","frontmatter":{"description":"深度解析 Spring 框架中的设计模式 引言：设计模式与Spring框架的珠联璧合 Spring框架是Java企业级应用开发的事实标准。它提供了一站式的解决方案，涵盖了依赖注入、AOP、事务管理、MVC、数据访问等众多领域。然而，Spring的伟大不仅仅在于其功能的全面，更在于其底层设计的精巧与匠心。这种精巧的设计使得Spring极具扩展性和可维护性...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/spring/spring-design.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"深度解析 Spring 框架中的设计模式 引言：设计模式与Spring框架的珠联璧合 Spring框架是Java企业级应用开发的事实标准。它提供了一站式的解决方案，涵盖了依赖注入、AOP、事务管理、MVC、数据访问等众多领域。然而，Spring的伟大不仅仅在于其功能的全面，更在于其底层设计的精巧与匠心。这种精巧的设计使得Spring极具扩展性和可维护性..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"深度解析 Spring 框架中的设计模式","slug":"深度解析-spring-框架中的设计模式","link":"#深度解析-spring-框架中的设计模式","children":[{"level":3,"title":"引言：设计模式与Spring框架的珠联璧合","slug":"引言-设计模式与spring框架的珠联璧合","link":"#引言-设计模式与spring框架的珠联璧合","children":[]},{"level":3,"title":"核心设计模式在Spring中的应用深度解析","slug":"核心设计模式在spring中的应用深度解析","link":"#核心设计模式在spring中的应用深度解析","children":[]},{"level":3,"title":"为什么Spring偏爱这些模式带来的好处","slug":"为什么spring偏爱这些模式带来的好处","link":"#为什么spring偏爱这些模式带来的好处","children":[]},{"level":3,"title":"理解设计模式如何助你理解Spring和应对面试","slug":"理解设计模式如何助你理解spring和应对面试","link":"#理解设计模式如何助你理解spring和应对面试","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1745924024000,"updatedTime":1746115551000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":2}]},"readingTime":{"minutes":16.98,"words":5095},"filePathRelative":"spring/spring-design.md","localizedDate":"2025年4月29日","autoDesc":true}');export{p as comp,c as data};
