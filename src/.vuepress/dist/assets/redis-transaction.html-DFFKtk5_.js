import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as t}from"./app-CzKZ5RuK.js";const o={};function p(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h2 id="深入理解redis事务-不再迷茫于原子性、无回滚与watch" tabindex="-1"><a class="header-anchor" href="#深入理解redis事务-不再迷茫于原子性、无回滚与watch"><span>深入理解Redis事务：不再迷茫于原子性、无回滚与WATCH</span></a></h2><p>在构建高并发、多用户访问的分布式系统时，我们经常需要对数据执行一系列相关的操作。例如，在电商系统中扣减库存并记录购买流水；在支付系统中从一个账户转移积分到另一个账户。如果这些操作不能作为一个整体<strong>原子地</strong>执行，就可能在并发环境下出现竞态条件，导致数据不一致或其他严重问题。关系型数据库提供了强大的事务（Transaction）机制来解决这个问题，而Redis作为高性能内存数据库，也提供了事务功能。</p><p>然而，Redis的事务与传统关系型数据库的事务（遵循ACID属性）在实现和保证级别上有所不同，特别是在<strong>回滚</strong>方面。理解Redis事务的特性、优势、局限性及其并发控制手段（如 <code>WATCH</code> 命令），对于编写正确、健壮的并发代码和应对技术面试至关重要。</p><p>本文将带你深入Redis事务的核心，揭开其“原子性”、“隔离性”的面纱，探讨其独特的“无回滚”特性，并学习如何利用 <code>WATCH</code> 命令实现并发安全的乐观锁。</p><h3 id="一、-为什么需要事务" tabindex="-1"><a class="header-anchor" href="#一、-为什么需要事务"><span>一、 为什么需要事务？</span></a></h3><p>考虑一个简单的场景：你需要对Redis中的一个计数器Key进行 <code>INCR</code> 操作，并且只有在计数器当前值小于某个阈值时才执行。如果不使用事务或锁，伪代码可能是这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">long</span> currentValue <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token string">&quot;my_counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递增计数器并获取新值</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>currentValue <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    jedis<span class="token punctuation">.</span><span class="token function">decr</span><span class="token punctuation">(</span><span class="token string">&quot;my_counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果超过阈值，再减回去</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在高并发下，多个客户端可能同时执行这段代码。假设阈值是10，当前计数器是9。两个客户端同时执行 <code>jedis.incr(&quot;my_counter&quot;)</code>，因为 <code>INCR</code> 是原子操作，计数器可能变成10。两个客户端都读到新值10，判断 <code>10 &gt; 10</code> 不成立，都不会执行 <code>decr</code>。最终计数器停留在10，这可能符合预期。</p><p>但如果逻辑更复杂，或者判断条件涉及多个Key，竞态条件就更容易发生。更重要的是，像“先读后写”这样的操作序列，如果在读取和写入之间 Key 的值被其他客户端修改，就会导致基于旧数据进行操作，引发错误。</p><p>事务就是用来解决这类问题，将一组命令打包，作为一个不可分割的整体来执行。</p><h3 id="二、-redis事务的核心命令-multi-exec-discard" tabindex="-1"><a class="header-anchor" href="#二、-redis事务的核心命令-multi-exec-discard"><span>二、 Redis事务的核心命令：<code>MULTI</code>, <code>EXEC</code>, <code>DISCARD</code></span></a></h3><p>Redis事务通过三个核心命令来实现：</p><ol><li><p><strong><code>MULTI</code>：标记事务开始</strong></p><ul><li>当客户端发送 <code>MULTI</code> 命令后，Redis服务器会进入一个特殊状态，不再立即执行后续收到的命令。</li></ul></li><li><p><strong>命令入队 (Queuing)：</strong></p><ul><li>在 <code>MULTI</code> 之后，客户端发送的所有写命令（读命令通常不需要在事务中执行，但Redis也支持将其入队）<strong>不会立即执行</strong>，而是被Redis服务器<strong>放入一个内部的命令队列</strong>中。</li><li>服务器会对入队的命令进行基本的<strong>语法检查</strong>。如果命令有明显的语法错误（例如，命令名称拼写错误），Redis 会在入队时就返回一个错误（<code>-ERR unknown command</code> 或 <code>-ERR wrong number of arguments</code> 等），并<strong>标记</strong>该事务是一个错误事务。<strong>注意：</strong> 此时事务并不会立即终止，只是被标记为错误。后续命令仍然可以继续入队，直到 <code>EXEC</code>。</li><li>对于成功入队的命令，服务器会返回 <code>QUEUED</code> 响应，表示命令已成功加入队列。</li></ul></li><li><p><strong><code>EXEC</code>：执行事务</strong></p><ul><li>当客户端发送 <code>EXEC</code> 命令时，Redis服务器会检查当前事务是否被标记为错误事务（在入队阶段检查出语法错误的）。</li><li><strong>如果事务被标记为错误</strong>，Redis 会拒绝执行整个事务，返回一个错误响应（通常是 <code>(error) EXECABORT Transaction aborted because of previous errors.</code>），<strong>队列中的所有命令都不会被执行</strong>。</li><li><strong>如果事务没有被标记为错误</strong>，Redis 会<strong>按顺序、一次性地执行</strong>队列中的所有命令。<strong>在执行这个命令队列期间，Redis 服务器是阻塞的</strong>，不会执行来自其他客户端的任何命令。<strong>（关联Redis单线程执行命令队列的特性）</strong>。</li><li><code>EXEC</code> 命令的返回值是一个列表（Multi-bulk reply），列表中包含了队列中每个命令的执行结果，顺序与命令入队的顺序完全一致。即使某个命令在执行阶段出错（运行时错误），<code>EXEC</code> 的返回列表中对应位置会是一个错误响应，但整个列表会正常返回。</li></ul></li><li><p><strong><code>DISCARD</code>：取消事务</strong></p><ul><li>客户端可以在发送 <code>EXEC</code> 之前发送 <code>DISCARD</code> 命令来取消当前的事务。</li><li>Redis 服务器收到 <code>DISCARD</code> 后，会清空当前的命令队列，并退出事务状态。返回 <code>OK</code> 响应。</li></ul></li></ol><h3 id="三、-redis事务的原子性与隔离性保证" tabindex="-1"><a class="header-anchor" href="#三、-redis事务的原子性与隔离性保证"><span>三、 Redis事务的原子性与隔离性保证</span></a></h3><p>理解Redis事务的关键在于理解它提供的原子性和隔离性是何种程度的保证，以及其重要的局限性。</p><ul><li><p><strong>原子性 (Atomicity)：</strong></p><ul><li>Redis事务保证：事务队列中的命令在调用 <code>EXEC</code> 后，会<strong>一次性地、连续地</strong>执行完成，<strong>中间不会被其他客户端的命令打断</strong>。</li><li><strong>重点强调其局限性：</strong> <strong>Redis事务不保证命令执行过程中的完全回滚！</strong><ul><li>如前所述，<strong>只有在入队阶段发现语法错误</strong>时，事务才会在 <code>EXEC</code> 时完全拒绝执行，实现“要么全部执行，要么都不执行”。</li><li>但如果在 <strong>执行阶段</strong>（<code>EXEC</code> 之后）发生错误（例如，对一个 String 类型的 Key 执行 <code>RPUSH</code> 命令），<strong>只有这个命令会执行失败</strong>（在 <code>EXEC</code> 的返回列表中对应一个错误响应）。<strong>事务中的其他命令仍然会继续执行，之前成功执行的命令也不会回滚。</strong></li></ul></li><li><strong>为什么 Redis 事务没有执行时回滚？</strong> 这是 Redis 设计哲学和实现方式决定的。Redis 认为事务中的命令都是经过客户端验证的有效命令，绝大多数错误只可能发生在运行阶段（如 Key 的类型错误），这种错误是编程错误，不应该通过事务机制来回滚。此外，实现复杂的回滚机制会增加 Redis 的复杂性，影响性能，与 Redis 追求极致简洁高效的设计理念不符。</li><li><strong>面试关联点：</strong> <strong>这是 Redis 事务与传统数据库事务最核心的区别，也是面试官最常考察的点。</strong> 你需要明确指出 Redis 事务的“原子性”是不包含“执行失败时回滚”这一层的，并解释原因。</li></ul></li><li><p><strong>隔离性 (Isolation)：</strong></p><ul><li>Redis事务提供基本的隔离性：一旦执行 <code>EXEC</code>，事务队列中的命令会被<strong>连续地</strong>执行，直到所有命令执行完毕。<strong>在此期间，不会有其他客户端的命令插入到这个执行序列中。</strong> 这保证了事务内的操作不会被外部操作打断而导致中间状态被观察到或破坏。</li></ul></li></ul><p><strong>与传统数据库事务（ACID）的对比：</strong></p><p>传统数据库事务追求 ACID 属性：</p><ul><li><strong>A (Atomicity):</strong> 原子性，要么全成功，要么全失败回滚。Redis 事务的原子性弱于此，执行时错误不回滚。</li><li><strong>C (Consistency):</strong> 一致性，事务执行前后数据从一个一致状态到另一个一致状态。Redis 事务依赖于命令本身原子性，以及应用层代码逻辑。</li><li><strong>I (Isolation):</strong> 隔离性，多个事务并发执行互不干扰。Redis 提供了基本的隔离（执行时不插入其他命令）。</li><li><strong>D (Durability):</strong> 持久性，已提交事务的修改永久保存。Redis 的持久性依赖于其 RDB 和 AOF 配置，与事务本身不是一个层面的概念。</li></ul><p><strong>结论：</strong> Redis 事务并非完全符合传统数据库的 ACID 标准，尤其是在<strong>原子性（无回滚）<strong>和</strong>一致性</strong>方面需要应用层代码进行额外处理。它更像是一个“批量执行脚本”或者“命令执行队列”，提供了执行过程的原子性和隔离性。</p><h3 id="四、-基于-watch-命令实现乐观锁" tabindex="-1"><a class="header-anchor" href="#四、-基于-watch-命令实现乐观锁"><span>四、 基于 <code>WATCH</code> 命令实现乐观锁</span></a></h3><p>虽然 Redis 事务保证了命令执行时的隔离，但它无法解决在 <code>MULTI</code> 之前，客户端读取 Key 值并在客户端进行逻辑判断，然后基于这个旧值在事务中进行写入时出现的竞态条件（即“检查并设置” Check-and-Set 场景）。</p><p><strong>为什么需要 <code>WATCH</code>？</strong></p><p>考虑一个典型的库存扣减场景：</p><ol><li>客户端 A 获取当前库存 <code>stock</code>。</li><li>客户端 A 在客户端判断 <code>stock &gt; 0</code>。</li><li>客户端 B 在此时修改了 <code>stock</code>（例如也扣减了库存）。</li><li>客户端 A 发送 <code>MULTI</code>。</li><li>客户端 A 发送 <code>DECR stock</code>。</li><li>客户端 A 发送 <code>EXEC</code>。 此时，客户端 A 基于它读到的旧 <code>stock</code> 值认为可以扣减，但实际上 <code>stock</code> 可能已经被客户端 B 修改，导致最终结果错误（例如库存变成负数）。</li></ol><p><code>WATCH</code> 命令就是用来解决这个问题的，它实现了 Redis 的<strong>乐观锁</strong>机制。</p><p><strong>原理：</strong></p><ul><li><code>WATCH key [key ...]</code> 命令用于在事务开始之前（即 <code>MULTI</code> 命令之前）监视一个或多个 Key。</li><li>Redis 会在内部记录下这些被 <code>WATCH</code> 的 Key 当前的值。</li><li>在执行 <code>EXEC</code> 命令时，Redis 会<strong>检查</strong>所有被 <code>WATCH</code> 的 Key 是否在 <code>WATCH</code> 命令执行之后<strong>被其他客户端修改过</strong>。修改包括通过命令、Lua 脚本或其他事务进行的修改。</li></ul><p><strong>事务失败：</strong></p><ul><li>如果在 <code>WATCH</code> 之后到 <code>EXEC</code> 之前，<strong>任何一个</strong>被 <code>WATCH</code> 的 Key 被修改了，那么当客户端执行 <code>EXEC</code> 命令时，事务就会被取消，<strong><code>EXEC</code> 会返回一个特殊的 Null multi-bulk reply（空批量回复，通常在 Java 客户端中表现为 null）</strong>，而不是命令执行结果列表。</li><li>收到 Null multi-bulk reply 后，客户端就知道事务执行失败了，因为它监视的 Key 被修改了。</li></ul><p><strong>乐观锁：</strong></p><p><code>WATCH</code> 体现了乐观锁的思想：假设冲突发生的概率很低，先尝试执行操作（在客户端判断、准备命令），只在<strong>提交时（EXEC 时）<strong>检查是否有冲突。如果冲突发生，事务失败，由客户端负责检测失败并进行</strong>重试（Retry）</strong>。</p><p>使用 <code>WATCH</code> 的典型流程是：</p><ol><li><code>WATCH</code> 需要监视的 Key。</li><li><code>GET</code> 监视的 Key 获取当前值，并在客户端进行业务逻辑判断。</li><li>发送 <code>MULTI</code>。</li><li>根据业务逻辑（可能基于之前读取的值）将后续写命令入队。</li><li>发送 <code>EXEC</code>。</li><li><strong>检查 <code>EXEC</code> 返回值：</strong> 如果是 Null multi-bulk reply，表示 WATCH 的 Key 被修改，事务失败，需要回到步骤1<strong>重试整个过程</strong>。如果不是 Null multi-bulk reply，表示事务成功提交，可以检查返回结果列表中的每个命令执行情况。</li></ol><p><strong>面试关联点：</strong> <code>WATCH</code> 是 Redis 并发控制的核心手段。面试官会问如何实现库存扣减的原子操作？如何解决“先读后写”的竞态条件？解释 <code>WATCH</code> 的原理、乐观锁思想以及客户端重试逻辑是关键。</p><h3 id="五、-redis事务的典型应用场景-结合java" tabindex="-1"><a class="header-anchor" href="#五、-redis事务的典型应用场景-结合java"><span>五、 Redis事务的典型应用场景（结合Java）</span></a></h3><ul><li><p><strong>实现简单的原子操作：</strong> 当你需要同时对两个 Key 进行操作，且这两个操作需要原子执行时。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Jedis 示例: 原子地设置两个 Key</span>
<span class="token class-name">Transaction</span> t <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 或 jedis.pipelined().multi();</span>
t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 检查 results 是否为 null (WATCH 失败) 并且列表中的每个结果是否 OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>实现“检查并设置”（Check-and-Set）逻辑：原子性库存扣减</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Java 客户端 (伪代码或 Jedis 示例)</span>
<span class="token class-name">String</span> stockKey <span class="token operator">=</span> <span class="token string">&quot;product:123:stock&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> quantityToBuy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> transactionSuccessful <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> maxRetries <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 设置重试次数</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxRetries<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>stockKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 步骤 1: WATCH 库存 Key</span>

    <span class="token class-name">String</span> stockStr <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stockKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 步骤 2: GET 当前库存值</span>
    <span class="token keyword">int</span> currentStock <span class="token operator">=</span> <span class="token punctuation">(</span>stockStr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stockStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStock <span class="token operator">&lt;</span> quantityToBuy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 库存不足，取消 WATCH 并退出</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;库存不足&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 步骤 3: 客户端逻辑判断通过 -&gt; 准备事务</span>
    <span class="token class-name">Transaction</span> t <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 步骤 4: 将写命令入队</span>
    t<span class="token punctuation">.</span><span class="token function">decrBy</span><span class="token punctuation">(</span>stockKey<span class="token punctuation">,</span> quantityToBuy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 扣减库存</span>
    t<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">&quot;user:order:list&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;userX_bought_product123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录购买记录</span>

    <span class="token comment">// 步骤 5: 执行事务</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 步骤 6: 检查 EXEC 返回值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>results <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// WATCH 的 Key 被修改，事务失败，需要重试</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;WATCH 失败，重试中...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 返回循环，重试整个过程</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 事务成功执行 (WATCH 未失败)</span>
        <span class="token comment">// 检查具体命令执行结果（虽然事务执行了，但 DECRBY 可能返回负数等）</span>
        <span class="token keyword">long</span> newStock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;事务成功执行, 新库存: &quot;</span> <span class="token operator">+</span> newStock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        transactionSuccessful <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 事务成功，退出循环</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>transactionSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;事务最终失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例清晰展示了 <code>WATCH</code>、<code>MULTI</code>、命令入队、<code>EXEC</code>、检查 Null multi-bulk reply 以及重试的完整流程。</p></li></ul><h3 id="六、-将事务与-pipelining-结合" tabindex="-1"><a class="header-anchor" href="#六、-将事务与-pipelining-结合"><span>六、 将事务与 Pipelining 结合</span></a></h3><p>事务命令（<code>MULTI</code>, 队列中的命令, <code>EXEC</code>）可以在 Pipelining 中发送，以减少网络 $RTT$（Round Trip Time）。客户端将所有命令打包一次性发送给服务器，服务器处理完队列中的命令后，将所有响应一次性返回。这在高并发场景下能进一步提升性能。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Jedis Pipelining 结合 Transaction</span>
<span class="token class-name">Pipeline</span> pipeline <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">pipelined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果需要 WATCH，WATCH 命令必须在 pipeline 之外或管道的开始发送</span>
<span class="token comment">// pipeline.watch(&quot;watched_key&quot;); // WATCH 本身不能入队，它影响的是 MULTI/EXEC</span>
<span class="token comment">// 然后在 pipeline 中发送 WATCH 命令 (Jedis 管道支持一些非队列命令)</span>

pipeline<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// MULTI 命令入队</span>
pipeline<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SET 入队</span>
pipeline<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// INCR 入队</span>
<span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> execResponse <span class="token operator">=</span> pipeline<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// EXEC 入队，并获取执行结果的 Future</span>

pipeline<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 批量发送所有命令并获取所有响应</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> execResponse<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取 EXEC 的实际结果列表</span>
<span class="token comment">// 检查 results == null 或 遍历 results 检查每个命令结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 Pipelining，从客户端发送 <code>MULTI</code> 到收到 <code>EXEC</code> 返回结果，可能只需要一个 $RTT$（取决于批量大小和网络状况）。</p><h3 id="七、-redis事务的潜在问题与最佳实践" tabindex="-1"><a class="header-anchor" href="#七、-redis事务的潜在问题与最佳实践"><span>七、 Redis事务的潜在问题与最佳实践</span></a></h3><ul><li><strong>无回滚的陷阱：</strong> 务必牢记 Redis 事务执行时错误不回滚。在客户端检查 <code>EXEC</code> 返回结果列表中的每个命令是否成功，并根据业务逻辑进行补偿或报警。</li><li><strong><code>WATCH</code> 的重试逻辑：</strong> 客户端必须自己实现检测 Null multi-bulk reply 并进行重试的逻辑。重试次数不宜过多，避免无限循环。</li><li><strong>事务中的慢命令：</strong> 应避免在事务中使用耗时命令（如 $O(N)$ 命令），它们会阻塞整个 Redis 实例在 <code>EXEC</code> 执行期间。</li><li><strong>事务队列不宜过长：</strong> 过长的事务队列会占用服务器内存，并增加 <code>EXEC</code> 执行时的阻塞时间。保持事务尽可能短小。</li><li><strong>Jedis vs Lettuce 客户端：</strong> Jedis 在 <code>multi()</code> 到 <code>exec()</code> 期间发送的命令是先在客户端缓冲，直到 <code>exec()</code> 才发送。Lettuce 的异步 API 更自然地与 Redis 的命令入队机制和 Pipelining 结合。使用时需查阅具体客户端库的文档。</li></ul><h3 id="八、-面试官视角-事务的考察点" tabindex="-1"><a class="header-anchor" href="#八、-面试官视角-事务的考察点"><span>八、 面试官视角：事务的考察点</span></a></h3><p>Redis事务是面试中考察候选人对并发、锁、数据库事务理解深度的重要知识点。面试官常通过以下方式考察：</p><ul><li><strong>基本命令与流程：</strong> <code>MULTI</code>, <code>EXEC</code>, <code>DISCARD</code> 是做什么的？命令是立即执行还是入队？</li><li><strong>原子性与隔离性：</strong> Redis 事务是原子的吗？和数据库事务的原子性一样吗？会回滚吗？什么情况下会失败？</li><li><strong><code>WATCH</code> 机制：</strong> <code>WATCH</code> 是做什么用的？怎么解决并发问题？它是乐观锁还是悲观锁？客户端如何使用它？如果 <code>WATCH</code> 的 Key 被修改了，<code>EXEC</code> 返回什么？客户端该怎么处理？</li><li><strong>应用场景：</strong> 如何用 Redis 事务实现库存扣减？如何实现分布式锁？（注意：用 Redis 实现分布式锁更推荐 <code>SET key value NX EX seconds</code> 单命令原子操作或 Lua 脚本，而不是 <code>WATCH</code>+事务，因为 <code>WATCH</code>+事务实现分布式锁比较复杂且有坑，面试时需对比说明优劣）。</li><li><strong>与传统 DB 事务的对比：</strong> 详细对比 Redis 事务与传统数据库事务在 ACID 属性上的差异。</li></ul><h3 id="九、-总结" tabindex="-1"><a class="header-anchor" href="#九、-总结"><span>九、 总结</span></a></h3><p>Redis 事务提供了一种将多个命令打包并作为一个整体执行的机制，保证了执行过程的<strong>原子性</strong>和<strong>隔离性</strong>。其核心特点在于命令<strong>先入队</strong>，然后在调用 <code>EXEC</code> 时由单线程的 Redis 服务器<strong>一次性执行队列中的所有命令</strong>，期间不会被其他客户端命令打断。</p><p>然而，Redis 事务与传统数据库事务最显著的区别在于<strong>它不保证执行时的回滚</strong>。如果在 <code>EXEC</code> 阶段某个命令发生运行时错误，只有该命令失败，事务不会回滚，后续命令仍然会继续执行。</p><p>为了解决并发场景下的“检查并设置”竞态条件，Redis 提供了 <strong><code>WATCH</code> 命令</strong>。<code>WATCH</code> 实现了一种<strong>乐观锁</strong>机制，用于监视 Key。如果在 <code>WATCH</code> 后到 <code>EXEC</code> 前 Key 被修改，事务就会被取消，<code>EXEC</code> 返回 Null multi-bulk reply，需要客户端进行重试。</p><hr>`,51)]))}const u=s(o,[["render",p],["__file","redis-transaction.html.vue"]]),d=JSON.parse('{"path":"/redis/redis-transaction.html","title":"","lang":"zh-CN","frontmatter":{"description":"深入理解Redis事务：不再迷茫于原子性、无回滚与WATCH 在构建高并发、多用户访问的分布式系统时，我们经常需要对数据执行一系列相关的操作。例如，在电商系统中扣减库存并记录购买流水；在支付系统中从一个账户转移积分到另一个账户。如果这些操作不能作为一个整体原子地执行，就可能在并发环境下出现竞态条件，导致数据不一致或其他严重问题。关系型数据库提供了强大的...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/redis/redis-transaction.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"深入理解Redis事务：不再迷茫于原子性、无回滚与WATCH 在构建高并发、多用户访问的分布式系统时，我们经常需要对数据执行一系列相关的操作。例如，在电商系统中扣减库存并记录购买流水；在支付系统中从一个账户转移积分到另一个账户。如果这些操作不能作为一个整体原子地执行，就可能在并发环境下出现竞态条件，导致数据不一致或其他严重问题。关系型数据库提供了强大的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"深入理解Redis事务：不再迷茫于原子性、无回滚与WATCH","slug":"深入理解redis事务-不再迷茫于原子性、无回滚与watch","link":"#深入理解redis事务-不再迷茫于原子性、无回滚与watch","children":[{"level":3,"title":"一、 为什么需要事务？","slug":"一、-为什么需要事务","link":"#一、-为什么需要事务","children":[]},{"level":3,"title":"二、 Redis事务的核心命令：MULTI, EXEC, DISCARD","slug":"二、-redis事务的核心命令-multi-exec-discard","link":"#二、-redis事务的核心命令-multi-exec-discard","children":[]},{"level":3,"title":"三、 Redis事务的原子性与隔离性保证","slug":"三、-redis事务的原子性与隔离性保证","link":"#三、-redis事务的原子性与隔离性保证","children":[]},{"level":3,"title":"四、 基于 WATCH 命令实现乐观锁","slug":"四、-基于-watch-命令实现乐观锁","link":"#四、-基于-watch-命令实现乐观锁","children":[]},{"level":3,"title":"五、 Redis事务的典型应用场景（结合Java）","slug":"五、-redis事务的典型应用场景-结合java","link":"#五、-redis事务的典型应用场景-结合java","children":[]},{"level":3,"title":"六、 将事务与 Pipelining 结合","slug":"六、-将事务与-pipelining-结合","link":"#六、-将事务与-pipelining-结合","children":[]},{"level":3,"title":"七、 Redis事务的潜在问题与最佳实践","slug":"七、-redis事务的潜在问题与最佳实践","link":"#七、-redis事务的潜在问题与最佳实践","children":[]},{"level":3,"title":"八、 面试官视角：事务的考察点","slug":"八、-面试官视角-事务的考察点","link":"#八、-面试官视角-事务的考察点","children":[]},{"level":3,"title":"九、 总结","slug":"九、-总结","link":"#九、-总结","children":[]}]}],"git":{"createdTime":1745924024000,"updatedTime":1746115551000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":2}]},"readingTime":{"minutes":14.81,"words":4443},"filePathRelative":"redis/redis-transaction.md","localizedDate":"2025年4月29日","autoDesc":true}');export{u as comp,d as data};
