import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as t,o as e}from"./app-CzKZ5RuK.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<p>在我们之前的文章中，我们深入探讨了 Spring Boot 的架构设计，特别是其核心——自动配置（Auto-configuration）。我们了解到，自动配置是 Spring Boot 实现“开箱即用”的关键，它根据 classpath 中的依赖和环境条件，智能地为我们配置 Bean。</p><p>那么，这些“依赖”是如何以一种便捷的方式被引入的呢？答案就是 <strong>Spring Boot Starters</strong>。Starters 是 Spring Boot 简化依赖管理的一大杀器。理解 Starter 是什么，以及如何创建自定义 Starter，不仅能让你更高效地使用 Spring Boot 生态中的各种功能，还能让你将自己的库或模块“Spring Boot 化”，提供给其他开发者使用。同时，这也是面试中考察你对 Spring Boot 模块化和自动配置机制理解深度的高频考点。</p><p>今天，就让我们一起揭开 Starter 的面纱，并亲手创建一个自定义 Starter！</p><hr><h2 id="深度解析-spring-boot-starter-简化依赖-以及如何打造你的专属-工具箱" tabindex="-1"><a class="header-anchor" href="#深度解析-spring-boot-starter-简化依赖-以及如何打造你的专属-工具箱"><span>深度解析 Spring Boot Starter：简化依赖，以及如何打造你的专属“工具箱”</span></a></h2><h3 id="引言-告别依赖地狱-迎接一站式集成" tabindex="-1"><a class="header-anchor" href="#引言-告别依赖地狱-迎接一站式集成"><span>引言：告别依赖地狱，迎接一站式集成</span></a></h3><p>在没有 Spring Boot Starter 的时代，当我们想在 Spring 应用中集成一个第三方技术（如 MyBatis、Redis、Kafka）时，需要手动引入一大堆相关的依赖，包括核心库、Spring 集成模块、连接池、日志库等，并且要小心翼翼地处理它们之间的版本兼容性问题。这个过程既繁琐又容易出错。</p><p>Spring Boot Starters 的出现，彻底改变了这一局面。它是一种特殊的 Maven 或 Gradle 依赖，充当了<strong>聚合器</strong>的角色。引入一个 Starter，就像拿到一个“工具箱”，里面已经为你准备好了该场景下所需的大部分常用工具（依赖）。</p><p>理解并学会创建自定义 Starter 的价值在于：</p><ul><li><strong>掌握 Spring Boot 模块化精髓：</strong> 了解 Spring Boot 如何组织和打包功能模块。</li><li><strong>简化库的使用：</strong> 如果你开发了一个供他人使用的 Java 库，为其提供一个 Starter 可以极大地降低用户在 Spring Boot 应用中集成你的库的难度。</li><li><strong>复用和标准化：</strong> 将常用功能的 Spring Boot 集成配置和依赖打包成 Starter，可以在项目之间复用，并提供标准化的集成方式。</li><li><strong>深度理解自动配置：</strong> 创建 Starter 的过程通常需要配合自动配置，能让你从提供者的视角，更深刻理解自动配置如何与 Starter 协同工作。</li><li><strong>应对面试：</strong> Starter 和自动配置是 Spring Boot 架构的两个核心组件，面试中常常结合考察。</li></ul><h3 id="spring-boot-starter-是什么" tabindex="-1"><a class="header-anchor" href="#spring-boot-starter-是什么"><span>Spring Boot Starter 是什么？</span></a></h3><p>一个 Spring Boot Starter 本质上是一个带有特殊命名规则（通常是 <code>*-spring-boot-starter</code>，官方 Starter 是 <code>spring-boot-starter-*</code>）的 Maven 或 Gradle <strong>依赖</strong>（POM 文件）。它本身通常不包含任何业务代码，其主要作用是通过<strong>依赖传递</strong>引入一系列开箱即用的依赖。</p><p>例如，<code>spring-boot-starter-web</code> 这个 Starter 引入了 Spring MVC、内嵌的 Tomcat、Jackson 等用于构建 Web 应用的常用依赖。开发者只需要引入这一个依赖，就相当于引入了开发 Web 应用所需的大部分基础库。</p><p>Starters 的另一个重要作用是，它们通常会<strong>与自动配置模块一起工作</strong>。引入某个 Starter，意味着该 Starter 引入的库会被添加到 Classpath 中。Spring Boot 的自动配置机制会检测 Classpath 中是否存在这些库，如果存在，就触发相应的自动配置，为你注册好所需的 Bean。</p><h3 id="为什么创建自定义-starter" tabindex="-1"><a class="header-anchor" href="#为什么创建自定义-starter"><span>为什么创建自定义 Starter？</span></a></h3><p>你可能已经开发了一个自己的 Java 库，或者你们公司内部有一个通用的服务客户端库。为了让其他团队在他们的 Spring Boot 项目中更容易地使用你的库，你可以为其创建一个自定义 Starter。</p><p>创建自定义 Starter 通常是为了解决以下问题：</p><ul><li><strong>简化依赖管理：</strong> 将使用你的库所需的所有第三方依赖（包括 Spring 集成模块）聚合到一个 Starter 中，用户只需要引入这一个 Starter 依赖。</li><li><strong>提供默认配置：</strong> 将你的库在 Spring Boot 环境下最常用的配置（如创建客户端实例、配置连接池等）通过自动配置类打包到 Starter 中，用户无需手动编写这些样板配置。</li><li><strong>标准化集成方式：</strong> 强制用户通过引入 Starter 来集成你的库，确保他们使用了正确的依赖组合和默认配置。</li><li><strong>隐藏实现细节：</strong> 用户无需关心你的库内部依赖了哪些第三方库，以及如何在 Spring Boot 中进行繁琐的初始化配置。</li></ul><h3 id="自定义-starter-的架构与组成-重点" tabindex="-1"><a class="header-anchor" href="#自定义-starter-的架构与组成-重点"><span>自定义 Starter 的架构与组成 (重点)</span></a></h3><p>一个典型的自定义 Starter 通常由<strong>两个模块</strong>组成（推荐使用 Maven 或 Gradle 的多模块项目来组织）：</p><ol><li><strong>Starter 模块 (<code>*-spring-boot-starter</code>)：</strong> 这是用户项目直接引入的依赖。它本身通常是一个非常简单的 POM 文件，只包含对核心库和<strong>自动配置模块</strong>的依赖。它的主要作用就是通过依赖传递，将自动配置模块和核心库及其所有相关依赖带入到用户项目的 Classpath 中。</li><li><strong>自动配置模块 (<code>*-spring-boot-autoconfigure</code>)：</strong> 这是 Starter 的“大脑”，包含了真正的自动配置逻辑。这个模块是一个标准的 JAR 包，内部包含： <ul><li><strong>自动配置类：</strong> 用 <code>@Configuration</code> 标注的类，内部定义了 <code>@Bean</code> 方法，并使用 <code>@Conditional</code> 注解根据条件决定是否生效。</li><li><strong><code>META-INF/spring.factories</code> 文件：</strong> <strong>这个文件是连接 Starter 和自动配置的关键！</strong> 它位于 <code>resources/META-INF</code> 目录下，其中最重要的配置项就是 <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>。该 key 对应的值就是自动配置模块中所有需要被 Spring Boot 扫描到的自动配置类的全限定名列表。当用户项目引入了 Starter（从而将自动配置模块带入 Classpath），Spring Boot 的启动过程就会通过 <code>SpringFactoriesLoader</code> 机制发现并加载 <code>spring.factories</code> 文件中指定的自动配置类。</li><li>可能还包含用于绑定配置文件的属性类（用 <code>@ConfigurationProperties</code> 标注）。</li></ul></li></ol><p><strong>架构图示 (概念):</strong></p><p>用户项目 -&gt; 引入 Starter 模块 (<code>my-client-spring-boot-starter</code>) ↓ 依赖传递 自动配置模块 (<code>my-client-spring-boot-autoconfigure</code>) + 核心库模块 (<code>my-client-core</code>) + 其他依赖 ↓ <code>my-client-spring-boot-autoconfigure</code> 模块包含 自动配置类 (<code>MyClientAutoConfiguration.java</code>) <code>META-INF/spring.factories</code> (指向 <code>MyClientAutoConfiguration</code>) ↓ Spring Boot 启动时，通过 <code>SpringFactoriesLoader</code> 发现 <code>spring.factories</code> -&gt; 加载 <code>MyClientAutoConfiguration</code> -&gt; 根据 <code>@Conditional</code> 判断是否生效 -&gt; 如果生效，执行 <code>@Bean</code> 方法，创建 Bean 到容器。</p><h3 id="手把手创建自定义-starter" tabindex="-1"><a class="header-anchor" href="#手把手创建自定义-starter"><span>手把手创建自定义 Starter</span></a></h3><p>我们将以一个简单的场景为例：创建一个 Starter 来集成一个虚构的第三方 Java 库 <code>MyClient</code>，该库提供一个简单的客户端类 <code>MyClient</code> 和一个配置类 <code>MyClientProperties</code>。</p><p>假设 <code>MyClient</code> 库的代码如下 (这是一个独立的库，我们不修改它)：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 核心库模块 (假设在 com.example.myclient.core 包)</span>

<span class="token comment">// 客户端配置属性类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClientProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverUrl <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>
    <span class="token comment">// getters and setters</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 客户端类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverUrl<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> timeout<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyClient</span><span class="token punctuation">(</span><span class="token class-name">String</span> serverUrl<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>serverUrl <span class="token operator">=</span> serverUrl<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyClient created with URL: &quot;</span> <span class="token operator">+</span> serverUrl <span class="token operator">+</span> <span class="token string">&quot;, Timeout: &quot;</span> <span class="token operator">+</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyClient sending request to &quot;</span> <span class="token operator">+</span> serverUrl <span class="token operator">+</span> <span class="token string">&quot; with data: &quot;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 模拟发送请求</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们来创建 Spring Boot Starter 项目。</p><p><strong>Step 1: 创建一个多模块 Maven 项目</strong></p><p>项目结构如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>my-client-spring-boot
├── pom.xml             (Parent POM)
├── my-client-spring-boot-autoconfigure
│   └── pom.xml         (Auto-configure Module POM)
│   └── src/main/java/...
│   └── src/main/resources/META-INF/spring.factories
└── my-client-spring-boot-starter
    └── pom.xml         (Starter Module POM)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Parent POM (<code>my-client-spring-boot/pom.xml</code>):</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-client-spring-boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span> // 父模块使用 pom 打包类型

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>my-client-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>my-client-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot.version</span><span class="token punctuation">&gt;</span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot.version</span><span class="token punctuation">&gt;</span></span> // 定义 Spring Boot 版本
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span> // 统一管理依赖版本
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring-boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 2: 创建自动配置模块 (<code>my-client-spring-boot-autoconfigure</code>)</strong></p><p>Auto-configure Module POM (<code>my-client-spring-boot-autoconfigure/pom.xml</code>):</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-client-spring-boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-client-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        // 引入 Spring Boot Auto-configure 模块本身
        // 它包含了 @Configuration, @Conditional 等自动配置相关的类
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        // 引入用于绑定配置属性的模块
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span> // 这个是可选的，用于生成配置元数据，提供IDE提示
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        // **引入你的核心库依赖！**
        // 假设核心库 groupId 是 com.example, artifactId 是 my-client-core, version 是 1.0.0
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-client-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> // 使用你的核心库版本
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        // 可能还需要其他 Spring 相关的依赖，例如如果你的客户端需要 Spring 的 RestTemplate
        // <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        //      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        //      artifactId&gt;spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        // <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建配置属性类 (<code>com.example.myclient.autoconfigure.MyClientProperties</code>):</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 放在 auto-configure 模块中</span>

<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myclient<span class="token punctuation">.</span>autoconfigure</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;myclient&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 绑定 application.properties/yml 中以 myclient 开头的属性</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClientProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverUrl <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> serverUrl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setServerUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> serverUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverUrl <span class="token operator">=</span> serverUrl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> timeout<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>注意：这个 <code>MyClientProperties</code> 是独立于核心库的，放在 auto-configure 模块中，用于适配 Spring Boot 的配置绑定机制。</em></p><p>创建自动配置类 (<code>com.example.myclient.autoconfigure.MyClientAutoConfiguration</code>):</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 放在 auto-configure 模块中</span>

<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myclient<span class="token punctuation">.</span>autoconfigure</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myclient<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MyClient</span></span><span class="token punctuation">;</span> <span class="token comment">// 引入核心库中的类</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myclient<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MyClientProperties</span> as <span class="token class-name">CoreClientProperties</span><span class="token punctuation">;</span> <span class="token comment">// 核心库中可能也有同名属性类，这里用别名区分</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">AutoConfiguration</span></span><span class="token punctuation">;</span> <span class="token comment">// Spring Boot 2.7+ 推荐使用 @AutoConfiguration</span>
<span class="token comment">// import org.springframework.boot.autoconfigure.condition.ConditionalOnClass; // 如果使用 Spring Boot 2.6-</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnMissingBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">EnableConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>

<span class="token comment">// @AutoConfiguration 或 @Configuration (取决于 Spring Boot 版本)</span>
<span class="token comment">// @ConditionalOnClass 注解确保只有当 MyClient 类在 Classpath 中存在时，这个自动配置类才可能生效</span>
<span class="token comment">// @ConditionalOnClass(MyClient.class) // 如果核心库类名 MyClient 独特性足够，可以使用</span>
<span class="token comment">// 如果 MyClient 类名可能与其他库冲突，可以使用更独特的类名判断，或者组合判断</span>
<span class="token annotation punctuation">@AutoConfiguration</span> <span class="token comment">// Spring Boot 2.7+</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">MyClientProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 让 MyClientProperties 生效并绑定属性</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClientAutoConfiguration</span> <span class="token punctuation">{</span>

    <span class="token comment">// 定义一个 Bean，使用 @ConditionalOnMissingBean 确保只有当容器中没有 MyClient 类型的 Bean 时才创建</span>
    <span class="token comment">// 这样用户可以手动配置一个 MyClient Bean 来覆盖自动配置</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">MyClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MyClient</span> <span class="token function">myClient</span><span class="token punctuation">(</span><span class="token class-name">MyClientProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用绑定好的属性创建核心库的 MyClient 实例</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyClient</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如果核心库的 MyClientProperties 需要作为 Bean 注册，可以在这里定义 Bean</span>
    <span class="token comment">// 但通常 Spring Boot 的配置绑定机制 (EnableConfigurationProperties) 已经让其属性可用，不一定需要注册为 Bean</span>
    <span class="token comment">// @Bean</span>
    <span class="token comment">// public CoreClientProperties coreClientProperties(MyClientProperties properties) {</span>
    <span class="token comment">//     // 根据 auto-configure 的属性创建核心库的属性对象</span>
    <span class="token comment">//     CoreClientProperties coreProps = new CoreClientProperties();</span>
    <span class="token comment">//     coreProps.setServerUrl(properties.getServerUrl());</span>
    <span class="token comment">//     coreProps.setTimeout(properties.getTimeout());</span>
    <span class="token comment">//     return coreProps;</span>
    <span class="token comment">// }</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 <code>META-INF/spring.factories</code> 文件 (<code>my-client-spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories</code>):</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># Auto Configure</span>
<span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\
com.example.myclient.autoconfigure.MyClientAutoConfiguration</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>这是关键步骤！它告诉 Spring Boot：我的自动配置类是 <code>com.example.myclient.autoconfigure.MyClientAutoConfiguration</code>。</em></p><p><strong>Step 3: 创建 Starter 模块 (<code>my-client-spring-boot-starter</code>)</strong></p><p>Starter Module POM (<code>my-client-spring-boot-starter/pom.xml</code>):</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-client-spring-boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

    // **遵循命名规范：*-spring-boot-starter**
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-client-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        // **核心：依赖你的自动配置模块**
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-client-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> // 使用同一个版本
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        // **可选：直接引入核心库依赖 (如果自动配置模块没有引入的话)**
        // **通常自动配置模块会依赖核心库，通过传递依赖到这里**
        // 但如果核心库本身也需要依赖管理，可以在这里再次声明，并省略 version
        // <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        //      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        //      artifactId&gt;my-client-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        // <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        // 你还可以根据需要在这里引入其他常用的第三方依赖，这些依赖会被传递给用户项目
        // 例如，如果你的客户端通常与 Spring Web 集成，可以考虑引入 spring-boot-starter-web
        // 但要小心，不要引入不必要的依赖，保持 Starter 最小化
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 4: 构建项目</strong></p><p>在项目根目录 (<code>my-client-spring-boot</code>) 执行 <code>mvn clean install</code>。这会构建并安装父模块、自动配置模块和 Starter 模块到本地 Maven 仓库。</p><h3 id="使用自定义-starter" tabindex="-1"><a class="header-anchor" href="#使用自定义-starter"><span>使用自定义 Starter</span></a></h3><p>现在，其他 Spring Boot 项目就可以像使用官方 Starter 一样，在 <code>pom.xml</code> 中引入你的自定义 Starter 了：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> // 使用 Spring Boot 父级 POM 管理版本
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-app-using-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> // 引入 Spring Boot 核心 Starter
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        // **引入你的自定义 Starter**
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-client-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> // 使用你 Starter 的版本
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        // 其他依赖...

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    // ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在用户项目的 <code>application.properties</code> 或 <code>application.yml</code> 中，可以配置 <code>MyClient</code> 的属性：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># application.properties</span>
<span class="token key attr-name">myclient.server-url</span><span class="token punctuation">=</span><span class="token value attr-value">http://my.custom.server:9090</span>
<span class="token key attr-name">myclient.timeout</span><span class="token punctuation">=</span><span class="token value attr-value">10000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当这个用户项目启动时：</p><ol><li><code>my-client-spring-boot-starter</code> 被添加到 Classpath。</li><li>通过依赖传递，<code>my-client-spring-boot-autoconfigure</code> 和 <code>my-client-core</code> (及其他相关依赖) 也被添加到 Classpath。</li><li>Spring Boot 启动，<code>SpringFactoriesLoader</code> 扫描 Classpath 下的 <code>META-INF/spring.factories</code> 文件。</li><li>发现 <code>my-client-spring-boot-autoconfigure</code> 模块中的 <code>spring.factories</code> 文件，并找到其中注册的自动配置类 <code>com.example.myclient.autoconfigure.MyClientAutoConfiguration</code>。</li><li>在启动流程的适当阶段，Spring Boot 处理 <code>MyClientAutoConfiguration</code> 类： <ul><li><code>@EnableConfigurationProperties(MyClientProperties.class)</code> 使 <code>application.properties</code> 中以 <code>myclient</code> 开头的属性绑定到 <code>MyClientProperties</code> 对象。</li><li><code>@ConditionalOnMissingBean(MyClient.class)</code> 检查容器中是否已经有 <code>MyClient</code> 类型的 Bean。如果<strong>没有</strong>，则执行 <code>@Bean</code> 方法。</li><li>执行 <code>myClient()</code> 方法，使用绑定好的 <code>MyClientProperties</code> 属性创建一个 <code>MyClient</code> 实例，并将其注册为 Spring 容器中的一个 Bean。</li></ul></li><li>用户项目中的其他 Bean 可以通过 <code>@Autowired</code> 直接注入 <code>MyClient</code> 类型的 Bean 来使用它，而无需手动配置。</li></ol><p>这就是 Starter 如何通过聚合依赖和结合自动配置，极大地简化第三方库在 Spring Boot 中的集成过程。</p><h3 id="starter-命名规范" tabindex="-1"><a class="header-anchor" href="#starter-命名规范"><span>Starter 命名规范</span></a></h3><p>遵循 Spring Boot 官方的 Starter 命名规范非常重要，这有助于开发者识别和查找 Starter。</p><ul><li><strong>官方 Starter：</strong> <code>spring-boot-starter-*</code> (例如 <code>spring-boot-starter-web</code>)，由 Spring Boot 团队维护。</li><li><strong>自定义 Starter：</strong> <code>*-spring-boot-starter</code> (例如 <code>my-client-spring-boot-starter</code>)。请注意，自定义 Starter 的名称前缀是你自己的模块名，后缀是 <code>-spring-boot-starter</code>。</li></ul><h3 id="理解-starter-与自动配置的关系-重申" tabindex="-1"><a class="header-anchor" href="#理解-starter-与自动配置的关系-重申"><span>理解 Starter 与自动配置的关系 (重申)</span></a></h3><p>再次强调，Starter 和自动配置是紧密协作的伙伴：</p><ul><li><strong>Starter 负责：</strong> 将特定场景所需的<strong>库文件（<code>.jar</code> 包）<strong>引入到项目的 Classpath 中。它是一个</strong>依赖管理工具</strong>。</li><li><strong>自动配置负责：</strong> 扫描 Classpath，检测是否存在特定的库（通过 <code>@ConditionalOnClass</code> 等注解），并根据条件<strong>自动配置和注册所需的 Bean</strong>。它是<strong>配置工具</strong>。</li></ul><p>Starter 引入了原材料，自动配置则利用这些原材料为你做好菜。自定义 Starter 就是将你的原材料和做菜的食谱（自动配置类）一起打包，方便别人取用。</p><h3 id="理解-starter-的价值" tabindex="-1"><a class="header-anchor" href="#理解-starter-的价值"><span>理解 Starter 的价值</span></a></h3><ul><li><strong>模块化：</strong> 将特定功能的集成打包成独立的模块。</li><li><strong>可复用性：</strong> 可以在不同的 Spring Boot 项目中轻松复用。</li><li><strong>提升开发者体验 (DX)：</strong> 极大简化了库的集成过程，让库的用户更愉快。</li><li><strong>版本管理：</strong> 结合 Spring Boot 的父级 POM/BOM，统一管理依赖版本，减少冲突。</li></ul><h3 id="starter-为何是面试热点" tabindex="-1"><a class="header-anchor" href="#starter-为何是面试热点"><span>Starter 为何是面试热点</span></a></h3><p>面试官喜欢考察 Starter，是因为：</p><ul><li>它是 Spring Boot 解决依赖管理痛点的核心方案，反映你对现代构建方式的理解。</li><li>创建自定义 Starter 需要理解自动配置原理，特别是 <code>@Conditional</code> 注解和 <code>spring.factories</code> 机制，这能深入考察你对 Spring Boot 底层原理的掌握程度。</li><li>它结合了依赖管理、自动配置、模块化等多个重要概念。</li></ul><h3 id="面试问题示例与深度解析" tabindex="-1"><a class="header-anchor" href="#面试问题示例与深度解析"><span>面试问题示例与深度解析</span></a></h3><ol><li><strong>SpringBoot Starter 是什么？它的作用是什么？</strong><ul><li><strong>要点：</strong> 定义 Starter 为依赖聚合器。作用：简化依赖管理，减少版本冲突，提供一站式集成，通常包含自动配置模块。举例说明 <code>spring-boot-starter-web</code>。</li></ul></li><li><strong>官方 Starter 和自定义 Starter 的命名规范有什么区别？</strong><ul><li><strong>要点：</strong> 官方：<code>spring-boot-starter-*</code>；自定义：<code>*-spring-boot-starter</code>。</li></ul></li><li><strong>如何创建一个自定义 Starter？请简述过程。</strong><ul><li><strong>要点：</strong> 简述推荐的多模块结构（父 -&gt; auto-configure + starter）。重点说明 auto-configure 模块包含自动配置类 (<code>@Configuration</code>, <code>@Conditional</code>, <code>@Bean</code>) 和 <code>META-INF/spring.factories</code> 文件（关键！）。Starter 模块主要依赖 auto-configure 模块。</li></ul></li><li><strong>在自定义 Starter 中，<code>spring.factories</code> 文件有什么作用？它应该放在哪里？</strong><ul><li><strong>要点：</strong> 作用：通过 <code>SpringFactoriesLoader</code> 机制，告诉 Spring Boot 容器哪些类是自动配置类。Spring Boot 扫描并加载这些类进行自动配置。位置：应该放在自动配置模块的 <code>src/main/resources/META-INF/</code> 目录下。</li></ul></li><li><strong>自定义 Starter 中的自动配置类是如何被 Spring Boot 发现和加载的？</strong><ul><li><strong>要点：</strong> 当用户项目引入 Starter，auto-configure 模块进入 Classpath。Spring Boot 启动时，<code>SpringFactoriesLoader</code> 扫描 Classpath 中的 <code>META-INF/spring.factories</code> 文件，读取 <code>EnableAutoConfiguration</code> 对应的类名列表。然后，在启动流程的适当阶段，根据这些类上的 <code>@Conditional</code> 注解判断是否生效，最终加载符合条件的自动配置类。</li></ul></li><li><strong>创建自定义 Starter 时，为什么推荐使用多模块项目？</strong><ul><li><strong>要点：</strong> 将用户直接引用的 Starter POM 和包含核心逻辑的自动配置模块分离开，结构清晰，职责明确。Starter POM 保持简洁，只负责依赖聚合；自动配置模块专注于实现配置逻辑。</li></ul></li><li><strong>你的核心库依赖应该放在 Starter 模块还是 Auto-configure 模块？为什么？</strong><ul><li><strong>要点：</strong> 通常放在 Auto-configure 模块。原因：自动配置类需要直接依赖核心库才能创建和配置其中的 Bean。通过 Auto-configure 模块依赖核心库，再由 Starter 模块依赖 Auto-configure 模块，核心库就会通过依赖传递到达用户项目。</li></ul></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Spring Boot Starter 是简化依赖管理和实现功能模块化的强大工具。通过遵循命名规范和利用 <code>META-INF/spring.factories</code> 文件，Starter 能够与 Spring Boot 的自动配置机制紧密协作，为用户提供“一站式”的集成体验。</p><p>创建自定义 Starter 是将你的库或模块与 Spring Boot 生态无缝融合的关键步骤。它不仅能提高你库的易用性，也能加深你对 Spring Boot 自动配置原理的理解，是从会用 Spring Boot 到精通 Spring Boot 的重要标志。</p>`,74)]))}const r=s(p,[["render",o],["__file","springboot-starter.html.vue"]]),u=JSON.parse('{"path":"/springboot/springboot-starter.html","title":"","lang":"zh-CN","frontmatter":{"description":"在我们之前的文章中，我们深入探讨了 Spring Boot 的架构设计，特别是其核心——自动配置（Auto-configuration）。我们了解到，自动配置是 Spring Boot 实现“开箱即用”的关键，它根据 classpath 中的依赖和环境条件，智能地为我们配置 Bean。 那么，这些“依赖”是如何以一种便捷的方式被引入的呢？答案就是 Sp...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/springboot/springboot-starter.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"在我们之前的文章中，我们深入探讨了 Spring Boot 的架构设计，特别是其核心——自动配置（Auto-configuration）。我们了解到，自动配置是 Spring Boot 实现“开箱即用”的关键，它根据 classpath 中的依赖和环境条件，智能地为我们配置 Bean。 那么，这些“依赖”是如何以一种便捷的方式被引入的呢？答案就是 Sp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"深度解析 Spring Boot Starter：简化依赖，以及如何打造你的专属“工具箱”","slug":"深度解析-spring-boot-starter-简化依赖-以及如何打造你的专属-工具箱","link":"#深度解析-spring-boot-starter-简化依赖-以及如何打造你的专属-工具箱","children":[{"level":3,"title":"引言：告别依赖地狱，迎接一站式集成","slug":"引言-告别依赖地狱-迎接一站式集成","link":"#引言-告别依赖地狱-迎接一站式集成","children":[]},{"level":3,"title":"Spring Boot Starter 是什么？","slug":"spring-boot-starter-是什么","link":"#spring-boot-starter-是什么","children":[]},{"level":3,"title":"为什么创建自定义 Starter？","slug":"为什么创建自定义-starter","link":"#为什么创建自定义-starter","children":[]},{"level":3,"title":"自定义 Starter 的架构与组成 (重点)","slug":"自定义-starter-的架构与组成-重点","link":"#自定义-starter-的架构与组成-重点","children":[]},{"level":3,"title":"手把手创建自定义 Starter","slug":"手把手创建自定义-starter","link":"#手把手创建自定义-starter","children":[]},{"level":3,"title":"使用自定义 Starter","slug":"使用自定义-starter","link":"#使用自定义-starter","children":[]},{"level":3,"title":"Starter 命名规范","slug":"starter-命名规范","link":"#starter-命名规范","children":[]},{"level":3,"title":"理解 Starter 与自动配置的关系 (重申)","slug":"理解-starter-与自动配置的关系-重申","link":"#理解-starter-与自动配置的关系-重申","children":[]},{"level":3,"title":"理解 Starter 的价值","slug":"理解-starter-的价值","link":"#理解-starter-的价值","children":[]},{"level":3,"title":"Starter 为何是面试热点","slug":"starter-为何是面试热点","link":"#starter-为何是面试热点","children":[]},{"level":3,"title":"面试问题示例与深度解析","slug":"面试问题示例与深度解析","link":"#面试问题示例与深度解析","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1745924024000,"updatedTime":1746115551000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":2}]},"readingTime":{"minutes":15.96,"words":4787},"filePathRelative":"springboot/springboot-starter.md","localizedDate":"2025年4月29日","autoDesc":true}');export{r as comp,u as data};
