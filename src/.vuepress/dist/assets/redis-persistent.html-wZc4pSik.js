import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e as n,o as r}from"./app-CzKZ5RuK.js";const t={};function d(i,e){return r(),s("div",null,e[0]||(e[0]=[n(`<h2 id="数据不丢的秘密-redis持久化机制深度解析-rdb-vs-aof" tabindex="-1"><a class="header-anchor" href="#数据不丢的秘密-redis持久化机制深度解析-rdb-vs-aof"><span>数据不丢的秘密：Redis持久化机制深度解析（RDB vs AOF）</span></a></h2><p>Redis以其内存存储带来的极速性能而闻名，但内存数据最大的问题在于其<strong>易失性</strong>——一旦服务器宕机、重启或Redis进程崩溃，内存中的数据就会烟消云散。这对于缓存固然可以接受，但对于需要持久存储的数据（如分布式锁、计数器、排行榜等）来说，数据丢失是绝对不能容忍的。</p><p>为了解决数据丢失问题，Redis提供了**持久化（Persistence）**机制，能够将内存中的数据保存到磁盘上，并在重启时从磁盘加载数据进行恢复。Redis支持两种主要的持久化方式：<strong>RDB（Redis Database）<strong>和</strong>AOF（Append Only File）</strong>。理解它们的工作原理、优劣及适用场景，是构建高可靠Redis应用的关键。</p><h3 id="一、-rdb-redis-database-持久化-快照模式" tabindex="-1"><a class="header-anchor" href="#一、-rdb-redis-database-持久化-快照模式"><span>一、 RDB (Redis Database) 持久化：快照模式</span></a></h3><p>RDB持久化是通过生成数据集的<strong>时间点快照</strong>来记录数据。就像给Redis内存里的数据拍了一张照片，定格住某一刻的状态。</p><p><strong>概念：</strong> 在指定的时间间隔内，将Redis内存中的<strong>全量数据</strong>以一种紧凑的二进制格式写入磁盘上的一个临时文件（默认为 <code>dump.rdb</code>），写入完成后原子性地替换掉上一次的RDB文件。</p><p><strong>工作原理深度解析：</strong></p><p>Redis提供了两种生成RDB文件的方式：</p><ol><li><p><strong><code>SAVE</code> 命令：</strong></p><ul><li><strong>原理：</strong> 这是同步保存方式。Redis主线程在收到 <code>SAVE</code> 命令后，会立即阻塞，不再处理任何客户端命令，直到RDB文件全部创建完成。</li><li><strong>影响：</strong> <strong>会长时间阻塞Redis</strong>，导致服务在保存期间不可用。<strong>（关联“为什么快”和“线程模型”中提到的慢命令阻塞主线程的危害）</strong>。</li><li><strong>适用场景：</strong> 极少在生产环境使用，通常只用于维护期间手动备份，且必须确保Redis可以短时间停服。</li></ul></li><li><p><strong><code>BGSAVE</code> 命令：</strong></p><ul><li><strong>原理：</strong> 这是后台保存方式，也是生产环境推荐的方式。当执行 <code>BGSAVE</code> 命令时（无论是手动触发还是配置自动触发），Redis主进程会调用标准的Unix <code>fork()</code> 系统调用创建一个<strong>子进程</strong>。</li><li><strong>子进程的角色：</strong> 这个子进程几乎复制了父进程（主进程）的内存空间视图，然后由它负责将父进程内存中的数据写入到一个临时RDB文件中。由于写盘操作由子进程完成，<strong>主进程可以继续处理客户端命令，不会被磁盘I/O阻塞</strong>。</li><li><strong>Copy-On-Write (CoW) 机制：</strong> 这是 <code>fork()</code> 实现“后台”保存的关键。<code>fork()</code> 创建子进程时，父子进程共享同一份物理内存页。当主进程需要修改某个内存页的数据时（例如执行一个写命令），操作系统不会直接在原内存页上修改，而是先将该页<strong>复制</strong>一份，父进程在新复制的页上修改数据，而子进程仍然访问原始的内存页。这样，子进程看到的是 <code>fork()</code> 时刻的完整内存快照，同时主进程可以继续进行数据修改。但频繁的写入会导致大量内存页被复制，<strong>可能瞬间导致Redis的实际内存使用量翻倍或更多</strong>。</li><li><strong>完成与替换：</strong> 子进程完成临时RDB文件写入后，会向父进程发送一个信号。主进程接收到信号后，会将这个临时文件原子性地重命名（替换掉旧的 <code>dump.rdb</code> 文件），完成一次新的RDB快照保存。</li></ul></li></ol><p><strong>配置 (<code>save</code> directive):</strong></p><p>可以通过修改 <code>redis.conf</code> 文件来配置自动触发 <code>BGSAVE</code> 的条件。<code>save</code> 配置的格式是 <code>save &lt;seconds&gt; &lt;changes&gt;</code>，表示在 <code>&lt;seconds&gt;</code> 秒内，如果发生至少 <code>&lt;changes&gt;</code> 次写操作，就自动触发一次 <code>BGSAVE</code>。可以配置多个 <code>save</code> 条件：</p><div class="language-conf line-numbers-mode" data-ext="conf" data-title="conf"><pre class="language-conf"><code>save 900 1   # 900秒 (15分钟) 内至少有 1 个写操作
save 300 10  # 300秒 (5分钟) 内至少有 10 个写操作
save 60 10000 # 60秒 (1分钟) 内至少有 10000 个写操作
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>满足任何一个条件都会触发 <code>BGSAVE</code>。如果要关闭RDB持久化，注释掉或删除所有 <code>save</code> 行即可。</p><p><strong>RDB的优势：</strong></p><ul><li><strong>文件紧凑：</strong> RDB 文件是高度压缩的二进制格式，文件体积小，适合存储和网络传输。</li><li><strong>恢复速度快：</strong> Redis 加载 RDB 文件进行数据恢复比 AOF 的重放命令快得多。</li><li><strong>适合备份：</strong> RDB 文件是单一文件，便于定期备份和异地容灾。</li><li><strong>对主进程影响较小（BGSAVE）：</strong> 磁盘写操作在子进程中，主进程只在 <code>fork()</code> 瞬间和替换文件时有短暂阻塞。</li></ul><p><strong>RDB的劣势：</strong></p><ul><li><strong>数据丢失风险高：</strong> RDB 是时间点快照，如果 Redis 在两次 <code>BGSAVE</code> 之间发生宕机，<strong>从上一次成功保存到宕机之间的数据会全部丢失</strong>。数据安全性取决于你配置的 <code>save</code> 策略，保存越频繁，丢失数据越少，但 <code>BGSAVE</code> 频率越高，<code>fork()</code> 开销越大。</li><li><strong><code>fork()</code> 的开销：</strong> <code>fork()</code> 操作需要复制父进程的页表，对于内存很大的 Redis 实例，<code>fork</code> 过程本身可能耗时几百毫秒甚至秒级，这段时间主进程是<strong>完全阻塞</strong>的。CoW 机制虽然优秀，但在写高峰期可能导致实际内存使用量显著增加。</li></ul><p><strong>恢复过程：</strong></p><p>Redis 启动时，会检查工作目录下是否存在 <code>dump.rdb</code> 文件（或通过 <code>dir</code> 和 <code>dbfilename</code> 配置指定的文件）。如果存在，Redis 会自动加载这个文件来恢复数据。加载过程中 Redis 是阻塞的，无法处理客户端命令。</p><h3 id="二、-aof-append-only-file-持久化-日志追加模式" tabindex="-1"><a class="header-anchor" href="#二、-aof-append-only-file-持久化-日志追加模式"><span>二、 AOF (Append Only File) 持久化：日志追加模式</span></a></h3><p>AOF 持久化记录 Redis 服务器接收到的<strong>每个写操作命令</strong>。它将命令追加到 AOF 文件的末尾，以此来记录数据集的变化。就像一个日记，记录了到达 Redis 的每一步“修改”操作。</p><p><strong>概念：</strong> AOF持久化将每个<strong>写命令</strong>（例如 <code>SET foo bar</code>, <code>LPUSH mylist a b</code>）都以 Redis 协议格式追加到磁盘上的 <code>appendonly.aof</code> 文件末尾。</p><p><strong>工作原理深度解析：</strong></p><p>AOF 的工作过程可以分为命令追加、文件同步、AOF 重写三个主要环节：</p><ol><li><p><strong>命令追加 (Append)：</strong></p><ul><li>Redis 收到一个写命令后，先<strong>执行</strong>该命令，将数据写入内存。</li><li>然后，将该命令以 Redis 协议格式追加到 <strong>AOF 缓冲区</strong>（一个内存缓冲区）。</li></ul></li><li><p><strong>AOF 缓冲区同步到磁盘 (<code>appendfsync</code>)：</strong></p><ul><li>AOF 缓冲区的内容会根据 <code>appendfsync</code> 配置策略同步到磁盘的 AOF 文件。这是 AOF 数据安全性和性能权衡的关键点。 <ul><li><strong><code>always</code>：</strong> <strong>每个写命令</strong>执行后，都将 AOF 缓冲区的所有内容<strong>同步</strong> (<code>sync</code>) 到磁盘的 AOF 文件，并强制操作系统立即将数据从文件系统缓存<strong>刷盘</strong> (<code>fsync</code>)。 <ul><li><strong>安全性：最高。</strong> 几乎不丢失数据（即使操作系统或机器宕机），因为数据已经强制写入磁盘。</li><li><strong>性能：最低。</strong> 完全取决于磁盘的随机写性能，每秒的写QPS会显著降低，因为每次写命令都要等待磁盘刷盘完成。极少用于生产环境。</li></ul></li><li><strong><code>everysec</code>：</strong> Redis 会创建一个<strong>后台线程</strong>。主线程每收到一个写命令，将命令追加到 AOF 缓冲区。后台线程<strong>每隔一秒</strong>将 AOF 缓冲区的所有内容同步到 AOF 文件，并强制刷盘 (<code>fsync</code>)。<strong>（关联“线程模型”中的后台线程作用）</strong>。 <ul><li><strong>安全性：较高。</strong> 最多丢失1秒的数据。如果Redis在刷盘间隔内宕机，可能会丢失这1秒的写操作。</li><li><strong>性能：良好。</strong> 大多数写操作只在内存缓冲区追加，速度快。磁盘刷盘操作在后台线程异步执行，对主线程影响较小（但仍有影响，比如操作系统将数据从页缓存刷到磁盘时）。这是<strong>生产环境最常用</strong>的配置。</li></ul></li><li><strong><code>no</code>：</strong> Redis 将 AOF 缓冲区内容同步到 AOF 文件由操作系统控制，Redis 不主动进行 <code>fsync</code>。通常由操作系统的后台线程每隔30秒或缓冲区满时自动刷盘。 <ul><li><strong>安全性：最低。</strong> 宕机时可能丢失较多数据（取决于操作系统何时刷盘）。</li><li><strong>性能：最高。</strong> 写入速度快，因为Redis不等待刷盘。</li></ul></li></ul></li><li><strong>面试关联点：</strong> <code>appendfsync</code> 的三种策略是 AOF 的核心面试点，需要清晰解释其原理、优劣、数据丢失风险以及对性能的影响。</li></ul></li><li><p><strong>AOF 重写 (<code>BGREWRITEAOF</code>)：</strong></p><ul><li><strong>为什么需要重写？</strong> 随着时间推移，AOF 文件会不断变大，因为它记录了所有写命令。很多命令可能是冗余的（如对同一个Key的多次SET、INCR，Key过期删除等）。AOF 重写就是为了生成一个<strong>更小、更紧凑、不含冗余命令</strong>的新 AOF 文件，从而减少磁盘占用和加快恢复速度。</li><li><strong>原理：</strong><ul><li><code>BGREWRITEAOF</code> 命令（可以手动执行，也可以通过 <code>auto-aof-rewrite-percentage</code> 和 <code>auto-aof-rewrite-min-size</code> 配置自动触发）会 <code>fork()</code> 一个<strong>子进程</strong>。</li><li><strong>子进程的角色：</strong> 子进程遍历 Redis 内存中的<strong>当前数据集</strong>（利用 CoW 机制保证一致性），将生成一系列能够恢复当前数据集的<strong>最小命令集</strong>，并将这些命令写入到一个临时 AOF 文件中。例如，对一个计数器 <code>foo</code> 执行了 100 次 <code>INCR foo</code>，重写后只会记录一条 <code>SET foo 100</code> 命令。</li><li><strong>父进程的同步：</strong> 在子进程重写 AOF 期间，主进程继续处理客户端的写命令。这些新的写命令会<strong>同时追加到两个地方</strong>：旧的 AOF 文件末尾（防止重写失败，旧 AOF 仍然可用）和一个<strong>AOF 重写缓冲区</strong>（内存中）。</li><li><strong>完成与替换：</strong> 子进程完成临时 AOF 文件写入后，会通知主进程。主进程会将 <strong>AOF 重写缓冲区</strong>中的内容（重写期间的新写命令）追加到子进程生成的新临时 AOF 文件末尾，以保证新文件的完整性。最后，主进程原子性地将这个包含了重写后数据和重写期间新命令的新 AOF 文件替换掉旧的 AOF 文件。</li></ul></li><li><strong>面试关联点：</strong> AOF 重写的原理，如何处理重写期间的新写命令（双写旧AOF和重写缓冲区，最后追加缓冲区内容到新AOF）。</li></ul></li></ol><p><strong>配置 (<code>appendonly yes</code>, <code>appendfsync</code>, <code>auto-aof-rewrite-*</code>):</strong></p><ul><li><code>appendonly yes</code>: 开启AOF持久化。</li><li><code>appendfsync everysec</code>: 设置AOF同步策略（推荐）。</li><li><code>auto-aof-rewrite-percentage 100</code>: 当 AOF 文件大小（不包含重写缓冲区大小）比上次重写完成时的大小（或启动时的大小）增加 100% 时，触发自动重写。</li><li><code>auto-aof-rewrite-min-size 64mb</code>: 当 AOF 文件大小达到 64MB 时，才可能触发自动重写（即使满足percentage条件）。</li></ul><p><strong>AOF的优势：</strong></p><ul><li><strong>数据安全性高：</strong> 根据 <code>appendfsync</code> 配置，可以实现很高的数据安全性，<code>everysec</code> 是常用的权衡选择，最多丢失1秒数据。</li><li><strong>文件人类可读：</strong> AOF 文件内容是 Redis 命令，理论上可以手动编辑（但不建议直接修改正在使用的 AOF 文件）。</li><li><strong>追加写：</strong> AOF 文件通常是追加写，相比 RDB 的全量写，随机写性能要求低。</li></ul><p><strong>AOF的劣势：</strong></p><ul><li><strong>文件通常比RDB大：</strong> 记录的是命令序列而非压缩的数据。</li><li><strong>恢复速度相对慢：</strong> 启动时需要逐条重放命令来恢复数据，速度比加载 RDB 文件慢。</li><li><strong>对性能有一定影响：</strong> 即使是 <code>everysec</code>，后台线程的刷盘操作也可能带来短暂的延迟。<code>always</code> 模式影响更大。AOF 重写也需要 CPU 和内存资源。</li></ul><p><strong>恢复过程：</strong></p><p>Redis 启动时，如果 AOF 功能开启 (<code>appendonly yes</code>)，Redis 会优先加载 AOF 文件进行恢复。它会解析 AOF 文件中的命令，并在内存中逐条执行这些命令来重建数据集。加载过程中 Redis 是阻塞的。</p><h3 id="三、-rdb-和-aof-的选择与组合" tabindex="-1"><a class="header-anchor" href="#三、-rdb-和-aof-的选择与组合"><span>三、 RDB 和 AOF 的选择与组合</span></a></h3><p><strong>如何选择？</strong></p><ul><li><strong>纯内存缓存，数据不重要：</strong> 关闭持久化（性能最好）。</li><li><strong>对数据丢失不敏感，追求最高性能和快速启动：</strong> 只使用 RDB。</li><li><strong>对数据丢失零容忍，能接受较低的写性能：</strong> 只使用 AOF (<code>appendfsync always</code>)，但极少用。</li><li><strong>性能和数据安全性的平衡（最多丢失1秒数据）：</strong> 只使用 AOF (<code>appendfsync everysec</code>)。</li><li><strong>最推荐：</strong> <strong>同时开启 RDB 和 AOF。</strong></li></ul><p><strong>结合使用 RDB 和 AOF (<code>appendonly yes</code>, <code>save</code> 配置):</strong></p><p>这是生产环境最常用和最可靠的配置方案。</p><ul><li><strong>优势：</strong> 结合了 RDB 的快速启动和备份优点，以及 AOF 的高数据安全性（丢失数据少）和日志可读性优点。 <ul><li>RDB 文件可以作为 AOF 文件损坏时的备用恢复手段。</li><li>RDB 文件适合用于 Master-Replica 全量同步。</li></ul></li><li><strong>恢复过程：</strong> 当 RDB 文件和 AOF 文件都存在时，Redis 启动时会<strong>优先加载 AOF 文件</strong>进行恢复，因为 AOF 文件通常包含的数据比 RDB 文件更完整（更接近宕机前的状态）。只有当 AOF 文件不存在或损坏时，才会去尝试加载 RDB 文件。</li></ul><h3 id="四、-持久化与线程模型、大key等概念的关联" tabindex="-1"><a class="header-anchor" href="#四、-持久化与线程模型、大key等概念的关联"><span>四、 持久化与线程模型、大Key等概念的关联</span></a></h3><ul><li><strong>线程模型：</strong> 持久化是 Redis 使用多进程/多线程的重要场景。<code>BGSAVE</code> 和 <code>BGREWRITEAOF</code> 通过 <code>fork</code> 子进程来执行耗时的写盘操作，避免阻塞主线程。<code>appendfsync everysec</code> 则利用后台线程进行异步刷盘。</li><li><strong>大Key：</strong> 大Key会增加 <code>fork</code> 时的 CoW 开销，导致内存瞬时占用高。删除大Key（特别是未使用 <code>UNLINK</code> 时）会长时间阻塞。即使使用 <code>UNLINK</code>，AOF 文件中也会记录对应的删除命令。加载包含大量 Key 或大 Key 的 RDB/AOF 文件会显著增加恢复时间。</li><li><strong>主从复制：</strong> 主从全量同步时，Master 会触发 <code>BGSAVE</code> 生成 RDB 文件发送给 Replica。增量同步则基于 Master 的复制积压缓冲区和 AOF 的命令流。持久化是复制的基础。</li></ul><h3 id="五、-对java开发者的启示" tabindex="-1"><a class="header-anchor" href="#五、-对java开发者的启示"><span>五、 对Java开发者的启示</span></a></h3><p>理解 Redis 持久化机制，能帮助 Java 开发者更好地设计和维护分布式系统：</p><ul><li><strong>根据业务对数据丢失的容忍度，合理选择或建议 Redis 的持久化策略。</strong> 这是分布式系统设计和面试时必须考虑的问题。如果你的数据完全可以重建（如缓存），可以关闭持久化；如果数据非常关键，必须开启 AOF，并考虑 <code>everysec</code> 或更高的安全性。</li><li><strong>了解持久化操作的潜在影响：</strong> 知道 <code>BGSAVE</code>/<code>BGREWRITEAOF</code> 触发时，尽管是异步，但 <code>fork</code> 瞬间可能导致短暂的阻塞和内存使用量增加。</li><li><strong>进行容量规划：</strong> 估算 RDB 文件大小、AOF 文件增长速度以及 CoW 带来的内存峰值，合理规划 Redis 实例的内存大小和磁盘空间。</li><li><strong>制定备份和恢复策略：</strong> 知道 RDB 文件是进行离线数据备份和快速恢复的最佳选择，应定期备份 RDB 文件到安全的地方。</li><li><strong>排查问题：</strong> 当 Redis 重启后发现数据丢失时，知道去检查 <code>redis.conf</code> 中的持久化配置、RDB 文件和 AOF 文件是否正常。如果 Redis 出现周期性或短暂的卡顿，可以排查是否与自动 <code>BGSAVE</code> 或 AOF 重写触发有关。</li></ul><h3 id="六、-面试官视角-持久化的考察点" tabindex="-1"><a class="header-anchor" href="#六、-面试官视角-持久化的考察点"><span>六、 面试官视角：持久化的考察点</span></a></h3><p>Redis 持久化是面试中考察候选人系统可靠性、数据安全意识和底层机制理解的重要知识点。面试官常通过以下问题进行考察：</p><ul><li>RDB 和 AOF 的<strong>区别</strong>是什么？各自的<strong>优缺点</strong>？</li><li>你们生产环境使用了哪种持久化方式？<strong>为什么</strong>这样选择？</li><li>AOF 的 <code>appendfsync</code> 有哪些选项？<code>always</code>, <code>everysec</code>, <code>no</code> 各有什么<strong>区别</strong>、<strong>性能</strong>和<strong>数据安全</strong>特点？</li><li>Redis 重启时，如果 RDB 和 AOF 文件都存在，会优先加载哪个？<strong>为什么</strong>？</li><li>RDB 和 AOF 的<strong>重写</strong>原理是什么？重写过程会<strong>阻塞</strong>主线程吗？</li><li><code>fork()</code> 在 Redis 持久化中有什么作用？解释一下 <strong>Copy-On-Write (CoW)</strong> 机制。</li><li>如何选择合适的持久化策略？（结合业务场景）</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>持久化是保障 Redis 数据不丢失的生命线。Redis 提供了 RDB（快照）和 AOF（命令日志）两种灵活的持久化方式。RDB 适用于快速备份和恢复，但数据安全性稍低；AOF 提供更高的数据安全性，但文件较大且恢复相对慢。</p><p>生产环境最推荐的方案是<strong>同时开启 RDB 和 AOF</strong>，结合两者的优点，并通过合理的 <code>appendfsync</code> 配置（推荐 <code>everysec</code>）来平衡性能和数据安全性。理解 RDB 和 AOF 的工作原理，特别是其中的 <code>fork</code>、CoW、<code>appendfsync</code>、AOF 重写等机制，对于保障 Redis 服务的稳定可靠、进行系统设计和应对面试至关重要。</p>`,50)]))}const g=o(t,[["render",d],["__file","redis-persistent.html.vue"]]),a=JSON.parse('{"path":"/redis/redis-persistent.html","title":"","lang":"zh-CN","frontmatter":{"description":"数据不丢的秘密：Redis持久化机制深度解析（RDB vs AOF） Redis以其内存存储带来的极速性能而闻名，但内存数据最大的问题在于其易失性——一旦服务器宕机、重启或Redis进程崩溃，内存中的数据就会烟消云散。这对于缓存固然可以接受，但对于需要持久存储的数据（如分布式锁、计数器、排行榜等）来说，数据丢失是绝对不能容忍的。 为了解决数据丢失问题，...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/redis/redis-persistent.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"数据不丢的秘密：Redis持久化机制深度解析（RDB vs AOF） Redis以其内存存储带来的极速性能而闻名，但内存数据最大的问题在于其易失性——一旦服务器宕机、重启或Redis进程崩溃，内存中的数据就会烟消云散。这对于缓存固然可以接受，但对于需要持久存储的数据（如分布式锁、计数器、排行榜等）来说，数据丢失是绝对不能容忍的。 为了解决数据丢失问题，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"数据不丢的秘密：Redis持久化机制深度解析（RDB vs AOF）","slug":"数据不丢的秘密-redis持久化机制深度解析-rdb-vs-aof","link":"#数据不丢的秘密-redis持久化机制深度解析-rdb-vs-aof","children":[{"level":3,"title":"一、 RDB (Redis Database) 持久化：快照模式","slug":"一、-rdb-redis-database-持久化-快照模式","link":"#一、-rdb-redis-database-持久化-快照模式","children":[]},{"level":3,"title":"二、 AOF (Append Only File) 持久化：日志追加模式","slug":"二、-aof-append-only-file-持久化-日志追加模式","link":"#二、-aof-append-only-file-持久化-日志追加模式","children":[]},{"level":3,"title":"三、 RDB 和 AOF 的选择与组合","slug":"三、-rdb-和-aof-的选择与组合","link":"#三、-rdb-和-aof-的选择与组合","children":[]},{"level":3,"title":"四、 持久化与线程模型、大Key等概念的关联","slug":"四、-持久化与线程模型、大key等概念的关联","link":"#四、-持久化与线程模型、大key等概念的关联","children":[]},{"level":3,"title":"五、 对Java开发者的启示","slug":"五、-对java开发者的启示","link":"#五、-对java开发者的启示","children":[]},{"level":3,"title":"六、 面试官视角：持久化的考察点","slug":"六、-面试官视角-持久化的考察点","link":"#六、-面试官视角-持久化的考察点","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1745924024000,"updatedTime":1746115551000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":2}]},"readingTime":{"minutes":14.46,"words":4339},"filePathRelative":"redis/redis-persistent.md","localizedDate":"2025年4月29日","autoDesc":true}');export{g as comp,a as data};
