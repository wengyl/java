import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as t}from"./app-CzKZ5RuK.js";const p={};function o(r,s){return t(),a("div",null,s[0]||(s[0]=[e(`<p>一个MySQL锁相关的问题，你看一下这条SQL会对哪些数据加锁？</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">&#39;一灯&#39;</span> <span class="token keyword">where</span> age<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表结构是这样的：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_age<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;用户表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我：</strong> age是非唯一性索引，MySQL的锁是加在索引上面的，应该只会对age=5的数据加锁。</p><p><strong>面试官：</strong> 确定吗？</p><p><strong>我：</strong> 嗯...，应该是的。</p><p><strong>面试官：</strong> 【嘲讽】，这就是你精通MySQL的水平吗？今天面试就先到这里吧，后面有消息会主动联系你。</p><blockquote><p>后面还可能有消息吗？你们啥时候主动联系过我？ 实话实说的被拒，八股文背得溜反而被录取。 好吧，等我看看一灯怎么总结的MySQL的八股文。</p></blockquote><p><strong>我：</strong> 这条SQL具体对哪些数据加锁，还需要看表中有哪些数据。</p><p>MySQL有三种类型的行锁：</p><p><strong>记录锁（Record Locks）：</strong></p><p>即对某条记录加锁。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 对id=1的用户加锁</span>
<span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> age<span class="token operator">=</span>age<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>间隙锁（Gap Locks）：</strong></p><p>即对某个范围加锁，但是不包含范围的临界数据。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 对id大于1并且小于10的用户加锁</span>
<span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> age<span class="token operator">=</span>age<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> id<span class="token operator">&gt;</span><span class="token number">1</span> <span class="token operator">and</span> id<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面SQL的加锁范围是(1,10)。</p><p><strong>临键锁（Next-Key Locks）：</strong></p><p>由记录锁和间隙锁组成，既包含记录本身又包含范围，左开右闭区间。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 对id大于1并且小于等于10的用户加锁</span>
<span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> age<span class="token operator">=</span>age<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> id<span class="token operator">&gt;</span><span class="token number">1</span> <span class="token operator">and</span> id<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>假如表中只有这样两条数据的话：</p><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>1</td></tr><tr><td>10</td><td>李四</td><td>10</td></tr></tbody></table><p>针对age索引，很产生这样三个索引范围：</p><blockquote><p>(-∞,1]，(1,10]，(10,+∞)</p></blockquote><p>刚才的这条SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">&#39;一灯&#39;</span> <span class="token keyword">where</span> age<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于表中不存在age=5的记录，并且age=5刚好落在 <strong>(1,10]</strong> 的区间范围内，所以会对 <strong>(1,10]</strong> 的范围加锁。</p><p>我们可以用实际数据测试一下：</p><figure><img src="https://javabaguwen.com/img/加锁范围1.png" alt="image-20220605183947376.png" tabindex="0" loading="lazy"><figcaption>image-20220605183947376.png</figcaption></figure><p>当我们执行update语句的时候，age=2和age=8的数据范围都被加锁了。</p><p><strong>面试官：</strong> 小伙子回答的不错啊。如果已经存在age=5的数据，刚才的那条update语句会对哪些数据加锁？</p><p><strong>我：</strong> 假如表中数据是这样的。</p><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>1</td></tr><tr><td>5</td><td>一灯架构</td><td>5</td></tr><tr><td>10</td><td>李四</td><td>10</td></tr></tbody></table><p>针对age索引，很产生这样四个索引范围：</p><blockquote><p>(-∞,1]，(1,5]，(5,10]，(10,+∞)</p></blockquote><p>刚才的这条SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">&#39;一灯&#39;</span> <span class="token keyword">where</span> age<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>age=5的数据落在 <strong>(1,5]</strong> 的区间范围内，所以会对 <strong>(1,5]</strong> 的范围加锁。</p><p>你以为这就完了吗？MySQL锁为了保证数据的安全性，还会向右遍历到不满足条件为止，还会再加一个间隙锁，也就是 <strong>(5,10]</strong> 的范围。</p><p>所以，这条SQL的加锁返回是  <strong>(1,5]</strong> 和 <strong>(5,10]</strong> 。</p><p>跟刚才age=5不存在的加锁范围 <strong>(1,10]</strong> 是一样的。不信可以再用刚才的测试用例跑一遍。</p><figure><img src="https://javabaguwen.com/img/加锁范围2.png" alt="image-20220605185742371.png" tabindex="0" loading="lazy"><figcaption>image-20220605185742371.png</figcaption></figure><p><strong>面试官：</strong> 小伙子有点东西。如果我把SQL中where条件换成主键ID，加锁范围是什么样的？</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">&#39;一灯&#39;</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>我：</strong> 由于锁是加在索引上面的。</p><p>如果不存在id=5的数据，加锁范围跟上条SQL是一样的， <strong>(1,10]</strong> 。</p><p>如果存在id=5的数据，MySQL的 <strong>Next-Key Locks</strong> 会退化成 <strong>Record Locks</strong> ，也就是只在id=5的这一行记录上加锁。</p><p><strong>面试官：</strong> 小伙子，升级加薪的机会就是留给你这样的人。薪资double，明天就来上班吧。</p><p><strong>知识点总结：</strong></p><ol><li>MySQL锁是加在索引记录上面的。</li><li>如果是非唯一性索引，不论表中是否存在该记录，除了会对该记录所在范围加锁，还会向右遍历到不满足条件的范围进行加锁。</li><li>如果是唯一索引，如果表中存在该记录，只对该行记录加锁。如果表中不存在该记录，除了会对该记录所在范围加锁，还会向右遍历到不满足条件的范围进行加锁。</li></ol>`,51)]))}const i=n(p,[["render",o],["__file","range.html.vue"]]),d=JSON.parse('{"path":"/mysql/range.html","title":"","lang":"zh-CN","frontmatter":{"description":"一个MySQL锁相关的问题，你看一下这条SQL会对哪些数据加锁？ 表结构是这样的： 我： age是非唯一性索引，MySQL的锁是加在索引上面的，应该只会对age=5的数据加锁。 面试官： 确定吗？ 我： 嗯...，应该是的。 面试官： 【嘲讽】，这就是你精通MySQL的水平吗？今天面试就先到这里吧，后面有消息会主动联系你。 后面还可能有消息吗？你们啥时...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/mysql/range.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"一个MySQL锁相关的问题，你看一下这条SQL会对哪些数据加锁？ 表结构是这样的： 我： age是非唯一性索引，MySQL的锁是加在索引上面的，应该只会对age=5的数据加锁。 面试官： 确定吗？ 我： 嗯...，应该是的。 面试官： 【嘲讽】，这就是你精通MySQL的水平吗？今天面试就先到这里吧，后面有消息会主动联系你。 后面还可能有消息吗？你们啥时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javabaguwen.com/img/%E5%8A%A0%E9%94%81%E8%8C%83%E5%9B%B41.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T06:25:28.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-04-29T06:25:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://javabaguwen.com/img/%E5%8A%A0%E9%94%81%E8%8C%83%E5%9B%B41.png\\",\\"https://javabaguwen.com/img/%E5%8A%A0%E9%94%81%E8%8C%83%E5%9B%B42.png\\"],\\"dateModified\\":\\"2025-04-29T06:25:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1745907928000,"updatedTime":1745907928000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":3.66,"words":1099},"filePathRelative":"mysql/range.md","localizedDate":"2025年4月29日","autoDesc":true}');export{i as comp,d as data};
