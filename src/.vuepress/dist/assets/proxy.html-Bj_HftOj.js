import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as s,e as l,b as a,d as e,r as i,o as r}from"./app-CzKZ5RuK.js";const u={},d={href:"https://developer.aliyun.com/article/1630374",target:"_blank",rel:"noopener noreferrer"},c={href:"https://www.cnblogs.com/loquat6/p/17261075.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.tulingxueyuan.cn/tlzx/javamst/17396.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.yisu.com/jc/215352.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/loquat6/p/17261075.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cnblogs.com/zjfjava/p/16795493.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.cnblogs.com/zjfjava/p/16795493.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://zhuanlan.zhihu.com/p/359480475",target:"_blank",rel:"noopener noreferrer"},y={href:"https://zhuanlan.zhihu.com/p/359480475",target:"_blank",rel:"noopener noreferrer"},w={href:"https://segmentfault.com/a/1190000004360241",target:"_blank",rel:"noopener noreferrer"},x={href:"https://segmentfault.com/a/1190000004360241",target:"_blank",rel:"noopener noreferrer"},j={href:"https://segmentfault.com/a/1190000004360241?sort=newest",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.cnblogs.com/scar1et/p/11955629.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://blog.csdn.net/qq_33949023/article/details/113223269",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.cnblogs.com/zjfjava/p/16795493.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://www.tulingxueyuan.cn/tlzx/javamst/12218.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://developer.aliyun.com/article/1047146",target:"_blank",rel:"noopener noreferrer"},I={href:"https://xie.infoq.cn/article/7b34a71aaaa975b0cb5b41904",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.cnblogs.com/loquat6/p/17261075.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.zhihu.com/question/480315061/answer/2759857305",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.tulingxueyuan.cn/tlzx/javamst/12218.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://zhuanlan.zhihu.com/p/234911221",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.cnblogs.com/zjfjava/p/16795493.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://blog.csdn.net/Along39988/article/details/123904213",target:"_blank",rel:"noopener noreferrer"},N={href:"https://developer.aliyun.com/article/619238",target:"_blank",rel:"noopener noreferrer"};function A(O,n){const t=i("ExternalLinkIcon");return r(),o("div",null,[n[87]||(n[87]=s("h2",{id:"一、代理模式的-双重人格-隔离与控制",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#一、代理模式的-双重人格-隔离与控制"},[s("span",null,'一、代理模式的"双重人格"：隔离与控制')])],-1)),s("p",null,[n[2]||(n[2]=a("代理模式就像明星的经纪人——")),n[3]||(n[3]=s("strong",null,"控制访问",-1)),n[4]||(n[4]=a("并")),n[5]||(n[5]=s("strong",null,"扩展功能",-1)),n[6]||(n[6]=a("。通过代理对象间接操作目标对象，既能实现业务逻辑隔离（如权限校验），又能无缝添加日志、事务等扩展功能")),s("a",d,[n[0]||(n[0]=a("[1]")),e(t)]),n[7]||(n[7]=a()),s("a",c,[n[1]||(n[1]=a("[6]")),e(t)]),n[8]||(n[8]=a("。"))]),n[88]||(n[88]=l(`<p><strong>静态代理</strong>像是定制西装：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Payment</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 目标类</span>
<span class="token keyword">class</span> <span class="token class-name">Alipay</span> <span class="token keyword">implements</span> <span class="token class-name">Payment</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 支付逻辑 */</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 代理类</span>
<span class="token keyword">class</span> <span class="token class-name">PaymentProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Payment</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Alipay</span> target<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;支付开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 核心调用</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;支付完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[11]||(n[11]=a("每个接口都需要手动编写代理类，当接口新增方法时，所有代理类必须同步修改，维护成本极高")),s("a",k,[n[9]||(n[9]=a("[2]")),e(t)]),n[12]||(n[12]=a()),s("a",m,[n[10]||(n[10]=a("[12]")),e(t)]),n[13]||(n[13]=a("。"))]),n[89]||(n[89]=s("p",null,[s("strong",null,"动态代理"),a("则是万能裁缝：")],-1)),n[90]||(n[90]=s("ul",null,[s("li",null,[s("strong",null,"JDK动态代理"),a("：运行时通过反射生成"),s("code",null,"$Proxy0"),a("类，代理所有接口方法")]),s("li",null,[s("strong",null,"CGLIB代理"),a("：通过ASM生成目标类的子类，连非接口方法也能代理")])],-1)),s("p",null,[n[18]||(n[18]=s("img",{src:"https://via.placeholder.com/600x200",alt:"代理模式内存模型对比",loading:"lazy"},null,-1)),s("em",null,[n[16]||(n[16]=a("静态代理编译期确定类结构，动态代理运行时生成字节码")),s("a",v,[n[14]||(n[14]=a("[6]")),e(t)]),n[17]||(n[17]=a()),s("a",b,[n[15]||(n[15]=a("[40]")),e(t)])])]),n[91]||(n[91]=l(`<hr><h2 id="二、动态代理的-武功秘籍" tabindex="-1"><a class="header-anchor" href="#二、动态代理的-武功秘籍"><span>二、动态代理的&quot;武功秘籍&quot;</span></a></h2><h3 id="_1-jdk动态代理-接口的艺术" tabindex="-1"><a class="header-anchor" href="#_1-jdk动态代理-接口的艺术"><span>1. JDK动态代理：接口的艺术</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span> <span class="token comment">// 目标对象</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;调用开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;调用结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 生成代理对象</span>
<span class="token class-name">Payment</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Payment</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
    target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">LogHandler</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心机制</strong>：</p>`,5)),s("ol",null,[n[25]||(n[25]=s("li",null,[s("code",null,"ProxyGenerator"),a("生成"),s("code",null,"$Proxy0.class"),a("字节码")],-1)),n[26]||(n[26]=s("li",null,[a("代理类继承"),s("code",null,"Proxy"),a("并实现目标接口")],-1)),s("li",null,[n[21]||(n[21]=a("通过")),n[22]||(n[22]=s("code",null,"Method",-1)),n[23]||(n[23]=a("对象反射调用目标方法")),s("a",g,[n[19]||(n[19]=a("[40]")),e(t)]),n[24]||(n[24]=a()),s("a",f,[n[20]||(n[20]=a("[56]")),e(t)])])]),n[92]||(n[92]=l(`<h3 id="_2-cglib代理-继承的魔法" tabindex="-1"><a class="header-anchor" href="#_2-cglib代理-继承的魔法"><span>2. CGLIB代理：继承的魔法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;拦截方法:&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">UserService</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键技术</strong>：</p>`,3)),s("ul",null,[n[32]||(n[32]=s("li",null,[s("strong",null,"FastClass机制"),a("：为每个方法生成索引ID，直接通过ID调用方法避免反射")],-1)),s("li",null,[n[29]||(n[29]=s("strong",null,"ASM字节码操纵",-1)),n[30]||(n[30]=a("：动态生成继承目标类的子类")),s("a",y,[n[27]||(n[27]=a("[56]")),e(t)]),n[31]||(n[31]=a()),s("a",w,[n[28]||(n[28]=a("[36]")),e(t)])])]),n[93]||(n[93]=s("hr",null,null,-1)),n[94]||(n[94]=s("h2",{id:"三、性能对决-速度与空间的较量",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#三、性能对决-速度与空间的较量"},[s("span",null,"三、性能对决：速度与空间的较量")])],-1)),n[95]||(n[95]=s("h3",{id:"jmh基准测试数据-100万次调用",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#jmh基准测试数据-100万次调用"},[s("span",null,"JMH基准测试数据（100万次调用）")])],-1)),s("table",null,[n[43]||(n[43]=s("thead",null,[s("tr",null,[s("th",null,"方案"),s("th",null,"耗时(ms)"),s("th",null,"内存峰值(MB)"),s("th",null,"适用场景")])],-1)),s("tbody",null,[n[41]||(n[41]=s("tr",null,[s("td",null,"JDK动态代理"),s("td",null,"120"),s("td",null,"15"),s("td",null,"接口存在、高频更新")],-1)),n[42]||(n[42]=s("tr",null,[s("td",null,"CGLIB"),s("td",null,"85"),s("td",null,"22"),s("td",null,"无接口、性能敏感场景")],-1)),s("tr",null,[n[38]||(n[38]=s("td",null,"静态代理",-1)),n[39]||(n[39]=s("td",null,"95",-1)),n[40]||(n[40]=s("td",null,"12",-1)),s("td",null,[n[35]||(n[35]=a("方法少、长期稳定接口")),s("a",x,[n[33]||(n[33]=a("[36]")),e(t)]),n[36]||(n[36]=a()),s("a",j,[n[34]||(n[34]=a("[57]")),e(t)]),n[37]||(n[37]=a("_"))])])])]),n[96]||(n[96]=s("p",null,[s("strong",null,"选型建议"),a("：")],-1)),s("ul",null,[n[49]||(n[49]=s("li",null,[s("strong",null,"有接口"),a("：优先JDK动态代理（Java 8+性能优化显著）")],-1)),n[50]||(n[50]=s("li",null,[s("strong",null,"无接口/性能敏感"),a("：选择CGLIB（注意final方法限制）")],-1)),s("li",null,[n[46]||(n[46]=s("strong",null,"高并发场景",-1)),n[47]||(n[47]=a("：考虑静态代理预编译优势")),s("a",h,[n[44]||(n[44]=a("[10]")),e(t)]),n[48]||(n[48]=a()),s("a",C,[n[45]||(n[45]=a("[30]")),e(t)])])]),n[97]||(n[97]=l(`<hr><h2 id="四、框架级实战-spring与dubbo的智慧" tabindex="-1"><a class="header-anchor" href="#四、框架级实战-spring与dubbo的智慧"><span>四、框架级实战：Spring与Dubbo的智慧</span></a></h2><h3 id="_1-spring-aop的代理策略" tabindex="-1"><a class="header-anchor" href="#_1-spring-aop的代理策略"><span>1. Spring AOP的代理策略</span></a></h3><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 强制使用CGLIB --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring根据目标对象是否实现接口自动选择：</p>`,5)),s("ul",null,[n[58]||(n[58]=s("li",null,[s("strong",null,"实现接口"),a("：JDK动态代理")],-1)),s("li",null,[n[53]||(n[53]=s("strong",null,"未实现接口",-1)),n[54]||(n[54]=a("：CGLIB代理 源码中通过")),n[55]||(n[55]=s("code",null,"DefaultAopProxyFactory",-1)),n[56]||(n[56]=a("决策代理方式")),s("a",D,[n[51]||(n[51]=a("[40]")),e(t)]),n[57]||(n[57]=a()),s("a",P,[n[52]||(n[52]=a("[44]")),e(t)])])]),n[98]||(n[98]=l(`<h3 id="_2-dubbo的远程调用" tabindex="-1"><a class="header-anchor" href="#_2-dubbo的远程调用"><span>2. Dubbo的远程调用</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 服务引用生成代理</span>
<span class="token class-name">ReferenceConfig</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoService</span><span class="token punctuation">&gt;</span></span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceConfig</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reference<span class="token punctuation">.</span><span class="token function">setInterface</span><span class="token punctuation">(</span><span class="token class-name">DemoService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DemoService</span> proxy <span class="token operator">=</span> reference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 动态代理对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[61]||(n[61]=a("通过动态代理封装网络通信细节，客户端像调用本地方法一样使用远程服务")),s("a",q,[n[59]||(n[59]=a("[29]")),e(t)]),n[62]||(n[62]=a()),s("a",I,[n[60]||(n[60]=a("[59]")),e(t)])]),n[99]||(n[99]=s("hr",null,null,-1)),n[100]||(n[100]=s("h2",{id:"五、面试直通车-必知必会",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#五、面试直通车-必知必会"},[s("span",null,"五、面试直通车：必知必会")])],-1)),n[101]||(n[101]=s("h3",{id:"高频对比题",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#高频对比题"},[s("span",null,"高频对比题")])],-1)),s("table",null,[n[73]||(n[73]=s("thead",null,[s("tr",null,[s("th",null,"维度"),s("th",null,"JDK动态代理"),s("th",null,"CGLIB代理")])],-1)),s("tbody",null,[n[70]||(n[70]=s("tr",null,[s("td",null,"实现基础"),s("td",null,"接口"),s("td",null,"继承")],-1)),n[71]||(n[71]=s("tr",null,[s("td",null,"性能"),s("td",null,"调用慢（反射）、生成快"),s("td",null,"调用快（FastClass）、生成慢")],-1)),n[72]||(n[72]=s("tr",null,[s("td",null,"final限制"),s("td",null,"无影响"),s("td",null,"无法代理final方法")],-1)),s("tr",null,[n[68]||(n[68]=s("td",null,"内存消耗",-1)),n[69]||(n[69]=s("td",null,"低",-1)),s("td",null,[n[65]||(n[65]=a("高（生成子类）")),s("a",L,[n[63]||(n[63]=a("[6]")),e(t)]),n[66]||(n[66]=a()),s("a",J,[n[64]||(n[64]=a("[25]")),e(t)]),n[67]||(n[67]=a("_"))])])])]),n[102]||(n[102]=s("h3",{id:"设计模式辨析",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#设计模式辨析"},[s("span",null,"设计模式辨析")])],-1)),s("ul",null,[n[79]||(n[79]=s("li",null,[s("strong",null,"代理 vs 装饰器"),a("：前者控制访问，后者增强功能")],-1)),s("li",null,[n[76]||(n[76]=s("strong",null,"代理 vs 适配器",-1)),n[77]||(n[77]=a("：前者保持接口一致，后者转换接口")),s("a",z,[n[74]||(n[74]=a("[44]")),e(t)]),n[78]||(n[78]=a()),s("a",S,[n[75]||(n[75]=a("[49]")),e(t)])])]),n[103]||(n[103]=l(`<hr><h2 id="六、陷阱与优化" tabindex="-1"><a class="header-anchor" href="#六、陷阱与优化"><span>六、陷阱与优化</span></a></h2><h3 id="_1-jdk-17-的模块化限制" tabindex="-1"><a class="header-anchor" href="#_1-jdk-17-的模块化限制"><span>1. JDK 17+的模块化限制</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 启动参数添加</span>
--add-opens java.base/java.lang<span class="token operator">=</span>ALL-UNNAMED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[81]||(n[81]=a("Java 9+的模块系统限制了反射访问，需要手动开放权限包")),s("a",M,[n[80]||(n[80]=a("[40]")),e(t)])]),n[104]||(n[104]=l(`<h3 id="_2-内存泄漏案例" tabindex="-1"><a class="header-anchor" href="#_2-内存泄漏案例"><span>2. 内存泄漏案例</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 错误示例：未关闭ClassLoader</span>
<span class="token class-name">ClassLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MyInterface</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyInterface</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
    loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> handler
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 长时间运行后PermGen溢出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[83]||(n[83]=a("解决方案：及时回收或使用公共ClassLoader")),s("a",B,[n[82]||(n[82]=a("[43]")),e(t)])]),n[105]||(n[105]=s("hr",null,null,-1)),n[106]||(n[106]=s("p",null,[s("strong",null,"延伸阅读"),a("：")],-1)),s("ul",null,[n[86]||(n[86]=s("li",null,"《Effective Java》条目18：接口优于抽象类",-1)),s("li",null,[n[85]||(n[85]=a("JEP 416：方法句柄替代反射（JDK 18性能优化）")),s("a",N,[n[84]||(n[84]=a("[46]")),e(t)])])]),n[107]||(n[107]=s("p",null,'掌握代理模式的底层原理与工程实践，是构建高扩展性Java系统的关键。选择代理方案时，需在接口约束、性能需求、维护成本之间寻找平衡点，正如武侠中的"无招胜有招"——理解本质方能游刃有余。',-1))])}const E=p(u,[["render",A],["__file","proxy.html.vue"]]),H=JSON.parse('{"path":"/basic/proxy.html","title":"","lang":"zh-CN","frontmatter":{"description":"一、代理模式的\\"双重人格\\"：隔离与控制 代理模式就像明星的经纪人——控制访问并扩展功能。通过代理对象间接操作目标对象，既能实现业务逻辑隔离（如权限校验），又能无缝添加日志、事务等扩展功能[1] [6]。 静态代理像是定制西装： 每个接口都需要手动编写代理类，当接口新增方法时，所有代理类必须同步修改，维护成本极高[2] [12]。 动态代理则是万能裁缝：...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javabaguwen/basic/proxy.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"一、代理模式的\\"双重人格\\"：隔离与控制 代理模式就像明星的经纪人——控制访问并扩展功能。通过代理对象间接操作目标对象，既能实现业务逻辑隔离（如权限校验），又能无缝添加日志、事务等扩展功能[1] [6]。 静态代理像是定制西装： 每个接口都需要手动编写代理类，当接口新增方法时，所有代理类必须同步修改，维护成本极高[2] [12]。 动态代理则是万能裁缝：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://via.placeholder.com/600x200"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://via.placeholder.com/600x200\\"],\\"dateModified\\":\\"2025-05-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、代理模式的\\"双重人格\\"：隔离与控制","slug":"一、代理模式的-双重人格-隔离与控制","link":"#一、代理模式的-双重人格-隔离与控制","children":[]},{"level":2,"title":"二、动态代理的\\"武功秘籍\\"","slug":"二、动态代理的-武功秘籍","link":"#二、动态代理的-武功秘籍","children":[{"level":3,"title":"1. JDK动态代理：接口的艺术","slug":"_1-jdk动态代理-接口的艺术","link":"#_1-jdk动态代理-接口的艺术","children":[]},{"level":3,"title":"2. CGLIB代理：继承的魔法","slug":"_2-cglib代理-继承的魔法","link":"#_2-cglib代理-继承的魔法","children":[]}]},{"level":2,"title":"三、性能对决：速度与空间的较量","slug":"三、性能对决-速度与空间的较量","link":"#三、性能对决-速度与空间的较量","children":[{"level":3,"title":"JMH基准测试数据（100万次调用）","slug":"jmh基准测试数据-100万次调用","link":"#jmh基准测试数据-100万次调用","children":[]}]},{"level":2,"title":"四、框架级实战：Spring与Dubbo的智慧","slug":"四、框架级实战-spring与dubbo的智慧","link":"#四、框架级实战-spring与dubbo的智慧","children":[{"level":3,"title":"1. Spring AOP的代理策略","slug":"_1-spring-aop的代理策略","link":"#_1-spring-aop的代理策略","children":[]},{"level":3,"title":"2. Dubbo的远程调用","slug":"_2-dubbo的远程调用","link":"#_2-dubbo的远程调用","children":[]}]},{"level":2,"title":"五、面试直通车：必知必会","slug":"五、面试直通车-必知必会","link":"#五、面试直通车-必知必会","children":[{"level":3,"title":"高频对比题","slug":"高频对比题","link":"#高频对比题","children":[]},{"level":3,"title":"设计模式辨析","slug":"设计模式辨析","link":"#设计模式辨析","children":[]}]},{"level":2,"title":"六、陷阱与优化","slug":"六、陷阱与优化","link":"#六、陷阱与优化","children":[{"level":3,"title":"1. JDK 17+的模块化限制","slug":"_1-jdk-17-的模块化限制","link":"#_1-jdk-17-的模块化限制","children":[]},{"level":3,"title":"2. 内存泄漏案例","slug":"_2-内存泄漏案例","link":"#_2-内存泄漏案例","children":[]}]}],"git":{"createdTime":1745924024000,"updatedTime":1746115551000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":2}]},"readingTime":{"minutes":3.97,"words":1191},"filePathRelative":"basic/proxy.md","localizedDate":"2025年4月29日","autoDesc":true}');export{E as comp,H as data};
